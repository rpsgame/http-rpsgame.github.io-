
var Module;

if (typeof Module === 'undefined') Module = {};

if (!Module.expectedDataFileDownloads) {
  Module.expectedDataFileDownloads = 0;
  Module.finishedDataFileDownloads = 0;
}
Module.expectedDataFileDownloads++;
(function() {
 var loadPackage = function(metadata) {

    var PACKAGE_PATH;
    if (typeof window === 'object') {
      PACKAGE_PATH = window['encodeURIComponent'](window.location.pathname.toString().substring(0, window.location.pathname.toString().lastIndexOf('/')) + '/');
    } else if (typeof location !== 'undefined') {
      // worker
      PACKAGE_PATH = encodeURIComponent(location.pathname.toString().substring(0, location.pathname.toString().lastIndexOf('/')) + '/');
    } else {
      throw 'using preloaded data can only be done on a web page or in a web worker';
    }
    var PACKAGE_NAME = 'nes.data';
    var REMOTE_PACKAGE_BASE = 'nes.data';
    if (typeof Module['locateFilePackage'] === 'function' && !Module['locateFile']) {
      Module['locateFile'] = Module['locateFilePackage'];
      Module.printErr('warning: you defined Module.locateFilePackage, that has been renamed to Module.locateFile (using your locateFilePackage for now)');
    }
    var REMOTE_PACKAGE_NAME = typeof Module['locateFile'] === 'function' ?
                              Module['locateFile'](REMOTE_PACKAGE_BASE) :
                              ((Module['filePackagePrefixURL'] || '') + REMOTE_PACKAGE_BASE);
  
    var REMOTE_PACKAGE_SIZE = metadata.remote_package_size;
    var PACKAGE_UUID = metadata.package_uuid;
  
    function fetchRemotePackage(packageName, packageSize, callback, errback) {
      var xhr = new XMLHttpRequest();
      xhr.open('GET', packageName, true);
      xhr.responseType = 'arraybuffer';
      xhr.onprogress = function(event) {
        var url = packageName;
        var size = packageSize;
        if (event.total) size = event.total;
        if (event.loaded) {
          if (!xhr.addedTotal) {
            xhr.addedTotal = true;
            if (!Module.dataFileDownloads) Module.dataFileDownloads = {};
            Module.dataFileDownloads[url] = {
              loaded: event.loaded,
              total: size
            };
          } else {
            Module.dataFileDownloads[url].loaded = event.loaded;
          }
          var total = 0;
          var loaded = 0;
          var num = 0;
          for (var download in Module.dataFileDownloads) {
          var data = Module.dataFileDownloads[download];
            total += data.total;
            loaded += data.loaded;
            num++;
          }
          total = Math.ceil(total * Module.expectedDataFileDownloads/num);
          if (Module['setStatus']) Module['setStatus']('Downloading data... (' + loaded + '/' + total + ')');
        } else if (!Module.dataFileDownloads) {
          if (Module['setStatus']) Module['setStatus']('Downloading data...');
        }
      };
      xhr.onload = function(event) {
        var packageData = xhr.response;
        callback(packageData);
      };
      xhr.send(null);
    };

    function handleError(error) {
      console.error('package error:', error);
    };
  
      var fetched = null, fetchedCallback = null;
      fetchRemotePackage(REMOTE_PACKAGE_NAME, REMOTE_PACKAGE_SIZE, function(data) {
        if (fetchedCallback) {
          fetchedCallback(data);
          fetchedCallback = null;
        } else {
          fetched = data;
        }
      }, handleError);
    
  function runWithFS() {

    function assert(check, msg) {
      if (!check) throw msg + new Error().stack;
    }

    function DataRequest(start, end, crunched, audio) {
      this.start = start;
      this.end = end;
      this.crunched = crunched;
      this.audio = audio;
    }
    DataRequest.prototype = {
      requests: {},
      open: function(mode, name) {
        this.name = name;
        this.requests[name] = this;
        Module['addRunDependency']('fp ' + this.name);
      },
      send: function() {},
      onload: function() {
        var byteArray = this.byteArray.subarray(this.start, this.end);

          this.finish(byteArray);

      },
      finish: function(byteArray) {
        var that = this;

        Module['FS_createDataFile'](this.name, null, byteArray, true, true, true); // canOwn this data in the filesystem, it is a slide into the heap that will never change
        Module['removeRunDependency']('fp ' + that.name);

        this.requests[this.name] = null;
      },
    };

        var files = metadata.files;
        for (i = 0; i < files.length; ++i) {
          new DataRequest(files[i].start, files[i].end, files[i].crunched, files[i].audio).open('GET', files[i].filename);
        }

  
    function processPackageData(arrayBuffer) {
      Module.finishedDataFileDownloads++;
      assert(arrayBuffer, 'Loading data file failed.');
      assert(arrayBuffer instanceof ArrayBuffer, 'bad input to processPackageData');
      var byteArray = new Uint8Array(arrayBuffer);
      var curr;
      
        // copy the entire loaded file into a spot in the heap. Files will refer to slices in that. They cannot be freed though
        // (we may be allocating before malloc is ready, during startup).
        if (Module['SPLIT_MEMORY']) Module.printErr('warning: you should run the file packager with --no-heap-copy when SPLIT_MEMORY is used, otherwise copying into the heap may fail due to the splitting');
        var ptr = Module['getMemory'](byteArray.length);
        Module['HEAPU8'].set(byteArray, ptr);
        DataRequest.prototype.byteArray = Module['HEAPU8'].subarray(ptr, ptr+byteArray.length);
  
          var files = metadata.files;
          for (i = 0; i < files.length; ++i) {
            DataRequest.prototype.requests[files[i].filename].onload();
          }
              Module['removeRunDependency']('datafile_nes.data');

    };
    Module['addRunDependency']('datafile_nes.data');
  
    if (!Module.preloadResults) Module.preloadResults = {};
  
      Module.preloadResults[PACKAGE_NAME] = {fromCache: false};
      if (fetched) {
        processPackageData(fetched);
        fetched = null;
      } else {
        fetchedCallback = processPackageData;
      }
    
  }
  if (Module['calledRun']) {
    runWithFS();
  } else {
    if (!Module['preRun']) Module['preRun'] = [];
    Module["preRun"].push(runWithFS); // FS is not initialized yet, wait for it
  }

 }
 loadPackage({"files": [{"audio": 0, "start": 0, "crunched": 0, "end": 786448, "filename": "/rom.nes"}], "remote_package_size": 786448, "package_uuid": "9dde7bb4-6aa8-4fbd-b56e-f3112a90ea33"});

})();

// The Module object: Our interface to the outside world. We import
// and export values on it, and do the work to get that through
// closure compiler if necessary. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to do an eval in order to handle the closure compiler
// case, where this code here is minified but Module was defined
// elsewhere (e.g. case 4 above). We also need to check if Module
// already exists (e.g. case 3 above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module;
if (!Module) Module = (typeof Module !== 'undefined' ? Module : null) || {};

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
for (var key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_WEB = typeof window === 'object';
// Three configurations we can be running in:
// 1) We could be the application main() thread running in the main JS UI thread. (ENVIRONMENT_IS_WORKER == false and ENVIRONMENT_IS_PTHREAD == false)
// 2) We could be the application main() thread proxied to worker. (with Emscripten -s PROXY_TO_WORKER=1) (ENVIRONMENT_IS_WORKER == true, ENVIRONMENT_IS_PTHREAD == false)
// 3) We could be an application pthread running in a worker. (ENVIRONMENT_IS_WORKER == true and ENVIRONMENT_IS_PTHREAD == true)
var ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
var ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function' && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER;
var ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;

if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  if (!Module['print']) Module['print'] = function print(x) {
    process['stdout'].write(x + '\n');
  };
  if (!Module['printErr']) Module['printErr'] = function printErr(x) {
    process['stderr'].write(x + '\n');
  };

  var nodeFS = require('fs');
  var nodePath = require('path');

  Module['read'] = function read(filename, binary) {
    filename = nodePath['normalize'](filename);
    var ret = nodeFS['readFileSync'](filename);
    // The path is absolute if the normalized version is the same as the resolved.
    if (!ret && filename != nodePath['resolve'](filename)) {
      filename = path.join(__dirname, '..', 'src', filename);
      ret = nodeFS['readFileSync'](filename);
    }
    if (ret && !binary) ret = ret.toString();
    return ret;
  };

  Module['readBinary'] = function readBinary(filename) {
    var ret = Module['read'](filename, true);
    if (!ret.buffer) {
      ret = new Uint8Array(ret);
    }
    assert(ret.buffer);
    return ret;
  };

  Module['load'] = function load(f) {
    globalEval(read(f));
  };

  if (!Module['thisProgram']) {
    if (process['argv'].length > 1) {
      Module['thisProgram'] = process['argv'][1].replace(/\\/g, '/');
    } else {
      Module['thisProgram'] = 'unknown-program';
    }
  }

  Module['arguments'] = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });

  Module['inspect'] = function () { return '[Emscripten Module object]'; };
}
else if (ENVIRONMENT_IS_SHELL) {
  if (!Module['print']) Module['print'] = print;
  if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm

  if (typeof read != 'undefined') {
    Module['read'] = read;
  } else {
    Module['read'] = function read() { throw 'no read() available (jsc?)' };
  }

  Module['readBinary'] = function readBinary(f) {
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    var data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function read(url) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, false);
    xhr.send(null);
    return xhr.responseText;
  };

  if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof console !== 'undefined') {
    if (!Module['print']) Module['print'] = function print(x) {
      console.log(x);
    };
    if (!Module['printErr']) Module['printErr'] = function printErr(x) {
      console.log(x);
    };
  } else {
    // Probably a worker, and without console.log. We can do very little here...
    var TRY_USE_DUMP = false;
    if (!Module['print']) Module['print'] = (TRY_USE_DUMP && (typeof(dump) !== "undefined") ? (function(x) {
      dump(x);
    }) : (function(x) {
      // self.postMessage(x); // enable this if you want stdout to be sent as messages
    }));
  }

  if (ENVIRONMENT_IS_WORKER) {
    Module['load'] = importScripts;
  }

  if (typeof Module['setWindowTitle'] === 'undefined') {
    Module['setWindowTitle'] = function(title) { document.title = title };
  }
}
else {
  // Unreachable because SHELL is dependant on the others
  throw 'Unknown runtime environment. Where are we?';
}

function globalEval(x) {
  eval.call(null, x);
}
if (!Module['load'] && Module['read']) {
  Module['load'] = function load(f) {
    globalEval(Module['read'](f));
  };
}
if (!Module['print']) {
  Module['print'] = function(){};
}
if (!Module['printErr']) {
  Module['printErr'] = Module['print'];
}
if (!Module['arguments']) {
  Module['arguments'] = [];
}
if (!Module['thisProgram']) {
  Module['thisProgram'] = './this.program';
}

// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Callbacks
Module['preRun'] = [];
Module['postRun'] = [];

// Merge back in the overrides
for (var key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}



// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in: 
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at: 
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html

//========================================
// Runtime code shared with compiler
//========================================

var Runtime = {
  setTempRet0: function (value) {
    tempRet0 = value;
  },
  getTempRet0: function () {
    return tempRet0;
  },
  stackSave: function () {
    return STACKTOP;
  },
  stackRestore: function (stackTop) {
    STACKTOP = stackTop;
  },
  getNativeTypeSize: function (type) {
    switch (type) {
      case 'i1': case 'i8': return 1;
      case 'i16': return 2;
      case 'i32': return 4;
      case 'i64': return 8;
      case 'float': return 4;
      case 'double': return 8;
      default: {
        if (type[type.length-1] === '*') {
          return Runtime.QUANTUM_SIZE; // A pointer
        } else if (type[0] === 'i') {
          var bits = parseInt(type.substr(1));
          assert(bits % 8 === 0);
          return bits/8;
        } else {
          return 0;
        }
      }
    }
  },
  getNativeFieldSize: function (type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
  },
  STACK_ALIGN: 16,
  prepVararg: function (ptr, type) {
    if (type === 'double' || type === 'i64') {
      // move so the load is aligned
      if (ptr & 7) {
        assert((ptr & 7) === 4);
        ptr += 4;
      }
    } else {
      assert((ptr & 3) === 0);
    }
    return ptr;
  },
  getAlignSize: function (type, size, vararg) {
    // we align i64s and doubles on 64-bit boundaries, unlike x86
    if (!vararg && (type == 'i64' || type == 'double')) return 8;
    if (!type) return Math.min(size, 8); // align structures internally to 64 bits
    return Math.min(size || (type ? Runtime.getNativeFieldSize(type) : 0), Runtime.QUANTUM_SIZE);
  },
  dynCall: function (sig, ptr, args) {
    if (args && args.length) {
      assert(args.length == sig.length-1);
      if (!args.splice) args = Array.prototype.slice.call(args);
      args.splice(0, 0, ptr);
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      return Module['dynCall_' + sig].apply(null, args);
    } else {
      assert(sig.length == 1);
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      return Module['dynCall_' + sig].call(null, ptr);
    }
  },
  functionPointers: [],
  addFunction: function (func) {
    for (var i = 0; i < Runtime.functionPointers.length; i++) {
      if (!Runtime.functionPointers[i]) {
        Runtime.functionPointers[i] = func;
        return 2*(1 + i);
      }
    }
    throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
  },
  removeFunction: function (index) {
    Runtime.functionPointers[(index-2)/2] = null;
  },
  warnOnce: function (text) {
    if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
    if (!Runtime.warnOnce.shown[text]) {
      Runtime.warnOnce.shown[text] = 1;
      Module.printErr(text);
    }
  },
  funcWrappers: {},
  getFuncWrapper: function (func, sig) {
    assert(sig);
    if (!Runtime.funcWrappers[sig]) {
      Runtime.funcWrappers[sig] = {};
    }
    var sigCache = Runtime.funcWrappers[sig];
    if (!sigCache[func]) {
      sigCache[func] = function dynCall_wrapper() {
        return Runtime.dynCall(sig, func, arguments);
      };
    }
    return sigCache[func];
  },
  getCompilerSetting: function (name) {
    throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for Runtime.getCompilerSetting or emscripten_get_compiler_setting to work';
  },
  stackAlloc: function (size) { var ret = STACKTOP;STACKTOP = (STACKTOP + size)|0;STACKTOP = (((STACKTOP)+15)&-16);(assert((((STACKTOP|0) < (STACK_MAX|0))|0))|0); return ret; },
  staticAlloc: function (size) { var ret = STATICTOP;STATICTOP = (STATICTOP + (assert(!staticSealed),size))|0;STATICTOP = (((STATICTOP)+15)&-16); return ret; },
  dynamicAlloc: function (size) { var ret = DYNAMICTOP;DYNAMICTOP = (DYNAMICTOP + (assert(DYNAMICTOP > 0),size))|0;DYNAMICTOP = (((DYNAMICTOP)+15)&-16); if (DYNAMICTOP >= TOTAL_MEMORY) { var success = enlargeMemory(); if (!success) { DYNAMICTOP = ret;  return 0; } }; return ret; },
  alignMemory: function (size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 16))*(quantum ? quantum : 16); return ret; },
  makeBigInt: function (low,high,unsigned) { var ret = (unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0))); return ret; },
  GLOBAL_BASE: 8,
  QUANTUM_SIZE: 4,
  __dummy__: 0
}



Module["Runtime"] = Runtime;



//========================================
// Runtime essentials
//========================================

var __THREW__ = 0; // Used in checking for thrown exceptions.

var ABORT = false; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;

var undef = 0;
// tempInt is used for 32-bit signed values or smaller. tempBigInt is used
// for 32-bit unsigned values or more than 32 bits. TODO: audit all uses of tempInt
var tempValue, tempInt, tempBigInt, tempInt2, tempBigInt2, tempPair, tempBigIntI, tempBigIntR, tempBigIntS, tempBigIntP, tempBigIntD, tempDouble, tempFloat;
var tempI64, tempI64b;
var tempRet0, tempRet1, tempRet2, tempRet3, tempRet4, tempRet5, tempRet6, tempRet7, tempRet8, tempRet9;

function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  if (!func) {
    try {
      func = eval('_' + ident); // explicit lookup
    } catch(e) {}
  }
  assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
  return func;
}

var cwrap, ccall;
(function(){
  var JSfuncs = {
    // Helpers for cwrap -- it can't refer to Runtime directly because it might
    // be renamed by closure, instead it calls JSfuncs['stackSave'].body to find
    // out what the minified function name is.
    'stackSave': function() {
      Runtime.stackSave()
    },
    'stackRestore': function() {
      Runtime.stackRestore()
    },
    // type conversion from js to c
    'arrayToC' : function(arr) {
      var ret = Runtime.stackAlloc(arr.length);
      writeArrayToMemory(arr, ret);
      return ret;
    },
    'stringToC' : function(str) {
      var ret = 0;
      if (str !== null && str !== undefined && str !== 0) { // null string
        // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
        ret = Runtime.stackAlloc((str.length << 2) + 1);
        writeStringToMemory(str, ret);
      }
      return ret;
    }
  };
  // For fast lookup of conversion functions
  var toC = {'string' : JSfuncs['stringToC'], 'array' : JSfuncs['arrayToC']};

  // C calling interface. 
  ccall = function ccallFunc(ident, returnType, argTypes, args, opts) {
    var func = getCFunc(ident);
    var cArgs = [];
    var stack = 0;
    assert(returnType !== 'array', 'Return type should not be "array".');
    if (args) {
      for (var i = 0; i < args.length; i++) {
        var converter = toC[argTypes[i]];
        if (converter) {
          if (stack === 0) stack = Runtime.stackSave();
          cArgs[i] = converter(args[i]);
        } else {
          cArgs[i] = args[i];
        }
      }
    }
    var ret = func.apply(null, cArgs);
    if ((!opts || !opts.async) && typeof EmterpreterAsync === 'object') {
      assert(!EmterpreterAsync.state, 'cannot start async op with normal JS calling ccall');
    }
    if (opts && opts.async) assert(!returnType, 'async ccalls cannot return values');
    if (returnType === 'string') ret = Pointer_stringify(ret);
    if (stack !== 0) {
      if (opts && opts.async) {
        EmterpreterAsync.asyncFinalizers.push(function() {
          Runtime.stackRestore(stack);
        });
        return;
      }
      Runtime.stackRestore(stack);
    }
    return ret;
  }

  var sourceRegex = /^function\s*\(([^)]*)\)\s*{\s*([^*]*?)[\s;]*(?:return\s*(.*?)[;\s]*)?}$/;
  function parseJSFunc(jsfunc) {
    // Match the body and the return value of a javascript function source
    var parsed = jsfunc.toString().match(sourceRegex).slice(1);
    return {arguments : parsed[0], body : parsed[1], returnValue: parsed[2]}
  }
  var JSsource = {};
  for (var fun in JSfuncs) {
    if (JSfuncs.hasOwnProperty(fun)) {
      // Elements of toCsource are arrays of three items:
      // the code, and the return value
      JSsource[fun] = parseJSFunc(JSfuncs[fun]);
    }
  }

  
  cwrap = function cwrap(ident, returnType, argTypes) {
    argTypes = argTypes || [];
    var cfunc = getCFunc(ident);
    // When the function takes numbers and returns a number, we can just return
    // the original function
    var numericArgs = argTypes.every(function(type){ return type === 'number'});
    var numericRet = (returnType !== 'string');
    if ( numericRet && numericArgs) {
      return cfunc;
    }
    // Creation of the arguments list (["$1","$2",...,"$nargs"])
    var argNames = argTypes.map(function(x,i){return '$'+i});
    var funcstr = "(function(" + argNames.join(',') + ") {";
    var nargs = argTypes.length;
    if (!numericArgs) {
      // Generate the code needed to convert the arguments from javascript
      // values to pointers
      funcstr += 'var stack = ' + JSsource['stackSave'].body + ';';
      for (var i = 0; i < nargs; i++) {
        var arg = argNames[i], type = argTypes[i];
        if (type === 'number') continue;
        var convertCode = JSsource[type + 'ToC']; // [code, return]
        funcstr += 'var ' + convertCode.arguments + ' = ' + arg + ';';
        funcstr += convertCode.body + ';';
        funcstr += arg + '=' + convertCode.returnValue + ';';
      }
    }

    // When the code is compressed, the name of cfunc is not literally 'cfunc' anymore
    var cfuncname = parseJSFunc(function(){return cfunc}).returnValue;
    // Call the function
    funcstr += 'var ret = ' + cfuncname + '(' + argNames.join(',') + ');';
    if (!numericRet) { // Return type can only by 'string' or 'number'
      // Convert the result to a string
      var strgfy = parseJSFunc(function(){return Pointer_stringify}).returnValue;
      funcstr += 'ret = ' + strgfy + '(ret);';
    }
    funcstr += "if (typeof EmterpreterAsync === 'object') { assert(!EmterpreterAsync.state, 'cannot start async op with normal JS calling cwrap') }";
    if (!numericArgs) {
      // If we had a stack, restore it
      funcstr += JSsource['stackRestore'].body.replace('()', '(stack)') + ';';
    }
    funcstr += 'return ret})';
    return eval(funcstr);
  };
})();
Module["ccall"] = ccall;
Module["cwrap"] = cwrap;

function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}
Module["setValue"] = setValue;


function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for setValue: ' + type);
    }
  return null;
}
Module["getValue"] = getValue;

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate
Module["ALLOC_NORMAL"] = ALLOC_NORMAL;
Module["ALLOC_STACK"] = ALLOC_STACK;
Module["ALLOC_STATIC"] = ALLOC_STATIC;
Module["ALLOC_DYNAMIC"] = ALLOC_DYNAMIC;
Module["ALLOC_NONE"] = ALLOC_NONE;

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [_malloc, Runtime.stackAlloc, Runtime.staticAlloc, Runtime.dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var ptr = ret, stop;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(slab, ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    if (typeof curr === 'function') {
      curr = Runtime.getFunctionIndex(curr);
    }

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = Runtime.getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}
Module["allocate"] = allocate;

// Allocate memory during any stage of startup - static memory early on, dynamic memory later, malloc when ready
function getMemory(size) {
  if (!staticSealed) return Runtime.staticAlloc(size);
  if ((typeof _sbrk !== 'undefined' && !_sbrk.called) || !runtimeInitialized) return Runtime.dynamicAlloc(size);
  return _malloc(size);
}
Module["getMemory"] = getMemory;

function Pointer_stringify(ptr, /* optional */ length) {
  if (length === 0 || !ptr) return '';
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = 0;
  var t;
  var i = 0;
  while (1) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))>>0)];
    hasUtf |= t;
    if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (hasUtf < 128) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }
  return Module['UTF8ToString'](ptr);
}
Module["Pointer_stringify"] = Pointer_stringify;

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = HEAP8[((ptr++)>>0)];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}
Module["AsciiToString"] = AsciiToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}
Module["stringToAscii"] = stringToAscii;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

function UTF8ArrayToString(u8Array, idx) {
  var u0, u1, u2, u3, u4, u5;

  var str = '';
  while (1) {
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    u0 = u8Array[idx++];
    if (!u0) return str;
    if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
    u1 = u8Array[idx++] & 63;
    if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
    u2 = u8Array[idx++] & 63;
    if ((u0 & 0xF0) == 0xE0) {
      u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
    } else {
      u3 = u8Array[idx++] & 63;
      if ((u0 & 0xF8) == 0xF0) {
        u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;
      } else {
        u4 = u8Array[idx++] & 63;
        if ((u0 & 0xFC) == 0xF8) {
          u0 = ((u0 & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;
        } else {
          u5 = u8Array[idx++] & 63;
          u0 = ((u0 & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;
        }
      }
    }
    if (u0 < 0x10000) {
      str += String.fromCharCode(u0);
    } else {
      var ch = u0 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    }
  }
}
Module["UTF8ArrayToString"] = UTF8ArrayToString;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF8ToString(ptr) {
  return UTF8ArrayToString(HEAPU8,ptr);
}
Module["UTF8ToString"] = UTF8ToString;

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outU8Array: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null 
//                    terminator, i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      outU8Array[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      outU8Array[outIdx++] = 0xC0 | (u >> 6);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      outU8Array[outIdx++] = 0xE0 | (u >> 12);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x1FFFFF) {
      if (outIdx + 3 >= endIdx) break;
      outU8Array[outIdx++] = 0xF0 | (u >> 18);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x3FFFFFF) {
      if (outIdx + 4 >= endIdx) break;
      outU8Array[outIdx++] = 0xF8 | (u >> 24);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 5 >= endIdx) break;
      outU8Array[outIdx++] = 0xFC | (u >> 30);
      outU8Array[outIdx++] = 0x80 | ((u >> 24) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  outU8Array[outIdx] = 0;
  return outIdx - startIdx;
}
Module["stringToUTF8Array"] = stringToUTF8Array;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  return stringToUTF8Array(str, HEAPU8,outPtr, maxBytesToWrite);
}
Module["stringToUTF8"] = stringToUTF8;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      ++len;
    } else if (u <= 0x7FF) {
      len += 2;
    } else if (u <= 0xFFFF) {
      len += 3;
    } else if (u <= 0x1FFFFF) {
      len += 4;
    } else if (u <= 0x3FFFFFF) {
      len += 5;
    } else {
      len += 6;
    }
  }
  return len;
}
Module["lengthBytesUTF8"] = lengthBytesUTF8;

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF16ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
    if (codeUnit == 0)
      return str;
    ++i;
    // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
    str += String.fromCharCode(codeUnit);
  }
}
Module["UTF16ToString"] = UTF16ToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null 
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF16(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[((outPtr)>>1)]=codeUnit;
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[((outPtr)>>1)]=0;
  return outPtr - startPtr;
}
Module["stringToUTF16"] = stringToUTF16;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}
Module["lengthBytesUTF16"] = lengthBytesUTF16;

function UTF32ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}
Module["UTF32ToString"] = UTF32ToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null 
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF32(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[((outPtr)>>2)]=codeUnit;
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[((outPtr)>>2)]=0;
  return outPtr - startPtr;
}
Module["stringToUTF32"] = stringToUTF32;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}
Module["lengthBytesUTF32"] = lengthBytesUTF32;

function demangle(func) {
  var hasLibcxxabi = !!Module['___cxa_demangle'];
  if (hasLibcxxabi) {
    try {
      var buf = _malloc(func.length);
      writeStringToMemory(func.substr(1), buf);
      var status = _malloc(4);
      var ret = Module['___cxa_demangle'](buf, 0, 0, status);
      if (getValue(status, 'i32') === 0 && ret) {
        return Pointer_stringify(ret);
      }
      // otherwise, libcxxabi failed, we can try ours which may return a partial result
    } catch(e) {
      // failure when using libcxxabi, we can try ours which may return a partial result
    } finally {
      if (buf) _free(buf);
      if (status) _free(status);
      if (ret) _free(ret);
    }
  }
  var i = 3;
  // params, etc.
  var basicTypes = {
    'v': 'void',
    'b': 'bool',
    'c': 'char',
    's': 'short',
    'i': 'int',
    'l': 'long',
    'f': 'float',
    'd': 'double',
    'w': 'wchar_t',
    'a': 'signed char',
    'h': 'unsigned char',
    't': 'unsigned short',
    'j': 'unsigned int',
    'm': 'unsigned long',
    'x': 'long long',
    'y': 'unsigned long long',
    'z': '...'
  };
  var subs = [];
  var first = true;
  function dump(x) {
    //return;
    if (x) Module.print(x);
    Module.print(func);
    var pre = '';
    for (var a = 0; a < i; a++) pre += ' ';
    Module.print (pre + '^');
  }
  function parseNested() {
    i++;
    if (func[i] === 'K') i++; // ignore const
    var parts = [];
    while (func[i] !== 'E') {
      if (func[i] === 'S') { // substitution
        i++;
        var next = func.indexOf('_', i);
        var num = func.substring(i, next) || 0;
        parts.push(subs[num] || '?');
        i = next+1;
        continue;
      }
      if (func[i] === 'C') { // constructor
        parts.push(parts[parts.length-1]);
        i += 2;
        continue;
      }
      var size = parseInt(func.substr(i));
      var pre = size.toString().length;
      if (!size || !pre) { i--; break; } // counter i++ below us
      var curr = func.substr(i + pre, size);
      parts.push(curr);
      subs.push(curr);
      i += pre + size;
    }
    i++; // skip E
    return parts;
  }
  function parse(rawList, limit, allowVoid) { // main parser
    limit = limit || Infinity;
    var ret = '', list = [];
    function flushList() {
      return '(' + list.join(', ') + ')';
    }
    var name;
    if (func[i] === 'N') {
      // namespaced N-E
      name = parseNested().join('::');
      limit--;
      if (limit === 0) return rawList ? [name] : name;
    } else {
      // not namespaced
      if (func[i] === 'K' || (first && func[i] === 'L')) i++; // ignore const and first 'L'
      var size = parseInt(func.substr(i));
      if (size) {
        var pre = size.toString().length;
        name = func.substr(i + pre, size);
        i += pre + size;
      }
    }
    first = false;
    if (func[i] === 'I') {
      i++;
      var iList = parse(true);
      var iRet = parse(true, 1, true);
      ret += iRet[0] + ' ' + name + '<' + iList.join(', ') + '>';
    } else {
      ret = name;
    }
    paramLoop: while (i < func.length && limit-- > 0) {
      //dump('paramLoop');
      var c = func[i++];
      if (c in basicTypes) {
        list.push(basicTypes[c]);
      } else {
        switch (c) {
          case 'P': list.push(parse(true, 1, true)[0] + '*'); break; // pointer
          case 'R': list.push(parse(true, 1, true)[0] + '&'); break; // reference
          case 'L': { // literal
            i++; // skip basic type
            var end = func.indexOf('E', i);
            var size = end - i;
            list.push(func.substr(i, size));
            i += size + 2; // size + 'EE'
            break;
          }
          case 'A': { // array
            var size = parseInt(func.substr(i));
            i += size.toString().length;
            if (func[i] !== '_') throw '?';
            i++; // skip _
            list.push(parse(true, 1, true)[0] + ' [' + size + ']');
            break;
          }
          case 'E': break paramLoop;
          default: ret += '?' + c; break paramLoop;
        }
      }
    }
    if (!allowVoid && list.length === 1 && list[0] === 'void') list = []; // avoid (void)
    if (rawList) {
      if (ret) {
        list.push(ret + '?');
      }
      return list;
    } else {
      return ret + flushList();
    }
  }
  var parsed = func;
  try {
    // Special-case the entry point, since its name differs from other name mangling.
    if (func == 'Object._main' || func == '_main') {
      return 'main()';
    }
    if (typeof func === 'number') func = Pointer_stringify(func);
    if (func[0] !== '_') return func;
    if (func[1] !== '_') return func; // C function
    if (func[2] !== 'Z') return func;
    switch (func[3]) {
      case 'n': return 'operator new()';
      case 'd': return 'operator delete()';
    }
    parsed = parse();
  } catch(e) {
    parsed += '?';
  }
  if (parsed.indexOf('?') >= 0 && !hasLibcxxabi) {
    Runtime.warnOnce('warning: a problem occurred in builtin C++ name demangling; build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
  }
  return parsed;
}

function demangleAll(text) {
  return text.replace(/__Z[\w\d_]+/g, function(x) { var y = demangle(x); return x === y ? x : (x + ' [' + y + ']') });
}

function jsStackTrace() {
  var err = new Error();
  if (!err.stack) {
    // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
    // so try that as a special-case.
    try {
      throw new Error(0);
    } catch(e) {
      err = e;
    }
    if (!err.stack) {
      return '(no stack trace available)';
    }
  }
  return err.stack.toString();
}

function stackTrace() {
  return demangleAll(jsStackTrace());
}
Module["stackTrace"] = stackTrace;

// Memory management

var PAGE_SIZE = 4096;

function alignMemoryPage(x) {
  if (x % 4096 > 0) {
    x += (4096 - (x % 4096));
  }
  return x;
}

var HEAP;
var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;

var STATIC_BASE = 0, STATICTOP = 0, staticSealed = false; // static area
var STACK_BASE = 0, STACKTOP = 0, STACK_MAX = 0; // stack area
var DYNAMIC_BASE = 0, DYNAMICTOP = 0; // dynamic area handled by sbrk


function abortOnCannotGrowMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with  -s TOTAL_MEMORY=X  with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which adjusts the size at runtime but prevents some optimizations, (3) set Module.TOTAL_MEMORY to a higher value before the program runs, or if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 ');
}

function enlargeMemory() {
  abortOnCannotGrowMemory();
}


var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;

var totalMemory = 64*1024;
while (totalMemory < TOTAL_MEMORY || totalMemory < 2*TOTAL_STACK) {
  if (totalMemory < 16*1024*1024) {
    totalMemory *= 2;
  } else {
    totalMemory += 16*1024*1024
  }
}
if (totalMemory !== TOTAL_MEMORY) {
  Module.printErr('increasing TOTAL_MEMORY to ' + totalMemory + ' to be compliant with the asm.js spec (and given that TOTAL_STACK=' + TOTAL_STACK + ')');
  TOTAL_MEMORY = totalMemory;
}

// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && !!(new Int32Array(1)['subarray']) && !!(new Int32Array(1)['set']),
       'JS engine does not provide full typed array support');

var buffer;



buffer = new ArrayBuffer(TOTAL_MEMORY);
HEAP8 = new Int8Array(buffer);
HEAP16 = new Int16Array(buffer);
HEAP32 = new Int32Array(buffer);
HEAPU8 = new Uint8Array(buffer);
HEAPU16 = new Uint16Array(buffer);
HEAPU32 = new Uint32Array(buffer);
HEAPF32 = new Float32Array(buffer);
HEAPF64 = new Float64Array(buffer);


// Endianness check (note: assumes compiler arch was little-endian)
HEAP32[0] = 255;
assert(HEAPU8[0] === 255 && HEAPU8[3] === 0, 'Typed arrays 2 must be run on a little-endian system');

Module['HEAP'] = HEAP;
Module['buffer'] = buffer;
Module['HEAP8'] = HEAP8;
Module['HEAP16'] = HEAP16;
Module['HEAP32'] = HEAP32;
Module['HEAPU8'] = HEAPU8;
Module['HEAPU16'] = HEAPU16;
Module['HEAPU32'] = HEAPU32;
Module['HEAPF32'] = HEAPF32;
Module['HEAPF64'] = HEAPF64;

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Runtime.dynCall('v', func);
      } else {
        Runtime.dynCall('vi', func, [callback.arg]);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited

var runtimeInitialized = false;
var runtimeExited = false;


function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  callRuntimeCallbacks(__ATEXIT__);
  runtimeExited = true;
}

function postRun() {
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}
Module["addOnPreRun"] = addOnPreRun;

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}
Module["addOnInit"] = addOnInit;

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}
Module["addOnPreMain"] = addOnPreMain;

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}
Module["addOnExit"] = addOnExit;

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}
Module["addOnPostRun"] = addOnPostRun;

// Tools


function intArrayFromString(stringy, dontAddNull, length /* optional */) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}
Module["intArrayFromString"] = intArrayFromString;

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}
Module["intArrayToString"] = intArrayToString;

function writeStringToMemory(string, buffer, dontAddNull) {
  var array = intArrayFromString(string, dontAddNull);
  var i = 0;
  while (i < array.length) {
    var chr = array[i];
    HEAP8[(((buffer)+(i))>>0)]=chr;
    i = i + 1;
  }
}
Module["writeStringToMemory"] = writeStringToMemory;

function writeArrayToMemory(array, buffer) {
  for (var i = 0; i < array.length; i++) {
    HEAP8[((buffer++)>>0)]=array[i];
  }
}
Module["writeArrayToMemory"] = writeArrayToMemory;

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
    HEAP8[((buffer++)>>0)]=str.charCodeAt(i);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) HEAP8[((buffer)>>0)]=0;
}
Module["writeAsciiToMemory"] = writeAsciiToMemory;

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}


// check for imul support, and also for correctness ( https://bugs.webkit.org/show_bug.cgi?id=126345 )
if (!Math['imul'] || Math['imul'](0xffffffff, 5) !== -5) Math['imul'] = function imul(a, b) {
  var ah  = a >>> 16;
  var al = a & 0xffff;
  var bh  = b >>> 16;
  var bl = b & 0xffff;
  return (al*bl + ((ah*bl + al*bh) << 16))|0;
};
Math.imul = Math['imul'];


if (!Math['clz32']) Math['clz32'] = function(x) {
  x = x >>> 0;
  for (var i = 0; i < 32; i++) {
    if (x & (1 << (31 - i))) return i;
  }
  return 32;
};
Math.clz32 = Math['clz32']

var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_min = Math.min;
var Math_clz32 = Math.clz32;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function getUniqueRunDependency(id) {
  var orig = id;
  while (1) {
    if (!runDependencyTracking[id]) return id;
    id = orig + Math.random();
  }
  return id;
}

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        if (ABORT) {
          clearInterval(runDependencyWatcher);
          runDependencyWatcher = null;
          return;
        }
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            Module.printErr('still waiting on run dependencies:');
          }
          Module.printErr('dependency: ' + dep);
        }
        if (shown) {
          Module.printErr('(end of list)');
        }
      }, 10000);
    }
  } else {
    Module.printErr('warning: run dependency added without ID');
  }
}
Module["addRunDependency"] = addRunDependency;

function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    Module.printErr('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}
Module["removeRunDependency"] = removeRunDependency;

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data



var memoryInitializer = null;



// === Body ===

var ASM_CONSTS = [];




STATIC_BASE = 8;

STATICTOP = STATIC_BASE + 465392;
  /* global initializers */  __ATINIT__.push({ func: function() { __GLOBAL__sub_I_apu_cpp() } });
  

/* memory initializer */ allocate([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,139,6,0,125,11,7,0,88,2,0,0,0,0,0,0,20,139,6,0,138,11,7,0,20,139,6,0,151,11,7,0,60,139,6,0,164,11,7,0,96,2,0,0,0,0,0,0,60,139,6,0,197,11,7,0,104,2,0,0,0,0,0,0,60,139,6,0,11,12,7,0,104,2,0,0,0,0,0,0,60,139,6,0,231,11,7,0,136,2,0,0,0,0,0,0,60,139,6,0,45,12,7,0,120,2,0,0,0,0,0,0,4,0,0,0,8,0,0,0,16,0,0,0,32,0,0,0,64,0,0,0,96,0,0,0,128,0,0,0,160,0,0,0,202,0,0,0,254,0,0,0,124,1,0,0,252,1,0,0,250,2,0,0,248,3,0,0,242,7,0,0,228,15], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE);
/* memory initializer */ allocate([255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,35,29,0,0,32,29,0,0,34,29,0,0,33,29,0,0,1,0,0,0,1,0,0,0,1,0,0,0,32,29,0,0,1,0,0,0,34,29,0,0,32,29,0,0,34,29,0,0,62,58,0,0,172,1,0,0,124,1,0,0,84,1,0,0,64,1,0,0,30,1,0,0,254,0,0,0,226,0,0,0,214,0,0,0,190,0,0,0,160,0,0,0,142,0,0,0,128,0,0,0,106,0,0,0,84,0,0,0,72,0,0,0,54,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,35,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,35,0,0,0,3,0,0,0,0,0,0,0,37,0,0,0,35,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,35,0,0,0,3,0,0,0,0,0,0,0,10,0,0,0,35,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,35,0,0,0,3,0,0,0,0,0,0,0,14,0,0,0,35,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,35,0,0,0,3,0,0,0,0,0,0,0,29,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,2,0,0,0,40,0,0,0,0,0,0,0,39,0,0,0,2,0,0,0,40,0,0,0,0,0,0,0,7,0,0,0,2,0,0,0,40,0,0,0,0,0,0,0,8,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,40,0,0,0,0,0,0,0,45,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,40,0,0,0,0,0,0,0,42,0,0,0,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,0,0,0,33,0,0,0,0,0,0,0,36,0,0,0,24,0,0,0,33,0,0,0,0,0,0,0,28,0,0,0,24,0,0,0,33,0,0,0,0,0,0,0,12,0,0,0,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,0,0,0,33,0,0,0,0,0,0,0,16,0,0,0,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,0,0,0,33,0,0,0,0,0,0,0,43,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,41,0,0,0,0,0,0,0,38,0,0,0,1,0,0,0,41,0,0,0,0,0,0,0,28,0,0,0,1,0,0,0,41,0,0,0,0,0,0,0,13,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,41,0,0,0,0,0,0,0,47,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,41,0,0,0,0,0,0,0,0,0,0,0,48,0,0,0,0,0,0,0,0,0,0,0,50,0,0,0,48,0,0,0,49,0,0,0,0,0,0,0,23,0,0,0,0,0,0,0,54,0,0,0,0,0,0,0,50,0,0,0,48,0,0,0,49,0,0,0,0,0,0,0,4,0,0,0,48,0,0,0,0,0,0,0,0,0,0,0,50,0,0,0,48,0,0,0,49,0,0,0,0,0,0,0,56,0,0,0,48,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,48,0,0,0,0,0,0,0,0,0,0,0,32,0,0,0,30,0,0,0,31,0,0,0,0,0,0,0,32,0,0,0,30,0,0,0,31,0,0,0,0,0,0,0,52,0,0,0,30,0,0,0,51,0,0,0,0,0,0,0,32,0,0,0,30,0,0,0,31,0,0,0,0,0,0,0,5,0,0,0,30,0,0,0,0,0,0,0,0,0,0,0,32,0,0,0,30,0,0,0,31,0,0,0,0,0,0,0,17,0,0,0,30,0,0,0,53,0,0,0,0,0,0,0,32,0,0,0,30,0,0,0,31,0,0,0,0,0,0,0,20,0,0,0,18,0,0,0,0,0,0,0,0,0,0,0,20,0,0,0,18,0,0,0,21,0,0,0,0,0,0,0,27,0,0,0,18,0,0,0,22,0,0,0,0,0,0,0,20,0,0,0,18,0,0,0,21,0,0,0,0,0,0,0,9,0,0,0,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,0,0,0,21,0,0,0,0,0,0,0,15,0,0,0,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,0,0,0,21,0,0,0,0,0,0,0,19,0,0,0,44,0,0,0,0,0,0,0,0,0,0,0,19,0,0,0,44,0,0,0,25,0,0,0,0,0,0,0,26,0,0,0,44,0,0,0,34,0,0,0,0,0,0,0,19,0,0,0,44,0,0,0,25,0,0,0,0,0,0,0,6,0,0,0,44,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,44,0,0,0,25,0,0,0,0,0,0,0,46,0,0,0,44,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,44,0,0,0,25,0,0,0,0,0,0,0,1,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,4,0,0,0,0,0,0,0,1,0,0,0,3,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,7,0,0,0,0,0,0,0,13,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,5,0,0,0,0,0,0,0,1,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,8,0,0,0,0,0,0,0,7,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,0,0,0,0,1,0,0,0,3,0,0,0,2,0,0,0,0,0,0,0,7,0,0,0,7,0,0,0,7,0,0,0,0,0,0,0,13,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,5,0,0,0,0,0,0,0,1,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,8,0,0,0,0,0,0,0,1,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,4,0,0,0,0,0,0,0,1,0,0,0,3,0,0,0,2,0,0,0,0,0,0,0,7,0,0,0,7,0,0,0,7,0,0,0,0,0,0,0,13,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,5,0,0,0,0,0,0,0,1,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,8,0,0,0,0,0,0,0,1,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,4,0,0,0,0,0,0,0,1,0,0,0,3,0,0,0,2,0,0,0,0,0,0,0,10,0,0,0,7,0,0,0,7,0,0,0,0,0,0,0,13,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,5,0,0,0,0,0,0,0,1,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,7,0,0,0,7,0,0,0,7,0,0,0,0,0,0,0,13,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,5,0,0,0,6,0,0,0,0,0,0,0,1,0,0,0,9,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,11,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,0,0,0,0,1,0,0,0,3,0,0,0,1,0,0,0,0,0,0,0,7,0,0,0,7,0,0,0,7,0,0,0,0,0,0,0,13,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,5,0,0,0,6,0,0,0,0,0,0,0,1,0,0,0,9,0,0,0,1,0,0,0,0,0,0,0,8,0,0,0,8,0,0,0,9,0,0,0,0,0,0,0,3,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,0,0,0,0,1,0,0,0,3,0,0,0,1,0,0,0,0,0,0,0,7,0,0,0,7,0,0,0,7,0,0,0,0,0,0,0,13,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,5,0,0,0,0,0,0,0,1,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,8,0,0,0,0,0,0,0,3,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,0,0,0,0,1,0,0,0,3,0,0,0,1,0,0,0,0,0,0,0,7,0,0,0,7,0,0,0,7,0,0,0,0,0,0,0,13,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,5,0,0,0,0,0,0,0,1,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,5,0,0,0,6,0,0,0,7,0,0,0,8,0,0,0,9,0,0,0,10,0,0,0,11,0,0,0,12,0,0,0,13,0,0,0,14,0,0,0,15,0,0,0,16,0,0,0,17,0,0,0,18,0,0,0,19,0,0,0,20,0,0,0,21,0,0,0,22,0,0,0,23,0,0,0,24,0,0,0,25,0,0,0,26,0,0,0,27,0,0,0,28,0,0,0,29,0,0,0,30,0,0,0,31,0,0,0,32,0,0,0,33,0,0,0,34,0,0,0,35,0,0,0,36,0,0,0,37,0,0,0,38,0,0,0,39,0,0,0,40,0,0,0,41,0,0,0,42,0,0,0,43,0,0,0,44,0,0,0,45,0,0,0,46,0,0,0,47,0,0,0,48,0,0,0,49,0,0,0,50,0,0,0,51,0,0,0,52,0,0,0,53,0,0,0,54,0,0,0,55,0,0,0,56,0,0,0,57,0,0,0,58,0,0,0,59,0,0,0,60,0,0,0,61,0,0,0,62,0,0,0,63,0,0,0,64,0,0,0,65,0,0,0,66,0,0,0,67,0,0,0,68,0,0,0,69,0,0,0,70,0,0,0,71,0,0,0,72,0,0,0,73,0,0,0,74,0,0,0,75,0,0,0,76,0,0,0,77,0,0,0,78,0,0,0,79,0,0,0,80,0,0,0,81,0,0,0,82,0,0,0,83,0,0,0,84,0,0,0,85,0,0,0,86,0,0,0,87,0,0,0,88,0,0,0,89,0,0,0,90,0,0,0,91,0,0,0,92,0,0,0,93,0,0,0,94,0,0,0,95,0,0,0,96,0,0,0,97,0,0,0,98,0,0,0,99,0,0,0,100,0,0,0,101,0,0,0,102,0,0,0,103,0,0,0,104,0,0,0,105,0,0,0,106,0,0,0,107,0,0,0,108,0,0,0,109,0,0,0,110,0,0,0,111,0,0,0,112,0,0,0,113,0,0,0,114,0,0,0,115,0,0,0,116,0,0,0,117,0,0,0,118,0,0,0,119,0,0,0,120,0,0,0,121,0,0,0,122,0,0,0,123,0,0,0,124,0,0,0,125,0,0,0,126,0,0,0,127,0,0,0,128,0,0,0,129,0,0,0,130,0,0,0,131,0,0,0,132,0,0,0,133,0,0,0,134,0,0,0,135,0,0,0,136,0,0,0,137,0,0,0,138,0,0,0,139,0,0,0,140,0,0,0,141,0,0,0,142,0,0,0,143,0,0,0,144,0,0,0,145,0,0,0,146,0,0,0,147,0,0,0,148,0,0,0,149,0,0,0,150,0,0,0,151,0,0,0,152,0,0,0,153,0,0,0,154,0,0,0,155,0,0,0,156,0,0,0,157,0,0,0,158,0,0,0,159,0,0,0,160,0,0,0,161,0,0,0,162,0,0,0,163,0,0,0,164,0,0,0,165,0,0,0,166,0,0,0,167,0,0,0,168,0,0,0,169,0,0,0,170,0,0,0,171,0,0,0,172,0,0,0,173,0,0,0,174,0,0,0,175,0,0,0,176,0,0,0,177,0,0,0,178,0,0,0,179,0,0,0,180,0,0,0,181,0,0,0,182,0,0,0,183,0,0,0,184,0,0,0,185,0,0,0,186,0,0,0,187,0,0,0,188,0,0,0,189,0,0,0,190,0,0,0,191,0,0,0,192,0,0,0,193,0,0,0,194,0,0,0,195,0,0,0,196,0,0,0,197,0,0,0,198,0,0,0,199,0,0,0,200,0,0,0,201,0,0,0,202,0,0,0,203,0,0,0,204,0,0,0,205,0,0,0,206,0,0,0,207,0,0,0,208,0,0,0,209,0,0,0,210,0,0,0,211,0,0,0,212,0,0,0,213,0,0,0,214,0,0,0,215,0,0,0,216,0,0,0,217,0,0,0,218,0,0,0,219,0,0,0,220,0,0,0,221,0,0,0,222,0,0,0,223,0,0,0,224,0,0,0,225,0,0,0,226,0,0,0,227,0,0,0,228,0,0,0,229,0,0,0,230,0,0,0,231,0,0,0,232,0,0,0,233,0,0,0,234,0,0,0,235,0,0,0,236,0,0,0,237,0,0,0,238,0,0,0,239,0,0,0,240,0,0,0,241,0,0,0,242,0,0,0,243,0,0,0,244,0,0,0,245,0,0,0,246,0,0,0,247,0,0,0,248,0,0,0,249,0,0,0,250,0,0,0,251,0,0,0,252,0,0,0,253,0,0,0,254,0,0,0,255,0,0,0,0,1,0,0,1,1,0,0,2,1,0,0,3,1,0,0,4,1,0,0,5,1,0,0,6,1,0,0,7,1,0,0,8,1,0,0,9,1,0,0,10,1,0,0,11,1,0,0,12,1,0,0,13,1,0,0,14,1,0,0,15,1,0,0,16,1,0,0,17,1,0,0,18,1,0,0,19,1,0,0,20,1,0,0,21,1,0,0,22,1,0,0,23,1,0,0,24,1,0,0,25,1,0,0,26,1,0,0,27,1,0,0,28,1,0,0,29,1,0,0,30,1,0,0,31,1,0,0,32,1,0,0,33,1,0,0,34,1,0,0,35,1,0,0,36,1,0,0,37,1,0,0,38,1,0,0,39,1,0,0,40,1,0,0,41,1,0,0,42,1,0,0,43,1,0,0,44,1,0,0,45,1,0,0,46,1,0,0,47,1,0,0,48,1,0,0,49,1,0,0,50,1,0,0,51,1,0,0,52,1,0,0,53,1,0,0,54,1,0,0,55,1,0,0,56,1,0,0,57,1,0,0,58,1,0,0,59,1,0,0,60,1,0,0,61,1,0,0,62,1,0,0,63,1,0,0,64,1,0,0,65,1,0,0,66,1,0,0,67,1,0,0,68,1,0,0,69,1,0,0,70,1,0,0,71,1,0,0,72,1,0,0,73,1,0,0,74,1,0,0,75,1,0,0,76,1,0,0,77,1,0,0,78,1,0,0,79,1,0,0,80,1,0,0,81,1,0,0,1], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+177156);
/* memory initializer */ allocate([1,0,0,240,0,0,0,0,1,0,0,240,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,96,96,96,0,150,46,0,0,208,21,13,0,213,4,52,0,163,0,95,0,82,0,123,0,7,5,125,0,0,23,100,0,0,48,59,0,0,72,18,0,0,86,0,0,0,86,0,0,67,70,0,0,0,0,0,0,8,8,8,0,8,8,8,0,178,178,178,0,255,100,5,0,255,60,46,0,255,30,110,0,255,16,176,0,156,16,219,0,36,32,222,0,0,63,185,0,0,103,121,0,0,141,54,0,0,163,9,0,20,162,0,0,133,139,0,0,8,8,8,0,8,8,8,0,8,8,8,0,255,255,255,0,255,192,67,0,255,144,125,0,255,105,203,0,255,85,255,0,255,86,255,0,113,108,255,0,16,147,255,0,0,195,215,0,0,238,136,0,6,255,74,0,91,255,41,0,230,236,39,0,72,72,72,0,8,8,8,0,8,8,8,0,255,255,255,0,255,243,185,0,255,222,213,0,255,204,248,0,255,194,255,0,255,194,255,0,208,205,255,0,155,223,255,0,125,245,253,0,123,255,218,0,148,255,189,0,197,255,171,0,255,255,170,0,188,188,188,0,8,8,8,0,8,8,8,0,58,57,107,0,100,19,0,0,149,4,18,0,156,0,56,0,119,0,96,0,56,0,124,0,1,0,128,0,0,10,104,0,0,26,64,0,0,42,24,0,0,51,0,0,0,48,0,0,32,34,0,0,0,0,0,0,0,0,11,0,0,0,11,0,118,116,195,0,182,54,13,0,255,28,55,0,255,9,116,0,212,2,179,0,115,4,221,0,22,18,228,0,0,39,191,0,0,67,130,0,0,93,66,0,0,107,20,0,0,102,0,0,77,80,0,0,0,0,11,0,0,0,11,0,0,0,11,0,193,190,255,0,255,119,85,0,255,85,142,0,255,59,215,0,255,47,255,0,190,51,255,0,78,72,255,0,2,99,255,0,0,134,231,0,0,164,156,0,0,180,95,0,44,175,61,0,146,149,55,0,41,40,81,0,0,0,11,0,0,0,11,0,193,190,255,0,222,160,207,0,254,145,234,0,255,132,255,0,235,126,255,0,192,128,255,0,143,138,255,0,99,151,255,0,74,166,255,0,71,179,241,0,89,186,212,0,126,184,195,0,173,173,191,0,125,122,205,0,0,0,11,0,0,0,11,0,29,92,49,0,83,42,0,0,124,19,0,0,125,3,19,0,84,0,47,0,28,0,71,0,0,5,76,0,0,22,59,0,0,46,30,0,0,70,3,0,0,85,0,0,0,82,0,0,24,66,0,0,0,0,0,0,0,7,0,0,0,7,0,0,70,172,102,0,154,94,0,0,217,56,11,0,218,27,54,0,156,12,100,0,68,15,138,0,0,32,145,0,0,62,119,0,0,101,72,0,0,137,25,0,0,161,0,0,0,156,0,0,61,131,0,0,0,7,0,0,0,7,0,0,0,7,0,0,123,255,170,0,217,183,21,0,255,137,59,0,255,100,114,0,219,79,168,0,120,83,210,0,25,106,218,0,0,144,189,0,0,190,136,0,0,233,79,0,0,255,35,0,20,254,9,0,113,226,6,0,18,69,33,0,0,7,0,0,0,7,0,0,123,255,170,0,160,235,102,0,186,214,122,0,186,197,147,0,161,186,169,0,122,189,187,0,78,200,190,0,44,217,178,0,26,238,156,0,26,255,131,0,44,255,109,0,76,255,94,0,119,253,92,0,75,182,108,0,0,7,0,0,0,7,0,0,29,58,60,0,76,19,0,0,113,5,1,0,116,0,24,0,84,0,51,0,28,0,75,0,0,0,80,0,0,10,63,0,0,26,35,0,0,42,9,0,0,52,0,0,0,49,0,0,24,35,0,0,0,0,0,0,0,0,0,0,0,0,0,0,70,118,121,0,144,56,0,0,200,30,21,0,205,11,63,0,156,3,107,0,68,5,145,0,0,19,152,0,0,40,126,0,0,67,82,0,0,93,37,0,0,108,6,0,0,103,0,0,62,81,0,0,0,0,0,0,0,0,0,0,0,0,0,0,124,194,199,0,206,121,40,0,255,89,79,0,255,63,131,0,220,50,182,0,120,54,225,0,25,75,232,0,0,102,203,0,0,135,153,0,0,164,99,0,0,182,55,0,20,177,26,0,114,151,21,0,18,41,43,0,0,0,0,0,0,0,0,0,124,194,199,0,156,163,127,0,180,148,146,0,182,136,170,0,162,129,192,0,122,131,209,0,79,142,212,0,48,154,201,0,31,169,180,0,30,181,155,0,44,189,135,0,76,187,119,0,119,176,116,0,75,125,129,0,0,0,0,0,0,0,0,0,135,65,61,0,168,32,0,0,222,14,6,0,223,0,34,0,176,0,66,0,99,0,86,0,25,0,85,0,0,7,62,0,0,22,28,0,0,43,2,0,0,57,0,0,17,59,0,0,88,49,0,0,0,0,0,0,19,0,0,0,19,0,0,0,240,129,122,0,255,76,0,0,255,47,32,0,255,20,80,0,255,6,130,0,186,5,161,0,69,13,159,0,0,33,125,0,0,61,70,0,0,94,24,0,0,116,0,0,55,119,0,0,169,104,0,0,19,0,0,0,19,0,0,0,19,0,0,0,255,210,200,0,255,149,42,0,255,114,92,0,255,78,152,0,255,58,209,0,255,55,243,0,171,69,241,0,67,96,202,0,16,130,140,0,16,170,82,0,58,195,38,0,154,199,17,0,255,181,18,0,105,47,44,0,19,0,0,0,19,0,0,0,255,210,200,0,255,184,129,0,255,169,153,0,255,152,180,0,255,142,203,0,255,141,217,0,255,148,217,0,232,161,201,0,201,176,175,0,201,193,148,0,228,204,126,0,255,205,114,0,255,198,115,0,252,137,130,0,19,0,0,0,19,0,0,0,78,46,67,0,107,16,0,0,157,2,9,0,160,0,37,0,126,0,66,0,68,0,85,0,13,0,87,0,0,3,64,0,0,17,30,0,0,32,5,0,0,41,0,0,0,41,0,0,38,31,0,0,0,0,0,0,3,0,1,0,3,0,1,0,150,98,132,0,194,49,2,0,255,23,39,0,255,6,84,0,222,0,130,0,134,0,160,0,45,7,162,0,0,25,128,0,0,52,73,0,0,76,29,0,0,90,1,0,11,90,0,0,87,74,0,0,3,0,1,0,3,0,1,0,3,0,1,0,240,164,214,0,255,107,52,0,255,75,104,0,255,50,159,0,255,38,212,0,222,38,246,0,117,52,248,0,26,78,209,0,0,110,146,0,0,139,92,0,9,156,50,0,71,155,27,0,168,137,26,0,58,31,48,0,3,0,1,0,3,0,1,0,240,164,214,0,255,140,141,0,255,126,166,0,255,114,191,0,255,107,213,0,232,108,227,0,187,115,228,0,140,127,212,0,113,141,185,0,111,154,161,0,130,161,140,0,165,161,128,0,209,153,127,0,158,104,139,0,3,0,1,0,3,0,1,0,62,63,40,0,99,29,0,0,138,12,0,0,138,0,17,0,97,0,45,0,43,0,63,0,0,0,64,0,0,7,48,0,0,22,22,0,0,42,0,0,0,56,0,0,0,56,0,0,42,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,124,125,88,0,180,71,0,0,239,44,9,0,241,17,50,0,177,4,96,0,94,4,124,0,16,14,126,0,0,33,101,0,0,60,60,0,0,93,16,0,0,115,0,0,15,114,0,0,93,98,0,0,0,0,0,0,0,0,0,0,0,0,0,0,202,204,150,0,255,142,18,0,255,108,52,0,255,73,105,0,255,53,158,0,168,54,190,0,72,69,192,0,7,95,164,0,0,128,117,0,0,167,62,0,9,192,21,0,70,191,4,0,166,172,3,0,44,45,27,0,0,0,0,0,0,0,0,0,202,204,150,0,228,177,89,0,253,163,107,0,253,146,131,0,226,137,153,0,188,137,166,0,145,144,167,0,109,157,156,0,88,171,136,0,88,188,112,0,110,199,91,0,144,198,80,0,187,191,79,0,131,132,94,0,0,0,0,0,0,0,0,0,48,48,48,0,83,17,0,0,121,3,0,0,124,0,21,0,92,0,47,0,39,0,65,0,0,0,67,0,0,4,51,0,0,18,25,0,0,33,1,0,0,42,0,0,0,42,0,0,30,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,101,101,101,0,156,51,0,0,213,26,17,0,218,8,57,0,169,1,100,0,87,1,128,0,11,9,130,0,0,27,106,0,0,53,64,0,0,77,22,0,0,92,0,0,3,91,0,0,72,76,0,0,0,0,0,0,0,0,0,0,0,0,0,0,169,169,169,0,230,110,30,0,255,79,67,0,255,54,118,0,244,41,168,0,153,42,200,0,59,56,202,0,1,81,174,0,0,112,126,0,0,141,74,0,0,158,34,0,45,157,14,0,135,140,13,0,33,33,33,0,0,0,0,0,0,0,0,0,169,169,169,0,194,144,106,0,218,130,125,0,220,118,148,0,200,112,169,0,162,112,182,0,121,119,183,0,86,131,171,0,67,145,151,0,65,158,128,0,82,165,108,0,114,164,97,0,155,157,96,0,108,108,108,0,0,0,0,0,0,0,0,0,0,0,0,0,72,2,0,0,82,1,0,0,83,1,0,0,84,1,0,0,0,0,0,0,0,0,0,0,120,2,0,0,85,1,0,0,86,1,0,0,87,1,0,0,88,1,0,0,89,1,0,0,90,1,0,0,91,1,0,0,92,1,0,0,0,0,0,0,168,2,0,0,85,1,0,0,93,1,0,0,87,1,0,0,88,1,0,0,89,1,0,0,94,1,0,0,95,1,0,0,96,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,148,139,6,0,148,139,6,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,97,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,98,1,0,0,99,1,0,0,209,19,7,0,0,4,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,255,255,255,255], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+426621);
/* memory initializer */ allocate([255,255,0,0,0,0,1,0,2,0,3,0,4,0,5,0,6,0,7,0,8,0,9,0,10,0,11,0,12,0,13,0,14,0,15,0,16,0,17,0,18,0,19,0,20,0,21,0,22,0,23,0,24,0,25,0,26,0,27,0,28,0,29,0,30,0,31,0,32,0,33,0,34,0,35,0,36,0,37,0,38,0,39,0,40,0,41,0,42,0,43,0,44,0,45,0,46,0,47,0,48,0,49,0,50,0,51,0,52,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,60,0,61,0,62,0,63,0,64,0,65,0,66,0,67,0,68,0,69,0,70,0,71,0,72,0,73,0,74,0,75,0,76,0,77,0,78,0,79,0,80,0,81,0,82,0,83,0,84,0,85,0,86,0,87,0,88,0,89,0,90,0,91,0,92,0,93,0,94,0,95,0,96,0,97,0,98,0,99,0,100,0,101,0,102,0,103,0,104,0,105,0,106,0,107,0,108,0,109,0,110,0,111,0,112,0,113,0,114,0,115,0,116,0,117,0,118,0,119,0,120,0,121,0,122,0,123,0,124,0,125,0,126,0,127,0,128,0,129,0,130,0,131,0,132,0,133,0,134,0,135,0,136,0,137,0,138,0,139,0,140,0,141,0,142,0,143,0,144,0,145,0,146,0,147,0,148,0,149,0,150,0,151,0,152,0,153,0,154,0,155,0,156,0,157,0,158,0,159,0,160,0,161,0,162,0,163,0,164,0,165,0,166,0,167,0,168,0,169,0,170,0,171,0,172,0,173,0,174,0,175,0,176,0,177,0,178,0,179,0,180,0,181,0,182,0,183,0,184,0,185,0,186,0,187,0,188,0,189,0,190,0,191,0,192,0,193,0,194,0,195,0,196,0,197,0,198,0,199,0,200,0,201,0,202,0,203,0,204,0,205,0,206,0,207,0,208,0,209,0,210,0,211,0,212,0,213,0,214,0,215,0,216,0,217,0,218,0,219,0,220,0,221,0,222,0,223,0,224,0,225,0,226,0,227,0,228,0,229,0,230,0,231,0,232,0,233,0,234,0,235,0,236,0,237,0,238,0,239,0,240,0,241,0,242,0,243,0,244,0,245,0,246,0,247,0,248,0,249,0,250,0,251,0,252,0,253,0,254,0,255,0,0,1,1,1,2,1,3,1,4,1,5,1,6,1,7,1,8,1,9,1,10,1,11,1,12,1,13,1,14,1,15,1,16,1,17,1,18,1,19,1,20,1,21,1,22,1,23,1,24,1,25,1,26,1,27,1,28,1,29,1,30,1,31,1,32,1,33,1,34,1,35,1,36,1,37,1,38,1,39,1,40,1,41,1,42,1,43,1,44,1,45,1,46,1,47,1,48,1,49,1,50,1,51,1,52,1,53,1,54,1,55,1,56,1,57,1,58,1,59,1,60,1,61,1,62,1,63,1,64,1,65,1,66,1,67,1,68,1,69,1,70,1,71,1,72,1,73,1,74,1,75,1,76,1,77,1,78,1,79,1,80,1,81,1,82,1,83,1,84,1,85,1,86,1,87,1,88,1,89,1,90,1,91,1,92,1,93,1,94,1,95,1,96,1,97,1,98,1,99,1,100,1,101,1,102,1,103,1,104,1,105,1,106,1,107,1,108,1,109,1,110,1,111,1,112,1,113,1,114,1,115,1,116,1,117,1,118,1,119,1,120,1,121,1,122,1,123,1,124,1,125,1,126,1,127,1,128,1,129,1,130,1,131,1,132,1,133,1,134,1,135,1,136,1,137,1,138,1,139,1,140,1,141,1,142,1,143,1,144,1,145,1,146,1,147,1,148,1,149,1,150,1,151,1,152,1,153,1,154,1,155,1,156,1,157,1,158,1,159,1,160,1,161,1,162,1,163,1,164,1,165,1,166,1,167,1,168,1,169,1,170,1,171,1,172,1,173,1,174,1,175,1,176,1,177,1,178,1,179,1,180,1,181,1,182,1,183,1,184,1,185,1,186,1,187,1,188,1,189,1,190,1,191,1,192,1,193,1,194,1,195,1,196,1,197,1,198,1,199,1,200,1,201,1,202,1,203,1,204,1,205,1,206,1,207,1,208,1,209,1,210,1,211,1,212,1,213,1,214,1,215,1,216,1,217,1,218,1,219,1,220,1,221,1,222,1,223,1,224,1,225,1,226,1,227,1,228,1,229,1,230,1,231,1,232,1,233,1,234,1,235,1,236,1,237,1,238,1,239,1,240,1,241,1,242,1,243,1,244,1,245,1,246,1,247,1,248,1,249,1,250,1,251,1,252,1,253,1,254,1,255,1], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+431032);
/* memory initializer */ allocate([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0,10,254,20,2,40,4,80,6,160,8,60,10,14,12,26,14,12,16,24,18,48,20,96,22,192,24,72,26,16,28,32,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,1,1,0,0,7,6,0,8,3,3,5,5,3,2,2,2,4,4,6,6,2,5,0,8,4,4,6,6,2,4,2,7,4,4,7,7,6,6,0,8,3,3,5,5,4,2,2,2,4,4,6,6,2,5,0,8,4,4,6,6,2,4,2,7,4,4,7,7,6,6,0,8,3,3,5,5,3,2,2,2,3,4,6,6,2,5,0,8,4,4,6,6,2,4,2,7,4,4,7,7,6,6,0,8,3,3,5,5,4,2,2,2,5,4,6,6,2,5,0,8,4,4,6,6,2,4,2,7,4,4,7,7,2,6,2,6,3,3,3,3,2,2,2,2,4,4,4,4,2,6,0,6,4,4,4,4,2,5,2,5,5,5,5,5,2,6,2,6,3,3,3,3,2,2,2,2,4,4,4,4,2,5,0,5,4,4,4,4,2,4,2,4,4,4,4,4,2,6,2,8,3,3,5,5,2,2,2,2,4,4,6,6,2,5,0,8,4,4,6,6,2,4,2,7,4,4,7,7,2,6,2,8,3,3,5,5,2,2,2,2,4,4,6,6,2,5,0,8,4,4,6,6,2,4,2,7,4,4,7,7], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+433145);
/* memory initializer */ allocate([1,0,0,0,0,0,0,0,0,0,9,1,52,3,0,4,0,20,8,58,0,2,0,32,44,8,9,1,0,1,0,2,2,13,8,16,8,36,0,0,4,44,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,64,192,32,160,96,224,16,144,80,208,48,176,112,240,8,136,72,200,40,168,104,232,24,152,88,216,56,184,120,248,4,132,68,196,36,164,100,228,20,148,84,212,52,180,116,244,12,140,76,204,44,172,108,236,28,156,92,220,60,188,124,252,2,130,66,194,34,162,98,226,18,146,82,210,50,178,114,242,10,138,74,202,42,170,106,234,26,154,90,218,58,186,122,250,6,134,70,198,38,166,102,230,22,150,86,214,54,182,118,246,14,142,78,206,46,174,110,238,30,158,94,222,62,190,126,254,1,129,65,193,33,161,97,225,17,145,81,209,49,177,113,241,9,137,73,201,41,169,105,233,25,153,89,217,57,185,121,249,5,133,69,197,37,165,101,229,21,149,85,213,53,181,117,245,13,141,77,205,45,173,109,237,29,157,93,221,61,189,125,253,3,131,67,195,35,163,99,227,19,147,83,211,51,179,115,243,11,139,75,203,43,171,107,235,27,155,91,219,59,187,123,251,7,135,71,199,39,167,103,231,23,151,87,215,55,183,119,247,15,143,79,207,47,175,111,239,31,159,95,223,63,191,127,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,114,111,109,46,110,101,115,0,114,98,0,102,111,112,101,110,32,101,114,114,111,114,10,0,0,1,109,97,112,112,101,114,58,37,100,10], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+437836);
/* memory initializer */ allocate([1], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+442613);
/* memory initializer */ allocate([33,98,117,102,115,0,115,111,117,110,100,47,83,111,117,110,100,95,81,117,101,117,101,46,99,112,112,0,105,110,105,116,0,79,117,116,32,111,102,32,109,101,109,111,114,121,0,67,111,117,108,100,110,39,116,32,111,112,101,110,32,83,68,76,32,97,117,100,105,111,0,40,117,110,115,105,103,110,101,100,41,32,105,110,100,101,120,32,60,32,98,117,102,95,99,111,117,110,116,0,98,117,102,0,83,116,57,98,97,100,95,97,108,108,111,99,0,83,116,57,101,120,99,101,112,116,105,111,110,0,83,116,57,116,121,112,101,95,105,110,102,111,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,54,95,95,115,104,105,109,95,116,121,112,101,95,105,110,102,111,69,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,55,95,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,57,95,95,112,111,105,110,116,101,114,95,116,121,112,101,95,105,110,102,111,69,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,55,95,95,112,98,97,115,101,95,116,121,112,101,95,105,110,102,111,69,0,78,49,48,95,95,99,120,120,97,98,105,118,49,50,48,95,95,115,105,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,115,116,100,58,58,98,97,100,95,97,108,108,111,99,0,84,33,34,25,13,1,2,3,17,75,28,12,16,4,11,29,18,30,39,104,110,111,112,113,98,32,5,6,15,19,20,21,26,8,22,7,40,36,23,24,9,10,14,27,31,37,35,131,130,125,38,42,43,60,61,62,63,67,71,74,77,88,89,90,91,92,93,94,95,96,97,99,100,101,102,103,105,106,107,108,114,115,116,121,122,123,124,0,73,108,108,101,103,97,108,32,98,121,116,101,32,115,101,113,117,101,110,99,101,0,68,111,109,97,105,110,32,101,114,114,111,114,0,82,101,115,117,108,116,32,110,111,116,32,114,101,112,114,101,115,101,110,116,97,98,108,101,0,78,111,116,32,97,32,116,116,121,0,80,101,114,109,105,115,115,105,111,110,32,100,101,110,105,101,100,0,79,112,101,114,97,116,105,111,110,32,110,111,116,32,112,101,114,109,105,116,116,101,100,0,78,111,32,115,117,99,104,32,102,105,108,101,32,111,114,32,100,105,114,101,99,116,111,114,121,0,78,111,32,115,117,99,104,32,112,114,111,99,101,115,115,0,70,105,108,101,32,101,120,105,115,116,115,0,86,97,108,117,101,32,116,111,111,32,108,97,114,103,101,32,102,111,114,32,100,97,116,97,32,116,121,112,101,0,78,111,32,115,112,97,99,101,32,108,101,102,116,32,111,110,32,100,101,118,105,99,101,0,79,117,116,32,111,102,32,109,101,109,111,114,121,0,82,101,115,111,117,114,99,101,32,98,117,115,121,0,73,110,116,101,114,114,117,112,116,101,100,32,115,121,115,116,101,109,32,99,97,108,108,0,82,101,115,111,117,114,99,101,32,116,101,109,112,111,114,97,114,105,108,121,32,117,110,97,118,97,105,108,97,98,108,101,0,73,110,118,97,108,105,100,32,115,101,101,107,0,67,114,111,115,115,45,100,101,118,105,99,101,32,108,105,110,107,0,82,101,97,100,45,111,110,108,121,32,102,105,108,101,32,115,121,115,116,101,109,0,68,105,114,101,99,116,111,114,121,32,110,111,116,32,101,109,112,116,121,0,67,111,110,110,101,99,116,105,111,110,32,114,101,115,101,116,32,98,121,32,112,101,101,114,0,79,112,101,114,97,116,105,111,110,32,116,105,109,101,100,32,111,117,116,0,67,111,110,110,101,99,116,105,111,110,32,114,101,102,117,115,101,100,0,72,111,115,116,32,105,115,32,100,111,119,110,0,72,111,115,116,32,105,115,32,117,110,114,101,97,99,104,97,98,108,101,0,65,100,100,114,101,115,115,32,105,110,32,117,115,101,0,66,114,111,107,101,110,32,112,105,112,101,0,73,47,79,32,101,114,114,111,114,0,78,111,32,115,117,99,104,32,100,101,118,105,99,101,32,111,114,32,97,100,100,114,101,115,115,0,66,108,111,99,107,32,100,101,118,105,99,101,32,114,101,113,117,105,114,101,100,0,78,111,32,115,117,99,104,32,100,101,118,105,99,101,0,78,111,116,32,97,32,100,105,114,101,99,116,111,114,121,0,73,115,32,97,32,100,105,114,101,99,116,111,114,121,0,84,101,120,116,32,102,105,108,101,32,98,117,115,121,0,69,120,101,99,32,102,111,114,109,97,116,32,101,114,114,111,114,0,73,110,118,97,108,105,100,32,97,114,103,117,109,101,110,116,0,65,114,103,117,109,101,110,116,32,108,105,115,116,32,116,111,111,32,108,111,110,103,0,83,121,109,98,111,108,105,99,32,108,105,110,107,32,108,111,111,112,0,70,105,108,101,110,97,109,101,32,116,111,111,32,108,111,110,103,0,84,111,111,32,109,97,110,121,32,111,112,101,110,32,102,105,108,101,115,32,105,110,32,115,121,115,116,101,109,0,78,111,32,102,105,108,101,32,100,101,115,99,114,105,112,116,111,114,115,32,97,118,97,105,108,97,98,108,101,0,66,97,100,32,102,105,108,101,32,100,101,115,99,114,105,112,116,111,114,0,78,111,32,99,104,105,108,100,32,112,114,111,99,101,115,115,0,66,97,100,32,97,100,100,114,101,115,115,0,70,105,108,101,32,116,111,111,32,108,97,114,103,101,0,84,111,111,32,109,97,110,121,32,108,105,110,107,115,0,78,111,32,108,111,99,107,115,32,97,118,97,105,108,97,98,108,101,0,82,101,115,111,117,114,99,101,32,100,101,97,100,108,111,99,107,32,119,111,117,108,100,32,111,99,99,117,114,0,83,116,97,116,101,32,110,111,116,32,114,101,99,111,118,101,114,97,98,108,101,0,80,114,101,118,105,111,117,115,32,111,119,110,101,114,32,100,105,101,100,0,79,112,101,114,97,116,105,111,110,32,99,97,110,99,101,108,101,100,0,70,117,110,99,116,105,111,110,32,110,111,116,32,105,109,112,108,101,109,101,110,116,101,100,0,78,111,32,109,101,115,115,97,103,101,32,111,102,32,100,101,115,105,114,101,100,32,116,121,112,101,0,73,100,101,110,116,105,102,105,101,114,32,114,101,109,111,118,101,100,0,68,101,118,105,99,101,32,110,111,116,32,97,32,115,116,114,101,97,109,0,78,111,32,100,97,116,97,32,97,118,97,105,108,97,98,108,101,0,68,101,118,105,99,101,32,116,105,109,101,111,117,116,0,79,117,116,32,111,102,32,115,116,114,101,97,109,115,32,114,101,115,111,117,114,99,101,115,0,76,105,110,107,32,104,97,115,32,98,101,101,110,32,115,101,118,101,114,101,100,0,80,114,111,116,111,99,111,108,32,101,114,114,111,114,0,66,97,100,32,109,101,115,115,97,103,101,0,70,105,108,101,32,100,101,115,99,114,105,112,116,111,114,32,105,110,32,98,97,100,32,115,116,97,116,101,0,78,111,116,32,97,32,115,111,99,107,101,116,0,68,101,115,116,105,110,97,116,105,111,110,32,97,100,100,114,101,115,115,32,114,101,113,117,105,114,101,100,0,77,101,115,115,97,103,101,32,116,111,111,32,108,97,114,103,101,0,80,114,111,116,111,99,111,108,32,119,114,111,110,103,32,116,121,112,101,32,102,111,114,32,115,111,99,107,101,116,0,80,114,111,116,111,99,111,108,32,110,111,116,32,97,118,97,105,108,97,98,108,101,0,80,114,111,116,111,99,111,108,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,83,111,99,107,101,116,32,116,121,112,101,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,78,111,116,32,115,117,112,112,111,114,116,101,100,0,80,114,111,116,111,99,111,108,32,102,97,109,105,108,121,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,65,100,100,114,101,115,115,32,102,97,109,105,108,121,32,110,111,116,32,115,117,112,112,111,114,116,101,100,32,98,121,32,112,114,111,116,111,99,111,108,0,65,100,100,114,101,115,115,32,110,111,116,32,97,118,97,105,108,97,98,108,101,0,78,101,116,119,111,114,107,32,105,115,32,100,111,119,110,0,78,101,116,119,111,114,107,32,117,110,114,101,97,99,104,97,98,108,101,0,67,111,110,110,101,99,116,105,111,110,32,114,101,115,101,116,32,98,121,32,110,101,116,119,111,114,107,0,67,111,110,110,101,99,116,105,111,110,32,97,98,111,114,116,101,100,0,78,111,32,98,117,102,102,101,114,32,115,112,97,99,101,32,97,118,97,105,108,97,98,108,101,0,83,111,99,107,101,116,32,105,115,32,99,111,110,110,101,99,116,101,100,0,83,111,99,107,101,116,32,110,111,116,32,99,111,110,110,101,99,116,101,100,0,67,97,110,110,111,116,32,115,101,110,100,32,97,102,116,101,114,32,115,111,99,107,101,116,32,115,104,117,116,100,111,119,110,0,79,112,101,114,97,116,105,111,110,32,97,108,114,101,97,100,121,32,105,110,32,112,114,111,103,114,101,115,115,0,79,112,101,114,97,116,105,111,110,32,105,110,32,112,114,111,103,114,101,115,115,0,83,116,97,108,101,32,102,105,108,101,32,104,97,110,100,108,101,0,82,101,109,111,116,101,32,73,47,79,32,101,114,114,111,114,0,81,117,111,116,97,32,101,120,99,101,101,100,101,100,0,78,111,32,109,101,100,105,117,109,32,102,111,117,110,100,0,87,114,111,110,103,32,109,101,100,105,117,109,32,116,121,112,101,0,78,111,32,101,114,114,111,114,32,105,110,102,111,114,109,97,116,105,111,110,0,0,114,119,97], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+461581);
/* memory initializer */ allocate([17,0,10,0,17,17,17,0,0,0,0,5,0,0,0,0,0,0,9,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,15,10,17,17,17,3,10,7,0,1,19,9,11,11,0,0,9,6,11,0,0,11,0,6,17,0,0,0,17,17,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,10,10,17,17,17,0,10,0,0,2,0,9,11,0,0,0,9,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,0,0,0,0,13,0,0,0,4,13,0,0,0,0,9,14,0,0,0,0,0,14,0,0,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,0,15,0,0,0,0,9,16,0,0,0,0,0,16,0,0,16,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,10,0,0,0,0,9,11,0,0,0,0,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,48,49,50,51,52,53,54,55,56,57,65,66,67,68,69,70,45,43,32,32,32,48,88,48,120,0,40,110,117,108,108,41,0,45,48,88,43,48,88,32,48,88,45,48,120,43,48,120,32,48,120,0,105,110,102,0,73,78,70,0,110,97,110,0,78,65,78,0,46,0], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+464841);





/* no memory initializer */
var tempDoublePtr = Runtime.alignMemory(allocate(12, "i8", ALLOC_STATIC), 8);

assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

}

function copyTempDouble(ptr) {

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];

  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];

  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];

  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];

}

// {{PRE_LIBRARY}}


   
  Module["_i64Subtract"] = _i64Subtract;

  function ___assert_fail(condition, filename, line, func) {
      ABORT = true;
      throw 'Assertion failed: ' + Pointer_stringify(condition) + ', at: ' + [filename ? Pointer_stringify(filename) : 'unknown filename', line, func ? Pointer_stringify(func) : 'unknown function'] + ' at ' + stackTrace();
    }

  var _SItoD=true;

  
  
  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};
  
  var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"};
  
  function ___setErrNo(value) {
      if (Module['___errno_location']) HEAP32[((Module['___errno_location']())>>2)]=value;
      else Module.printErr('failed to set errno from JS');
      return value;
    }
  
  var PATH={splitPath:function (filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function (parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up--; up) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function (path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function (path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function (path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function (path) {
        return PATH.splitPath(path)[3];
      },join:function () {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function (l, r) {
        return PATH.normalize(l + '/' + r);
      },resolve:function () {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            return ''; // an invalid portion invalidates the whole thing
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function (from, to) {
        from = PATH.resolve(from).substr(1);
        to = PATH.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  
  var TTY={ttys:[],init:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function (dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function (stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function (stream) {
          // flush any pending line data
          stream.tty.ops.flush(stream.tty);
        },flush:function (stream) {
          stream.tty.ops.flush(stream.tty);
        },read:function (stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function (stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          for (var i = 0; i < length; i++) {
            try {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function (tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              // we will read data by chunks of BUFSIZE
              var BUFSIZE = 256;
              var buf = new Buffer(BUFSIZE);
              var bytesRead = 0;
  
              var fd = process.stdin.fd;
              // Linux and Mac cannot use process.stdin.fd (which isn't set up as sync)
              var usingDevice = false;
              try {
                fd = fs.openSync('/dev/stdin', 'r');
                usingDevice = true;
              } catch (e) {}
  
              bytesRead = fs.readSync(fd, buf, 0, BUFSIZE, null);
  
              if (usingDevice) { fs.closeSync(fd); }
              if (bytesRead > 0) {
                result = buf.slice(0, bytesRead).toString('utf-8');
              } else {
                result = null;
              }
  
            } else if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['print'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val); // val == 0 would cut text output off in the middle.
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['print'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }},default_tty1_ops:{put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['printErr'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val);
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['printErr'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }}};
  
  var MEMFS={ops_table:null,mount:function (mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function (parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap,
                msync: MEMFS.stream_ops.msync
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            }
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.usedBytes = 0; // The actual number of bytes used in the typed array, as opposed to contents.buffer.byteLength which gives the whole capacity.
          // When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred
          // for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size
          // penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.
          node.contents = null; 
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },getFileDataAsRegularArray:function (node) {
        if (node.contents && node.contents.subarray) {
          var arr = [];
          for (var i = 0; i < node.usedBytes; ++i) arr.push(node.contents[i]);
          return arr; // Returns a copy of the original data.
        }
        return node.contents; // No-op, the file contents are already in a JS array. Return as-is.
      },getFileDataAsTypedArray:function (node) {
        if (!node.contents) return new Uint8Array;
        if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes); // Make sure to not return excess unused bytes.
        return new Uint8Array(node.contents);
      },expandFileStorage:function (node, newCapacity) {
        // If we are asked to expand the size of a file that already exists, revert to using a standard JS array to store the file
        // instead of a typed array. This makes resizing the array more flexible because we can just .push() elements at the back to
        // increase the size.
        if (node.contents && node.contents.subarray && newCapacity > node.contents.length) {
          node.contents = MEMFS.getFileDataAsRegularArray(node);
          node.usedBytes = node.contents.length; // We might be writing to a lazy-loaded file which had overridden this property, so force-reset it.
        }
  
        if (!node.contents || node.contents.subarray) { // Keep using a typed array if creating a new storage, or if old one was a typed array as well.
          var prevCapacity = node.contents ? node.contents.buffer.byteLength : 0;
          if (prevCapacity >= newCapacity) return; // No need to expand, the storage was already large enough.
          // Don't expand strictly to the given requested limit if it's only a very small increase, but instead geometrically grow capacity.
          // For small filesizes (<1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to
          // avoid overshooting the allocation cap by a very large margin.
          var CAPACITY_DOUBLING_MAX = 1024 * 1024;
          newCapacity = Math.max(newCapacity, (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2.0 : 1.125)) | 0);
          if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256); // At minimum allocate 256b for each file when expanding.
          var oldContents = node.contents;
          node.contents = new Uint8Array(newCapacity); // Allocate new storage.
          if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0); // Copy old data over to the new storage.
          return;
        }
        // Not using a typed array to back the file storage. Use a standard JS array instead.
        if (!node.contents && newCapacity > 0) node.contents = [];
        while (node.contents.length < newCapacity) node.contents.push(0);
      },resizeFileStorage:function (node, newSize) {
        if (node.usedBytes == newSize) return;
        if (newSize == 0) {
          node.contents = null; // Fully decommit when requesting a resize to zero.
          node.usedBytes = 0;
          return;
        }
        if (!node.contents || node.contents.subarray) { // Resize a typed array if that is being used as the backing store.
          var oldContents = node.contents;
          node.contents = new Uint8Array(new ArrayBuffer(newSize)); // Allocate new storage.
          if (oldContents) {
            node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes))); // Copy old data over to the new storage.
          }
          node.usedBytes = newSize;
          return;
        }
        // Backing with a JS array.
        if (!node.contents) node.contents = [];
        if (node.contents.length > newSize) node.contents.length = newSize;
        else while (node.contents.length < newSize) node.contents.push(0);
        node.usedBytes = newSize;
      },node_ops:{getattr:function (node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.usedBytes;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.resizeFileStorage(node, attr.size);
          }
        },lookup:function (parent, name) {
          throw FS.genericErrors[ERRNO_CODES.ENOENT];
        },mknod:function (parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function (old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function (parent, name) {
          delete parent.contents[name];
        },rmdir:function (parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
          }
          delete parent.contents[name];
        },readdir:function (node) {
          var entries = ['.', '..']
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function (node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return node.link;
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= stream.node.usedBytes) return 0;
          var size = Math.min(stream.node.usedBytes - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else {
            for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
          }
          return size;
        },write:function (stream, buffer, offset, length, position, canOwn) {
          if (!length) return 0;
          var node = stream.node;
          node.timestamp = Date.now();
  
          if (buffer.subarray && (!node.contents || node.contents.subarray)) { // This write is from a typed array to a typed array?
            if (canOwn) { // Can we just reuse the buffer we are given?
              assert(position === 0, 'canOwn must imply no weird position inside the file');
              node.contents = buffer.subarray(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (node.usedBytes === 0 && position === 0) { // If this is a simple first write to an empty file, do a fast set since we don't need to care about old data.
              node.contents = new Uint8Array(buffer.subarray(offset, offset + length));
              node.usedBytes = length;
              return length;
            } else if (position + length <= node.usedBytes) { // Writing to an already allocated and used subrange of the file?
              node.contents.set(buffer.subarray(offset, offset + length), position);
              return length;
            }
          }
  
          // Appending to an existing file and we need to reallocate, or source data did not come as a typed array.
          MEMFS.expandFileStorage(node, position+length);
          if (node.contents.subarray && buffer.subarray) node.contents.set(buffer.subarray(offset, offset + length), position); // Use typed array write if available.
          else {
            for (var i = 0; i < length; i++) {
             node.contents[position + i] = buffer[offset + i]; // Or fall back to manual write if not.
            }
          }
          node.usedBytes = Math.max(node.usedBytes, position+length);
          return length;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.usedBytes;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        },allocate:function (stream, offset, length) {
          MEMFS.expandFileStorage(stream.node, offset + length);
          stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
        },mmap:function (stream, buffer, offset, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if ( !(flags & 2) &&
                (contents.buffer === buffer || contents.buffer === buffer.buffer) ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < stream.node.usedBytes) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOMEM);
            }
            buffer.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        },msync:function (stream, buffer, offset, length, mmapFlags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          if (mmapFlags & 2) {
            // MAP_PRIVATE calls need not to be synced back to underlying fs
            return 0;
          }
  
          var bytesWritten = MEMFS.stream_ops.write(stream, buffer, 0, length, offset, false);
          // should we check if bytesWritten and length are the same?
          return 0;
        }}};
  
  var IDBFS={dbs:{},indexedDB:function () {
        if (typeof indexedDB !== 'undefined') return indexedDB;
        var ret = null;
        if (typeof window === 'object') ret = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
        assert(ret, 'IDBFS used, but indexedDB not supported');
        return ret;
      },DB_VERSION:21,DB_STORE_NAME:"FILE_DATA",mount:function (mount) {
        // reuse all of the core MEMFS functionality
        return MEMFS.mount.apply(null, arguments);
      },syncfs:function (mount, populate, callback) {
        IDBFS.getLocalSet(mount, function(err, local) {
          if (err) return callback(err);
  
          IDBFS.getRemoteSet(mount, function(err, remote) {
            if (err) return callback(err);
  
            var src = populate ? remote : local;
            var dst = populate ? local : remote;
  
            IDBFS.reconcile(src, dst, callback);
          });
        });
      },getDB:function (name, callback) {
        // check the cache first
        var db = IDBFS.dbs[name];
        if (db) {
          return callback(null, db);
        }
  
        var req;
        try {
          req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
        } catch (e) {
          return callback(e);
        }
        req.onupgradeneeded = function(e) {
          var db = e.target.result;
          var transaction = e.target.transaction;
  
          var fileStore;
  
          if (db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)) {
            fileStore = transaction.objectStore(IDBFS.DB_STORE_NAME);
          } else {
            fileStore = db.createObjectStore(IDBFS.DB_STORE_NAME);
          }
  
          if (!fileStore.indexNames.contains('timestamp')) {
            fileStore.createIndex('timestamp', 'timestamp', { unique: false });
          }
        };
        req.onsuccess = function() {
          db = req.result;
  
          // add to the cache
          IDBFS.dbs[name] = db;
          callback(null, db);
        };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },getLocalSet:function (mount, callback) {
        var entries = {};
  
        function isRealDir(p) {
          return p !== '.' && p !== '..';
        };
        function toAbsolute(root) {
          return function(p) {
            return PATH.join2(root, p);
          }
        };
  
        var check = FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint));
  
        while (check.length) {
          var path = check.pop();
          var stat;
  
          try {
            stat = FS.stat(path);
          } catch (e) {
            return callback(e);
          }
  
          if (FS.isDir(stat.mode)) {
            check.push.apply(check, FS.readdir(path).filter(isRealDir).map(toAbsolute(path)));
          }
  
          entries[path] = { timestamp: stat.mtime };
        }
  
        return callback(null, { type: 'local', entries: entries });
      },getRemoteSet:function (mount, callback) {
        var entries = {};
  
        IDBFS.getDB(mount.mountpoint, function(err, db) {
          if (err) return callback(err);
  
          var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readonly');
          transaction.onerror = function(e) {
            callback(this.error);
            e.preventDefault();
          };
  
          var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
          var index = store.index('timestamp');
  
          index.openKeyCursor().onsuccess = function(event) {
            var cursor = event.target.result;
  
            if (!cursor) {
              return callback(null, { type: 'remote', db: db, entries: entries });
            }
  
            entries[cursor.primaryKey] = { timestamp: cursor.key };
  
            cursor.continue();
          };
        });
      },loadLocalEntry:function (path, callback) {
        var stat, node;
  
        try {
          var lookup = FS.lookupPath(path);
          node = lookup.node;
          stat = FS.stat(path);
        } catch (e) {
          return callback(e);
        }
  
        if (FS.isDir(stat.mode)) {
          return callback(null, { timestamp: stat.mtime, mode: stat.mode });
        } else if (FS.isFile(stat.mode)) {
          // Performance consideration: storing a normal JavaScript array to a IndexedDB is much slower than storing a typed array.
          // Therefore always convert the file contents to a typed array first before writing the data to IndexedDB.
          node.contents = MEMFS.getFileDataAsTypedArray(node);
          return callback(null, { timestamp: stat.mtime, mode: stat.mode, contents: node.contents });
        } else {
          return callback(new Error('node type not supported'));
        }
      },storeLocalEntry:function (path, entry, callback) {
        try {
          if (FS.isDir(entry.mode)) {
            FS.mkdir(path, entry.mode);
          } else if (FS.isFile(entry.mode)) {
            FS.writeFile(path, entry.contents, { encoding: 'binary', canOwn: true });
          } else {
            return callback(new Error('node type not supported'));
          }
  
          FS.chmod(path, entry.mode);
          FS.utime(path, entry.timestamp, entry.timestamp);
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },removeLocalEntry:function (path, callback) {
        try {
          var lookup = FS.lookupPath(path);
          var stat = FS.stat(path);
  
          if (FS.isDir(stat.mode)) {
            FS.rmdir(path);
          } else if (FS.isFile(stat.mode)) {
            FS.unlink(path);
          }
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },loadRemoteEntry:function (store, path, callback) {
        var req = store.get(path);
        req.onsuccess = function(event) { callback(null, event.target.result); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },storeRemoteEntry:function (store, path, entry, callback) {
        var req = store.put(entry, path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },removeRemoteEntry:function (store, path, callback) {
        var req = store.delete(path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },reconcile:function (src, dst, callback) {
        var total = 0;
  
        var create = [];
        Object.keys(src.entries).forEach(function (key) {
          var e = src.entries[key];
          var e2 = dst.entries[key];
          if (!e2 || e.timestamp > e2.timestamp) {
            create.push(key);
            total++;
          }
        });
  
        var remove = [];
        Object.keys(dst.entries).forEach(function (key) {
          var e = dst.entries[key];
          var e2 = src.entries[key];
          if (!e2) {
            remove.push(key);
            total++;
          }
        });
  
        if (!total) {
          return callback(null);
        }
  
        var errored = false;
        var completed = 0;
        var db = src.type === 'remote' ? src.db : dst.db;
        var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readwrite');
        var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= total) {
            return callback(null);
          }
        };
  
        transaction.onerror = function(e) {
          done(this.error);
          e.preventDefault();
        };
  
        // sort paths in ascending order so directory entries are created
        // before the files inside them
        create.sort().forEach(function (path) {
          if (dst.type === 'local') {
            IDBFS.loadRemoteEntry(store, path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeLocalEntry(path, entry, done);
            });
          } else {
            IDBFS.loadLocalEntry(path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeRemoteEntry(store, path, entry, done);
            });
          }
        });
  
        // sort paths in descending order so files are deleted before their
        // parent directories
        remove.sort().reverse().forEach(function(path) {
          if (dst.type === 'local') {
            IDBFS.removeLocalEntry(path, done);
          } else {
            IDBFS.removeRemoteEntry(store, path, done);
          }
        });
      }};
  
  var NODEFS={isWindows:false,staticInit:function () {
        NODEFS.isWindows = !!process.platform.match(/^win/);
      },mount:function (mount) {
        assert(ENVIRONMENT_IS_NODE);
        return NODEFS.createNode(null, '/', NODEFS.getMode(mount.opts.root), 0);
      },createNode:function (parent, name, mode, dev) {
        if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node = FS.createNode(parent, name, mode);
        node.node_ops = NODEFS.node_ops;
        node.stream_ops = NODEFS.stream_ops;
        return node;
      },getMode:function (path) {
        var stat;
        try {
          stat = fs.lstatSync(path);
          if (NODEFS.isWindows) {
            // On Windows, directories return permission bits 'rw-rw-rw-', even though they have 'rwxrwxrwx', so
            // propagate write bits to execute bits.
            stat.mode = stat.mode | ((stat.mode & 146) >> 1);
          }
        } catch (e) {
          if (!e.code) throw e;
          throw new FS.ErrnoError(ERRNO_CODES[e.code]);
        }
        return stat.mode;
      },realPath:function (node) {
        var parts = [];
        while (node.parent !== node) {
          parts.push(node.name);
          node = node.parent;
        }
        parts.push(node.mount.opts.root);
        parts.reverse();
        return PATH.join.apply(null, parts);
      },flagsToPermissionStringMap:{0:"r",1:"r+",2:"r+",64:"r",65:"r+",66:"r+",129:"rx+",193:"rx+",514:"w+",577:"w",578:"w+",705:"wx",706:"wx+",1024:"a",1025:"a",1026:"a+",1089:"a",1090:"a+",1153:"ax",1154:"ax+",1217:"ax",1218:"ax+",4096:"rs",4098:"rs+"},flagsToPermissionString:function (flags) {
        flags &= ~0100000 /*O_LARGEFILE*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        if (flags in NODEFS.flagsToPermissionStringMap) {
          return NODEFS.flagsToPermissionStringMap[flags];
        } else {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
      },node_ops:{getattr:function (node) {
          var path = NODEFS.realPath(node);
          var stat;
          try {
            stat = fs.lstatSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          // node.js v0.10.20 doesn't report blksize and blocks on Windows. Fake them with default blksize of 4096.
          // See http://support.microsoft.com/kb/140365
          if (NODEFS.isWindows && !stat.blksize) {
            stat.blksize = 4096;
          }
          if (NODEFS.isWindows && !stat.blocks) {
            stat.blocks = (stat.size+stat.blksize-1)/stat.blksize|0;
          }
          return {
            dev: stat.dev,
            ino: stat.ino,
            mode: stat.mode,
            nlink: stat.nlink,
            uid: stat.uid,
            gid: stat.gid,
            rdev: stat.rdev,
            size: stat.size,
            atime: stat.atime,
            mtime: stat.mtime,
            ctime: stat.ctime,
            blksize: stat.blksize,
            blocks: stat.blocks
          };
        },setattr:function (node, attr) {
          var path = NODEFS.realPath(node);
          try {
            if (attr.mode !== undefined) {
              fs.chmodSync(path, attr.mode);
              // update the common node structure mode as well
              node.mode = attr.mode;
            }
            if (attr.timestamp !== undefined) {
              var date = new Date(attr.timestamp);
              fs.utimesSync(path, date, date);
            }
            if (attr.size !== undefined) {
              fs.truncateSync(path, attr.size);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },lookup:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          var mode = NODEFS.getMode(path);
          return NODEFS.createNode(parent, name, mode);
        },mknod:function (parent, name, mode, dev) {
          var node = NODEFS.createNode(parent, name, mode, dev);
          // create the backing node for this in the fs root as well
          var path = NODEFS.realPath(node);
          try {
            if (FS.isDir(node.mode)) {
              fs.mkdirSync(path, node.mode);
            } else {
              fs.writeFileSync(path, '', { mode: node.mode });
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return node;
        },rename:function (oldNode, newDir, newName) {
          var oldPath = NODEFS.realPath(oldNode);
          var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
          try {
            fs.renameSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },unlink:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.unlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },rmdir:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.rmdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readdir:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },symlink:function (parent, newName, oldPath) {
          var newPath = PATH.join2(NODEFS.realPath(parent), newName);
          try {
            fs.symlinkSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readlink:function (node) {
          var path = NODEFS.realPath(node);
          try {
            path = fs.readlinkSync(path);
            path = NODEJS_PATH.relative(NODEJS_PATH.resolve(node.mount.opts.root), path);
            return path;
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        }},stream_ops:{open:function (stream) {
          var path = NODEFS.realPath(stream.node);
          try {
            if (FS.isFile(stream.node.mode)) {
              stream.nfd = fs.openSync(path, NODEFS.flagsToPermissionString(stream.flags));
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },close:function (stream) {
          try {
            if (FS.isFile(stream.node.mode) && stream.nfd) {
              fs.closeSync(stream.nfd);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },read:function (stream, buffer, offset, length, position) {
          if (length === 0) return 0; // node errors on 0 length reads
          // FIXME this is terrible.
          var nbuffer = new Buffer(length);
          var res;
          try {
            res = fs.readSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          if (res > 0) {
            for (var i = 0; i < res; i++) {
              buffer[offset + i] = nbuffer[i];
            }
          }
          return res;
        },write:function (stream, buffer, offset, length, position) {
          // FIXME this is terrible.
          var nbuffer = new Buffer(buffer.subarray(offset, offset + length));
          var res;
          try {
            res = fs.writeSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return res;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              try {
                var stat = fs.fstatSync(stream.nfd);
                position += stat.size;
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
              }
            }
          }
  
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
  
          return position;
        }}};
  
  var WORKERFS={DIR_MODE:16895,FILE_MODE:33279,reader:null,mount:function (mount) {
        assert(ENVIRONMENT_IS_WORKER);
        if (!WORKERFS.reader) WORKERFS.reader = new FileReaderSync();
        var root = WORKERFS.createNode(null, '/', WORKERFS.DIR_MODE, 0);
        var createdParents = {};
        function ensureParent(path) {
          // return the parent node, creating subdirs as necessary
          var parts = path.split('/');
          var parent = root;
          for (var i = 0; i < parts.length-1; i++) {
            var curr = parts.slice(0, i+1).join('/');
            if (!createdParents[curr]) {
              createdParents[curr] = WORKERFS.createNode(parent, curr, WORKERFS.DIR_MODE, 0);
            }
            parent = createdParents[curr];
          }
          return parent;
        }
        function base(path) {
          var parts = path.split('/');
          return parts[parts.length-1];
        }
        // We also accept FileList here, by using Array.prototype
        Array.prototype.forEach.call(mount.opts["files"] || [], function(file) {
          WORKERFS.createNode(ensureParent(file.name), base(file.name), WORKERFS.FILE_MODE, 0, file, file.lastModifiedDate);
        });
        (mount.opts["blobs"] || []).forEach(function(obj) {
          WORKERFS.createNode(ensureParent(obj["name"]), base(obj["name"]), WORKERFS.FILE_MODE, 0, obj["data"]);
        });
        (mount.opts["packages"] || []).forEach(function(pack) {
          pack['metadata'].files.forEach(function(file) {
            var name = file.filename.substr(1); // remove initial slash
            WORKERFS.createNode(ensureParent(name), base(name), WORKERFS.FILE_MODE, 0, pack['blob'].slice(file.start, file.end));
          });
        });
        return root;
      },createNode:function (parent, name, mode, dev, contents, mtime) {
        var node = FS.createNode(parent, name, mode);
        node.mode = mode;
        node.node_ops = WORKERFS.node_ops;
        node.stream_ops = WORKERFS.stream_ops;
        node.timestamp = (mtime || new Date).getTime();
        assert(WORKERFS.FILE_MODE !== WORKERFS.DIR_MODE);
        if (mode === WORKERFS.FILE_MODE) {
          node.size = contents.size;
          node.contents = contents;
        } else {
          node.size = 4096;
          node.contents = {};
        }
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },node_ops:{getattr:function (node) {
          return {
            dev: 1,
            ino: undefined,
            mode: node.mode,
            nlink: 1,
            uid: 0,
            gid: 0,
            rdev: undefined,
            size: node.size,
            atime: new Date(node.timestamp),
            mtime: new Date(node.timestamp),
            ctime: new Date(node.timestamp),
            blksize: 4096,
            blocks: Math.ceil(node.size / 4096),
          };
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
        },lookup:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        },mknod:function (parent, name, mode, dev) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },rename:function (oldNode, newDir, newName) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },unlink:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },rmdir:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },readdir:function (node) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },symlink:function (parent, newName, oldPath) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },readlink:function (node) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          if (position >= stream.node.size) return 0;
          var chunk = stream.node.contents.slice(position, position + length);
          var ab = WORKERFS.reader.readAsArrayBuffer(chunk);
          buffer.set(new Uint8Array(ab), offset);
          return chunk.size;
        },write:function (stream, buffer, offset, length, position) {
          throw new FS.ErrnoError(ERRNO_CODES.EIO);
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.size;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        }}};
  
  var _stdin=allocate(1, "i32*", ALLOC_STATIC);
  
  var _stdout=allocate(1, "i32*", ALLOC_STATIC);
  
  var _stderr=allocate(1, "i32*", ALLOC_STATIC);var FS={root:null,mounts:[],devices:[null],streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},filesystems:null,handleFSError:function (e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return ___setErrNo(e.errno);
      },lookupPath:function (path, opts) {
        path = PATH.resolve(FS.cwd(), path);
        opts = opts || {};
  
        if (!path) return { path: '', node: null };
  
        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        for (var key in defaults) {
          if (opts[key] === undefined) {
            opts[key] = defaults[key];
          }
        }
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
        }
  
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }
  
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH.resolve(PATH.dirname(current_path), link);
  
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:function (node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function (parentid, name) {
        var hash = 0;
  
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function (parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
          throw new FS.ErrnoError(err, parent);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function (parent, name, mode, rdev) {
        if (!FS.FSNode) {
          FS.FSNode = function(parent, name, mode, rdev) {
            if (!parent) {
              parent = this;  // root node sets parent to itself
            }
            this.parent = parent;
            this.mount = parent.mount;
            this.mounted = null;
            this.id = FS.nextInode++;
            this.name = name;
            this.mode = mode;
            this.node_ops = {};
            this.stream_ops = {};
            this.rdev = rdev;
          };
  
          FS.FSNode.prototype = {};
  
          // compatibility
          var readMode = 292 | 73;
          var writeMode = 146;
  
          // NOTE we must use Object.defineProperties instead of individual calls to
          // Object.defineProperty in order to make closure compiler happy
          Object.defineProperties(FS.FSNode.prototype, {
            read: {
              get: function() { return (this.mode & readMode) === readMode; },
              set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
            },
            write: {
              get: function() { return (this.mode & writeMode) === writeMode; },
              set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
            },
            isFolder: {
              get: function() { return FS.isDir(this.mode); }
            },
            isDevice: {
              get: function() { return FS.isChrdev(this.mode); }
            }
          });
        }
  
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },destroyNode:function (node) {
        FS.hashRemoveNode(node);
      },isRoot:function (node) {
        return node === node.parent;
      },isMountpoint:function (node) {
        return !!node.mounted;
      },isFile:function (mode) {
        return (mode & 61440) === 32768;
      },isDir:function (mode) {
        return (mode & 61440) === 16384;
      },isLink:function (mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function (mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function (mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function (mode) {
        return (mode & 61440) === 4096;
      },isSocket:function (mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function (str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function (flag) {
        var perms = ['r', 'w', 'rw'][flag & 3];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function (node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return ERRNO_CODES.EACCES;
        }
        return 0;
      },mayLookup:function (dir) {
        var err = FS.nodePermissions(dir, 'x');
        if (err) return err;
        if (!dir.node_ops.lookup) return ERRNO_CODES.EACCES;
        return 0;
      },mayCreate:function (dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return ERRNO_CODES.EEXIST;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function (dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
          return err;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return ERRNO_CODES.ENOTDIR;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return ERRNO_CODES.EBUSY;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return 0;
      },mayOpen:function (node, flags) {
        if (!node) {
          return ERRNO_CODES.ENOENT;
        }
        if (FS.isLink(node.mode)) {
          return ERRNO_CODES.ELOOP;
        } else if (FS.isDir(node.mode)) {
          if ((flags & 2097155) !== 0 ||  // opening for write
              (flags & 512)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function (fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(ERRNO_CODES.EMFILE);
      },getStream:function (fd) {
        return FS.streams[fd];
      },createStream:function (stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = function(){};
          FS.FSStream.prototype = {};
          // compatibility
          Object.defineProperties(FS.FSStream.prototype, {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          });
        }
        // clone it, so we can return an instance of FSStream
        var newStream = new FS.FSStream();
        for (var p in stream) {
          newStream[p] = stream[p];
        }
        stream = newStream;
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function (fd) {
        FS.streams[fd] = null;
      },chrdev_stream_ops:{open:function (stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function () {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }},major:function (dev) {
        return ((dev) >> 8);
      },minor:function (dev) {
        return ((dev) & 0xff);
      },makedev:function (ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function (dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function (dev) {
        return FS.devices[dev];
      },getMounts:function (mount) {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push.apply(check, m.mounts);
        }
  
        return mounts;
      },syncfs:function (populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= mounts.length) {
            callback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach(function (mount) {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:function (type, opts, mountpoint) {
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
          }
        }
  
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },unmount:function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach(function (hash) {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.indexOf(current.mount) !== -1) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
      },lookup:function (parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function (path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        if (!name || name === '.' || name === '..') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.mayCreate(parent, name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function (path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function (path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdev:function (path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function (oldpath, newpath) {
        if (!PATH.resolve(oldpath)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        if (!parent) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function (old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        if (!old_dir || !new_dir) throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(ERRNO_CODES.EXDEV);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        // new path should not be an ancestor of the old path
        relative = PATH.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        err = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          err = FS.nodePermissions(old_dir, 'w');
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        try {
          if (FS.trackingDelegate['willMovePath']) {
            FS.trackingDelegate['willMovePath'](old_path, new_path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
        try {
          if (FS.trackingDelegate['onMovePath']) FS.trackingDelegate['onMovePath'](old_path, new_path);
        } catch(e) {
          console.log("FS.trackingDelegate['onMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
      },rmdir:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        return node.node_ops.readdir(node);
      },unlink:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
          // POSIX says unlink should set EPERM, not EISDIR
          if (err === ERRNO_CODES.EISDIR) err = ERRNO_CODES.EPERM;
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readlink:function (path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        return PATH.resolve(FS.getPath(link.parent), link.node_ops.readlink(link));
      },stat:function (path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return node.node_ops.getattr(node);
      },lstat:function (path) {
        return FS.stat(path, true);
      },chmod:function (path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function (path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function (fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chmod(stream.node, mode);
      },chown:function (path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function (path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function (fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function (path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function (fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        FS.truncate(stream.node, len);
      },utime:function (path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function (path, flags, mode, fd_start, fd_end) {
        if (path === "") {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        var created = false;
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(ERRNO_CODES.EEXIST);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
            created = true;
          }
        }
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // if asked only for a directory, then this must be one
        if ((flags & 65536) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        // check permissions, if this is not a file we just created now (it is ok to
        // create and write to a file with read-only permissions; it is read-only
        // for later use)
        if (!created) {
          var err = FS.mayOpen(node, flags);
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            Module['printErr']('read file: ' + path);
          }
        }
        try {
          if (FS.trackingDelegate['onOpenFile']) {
            var trackingFlags = 0;
            if ((flags & 2097155) !== 1) {
              trackingFlags |= FS.tracking.openFlags.READ;
            }
            if ((flags & 2097155) !== 0) {
              trackingFlags |= FS.tracking.openFlags.WRITE;
            }
            FS.trackingDelegate['onOpenFile'](path, trackingFlags);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['onOpenFile']('"+path+"', flags) threw an exception: " + e.message);
        }
        return stream;
      },close:function (stream) {
        if (stream.getdents) stream.getdents = null; // free readdir state
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
      },llseek:function (stream, offset, whence) {
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        stream.position = stream.stream_ops.llseek(stream, offset, whence);
        stream.ungotten = [];
        return stream.position;
      },read:function (stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function (stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if (stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        try {
          if (stream.path && FS.trackingDelegate['onWriteToFile']) FS.trackingDelegate['onWriteToFile'](stream.path);
        } catch(e) {
          console.log("FS.trackingDelegate['onWriteToFile']('"+path+"') threw an exception: " + e.message);
        }
        return bytesWritten;
      },allocate:function (stream, offset, length) {
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function (stream, buffer, offset, length, position, prot, flags) {
        // TODO if PROT is PROT_WRITE, make sure we have write access
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EACCES);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      },msync:function (stream, buffer, offset, length, mmapFlags) {
        if (!stream || !stream.stream_ops.msync) {
          return 0;
        }
        return stream.stream_ops.msync(stream, buffer, offset, length, mmapFlags);
      },munmap:function (stream) {
        return 0;
      },ioctl:function (stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTTY);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function (path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = UTF8ArrayToString(buf, 0);
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:function (path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        opts.encoding = opts.encoding || 'utf8';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var stream = FS.open(path, opts.flags, opts.mode);
        if (opts.encoding === 'utf8') {
          var buf = new Uint8Array(lengthBytesUTF8(data)+1);
          var actualNumBytes = stringToUTF8Array(data, buf, 0, buf.length);
          FS.write(stream, buf, 0, actualNumBytes, 0, opts.canOwn);
        } else if (opts.encoding === 'binary') {
          FS.write(stream, data, 0, data.length, 0, opts.canOwn);
        }
        FS.close(stream);
      },cwd:function () {
        return FS.currentPath;
      },chdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        var err = FS.nodePermissions(lookup.node, 'x');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function () {
        FS.mkdir('/tmp');
        FS.mkdir('/home');
        FS.mkdir('/home/web_user');
      },createDefaultDevices:function () {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function(stream, buffer, offset, length, pos) { return length; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // setup /dev/[u]random
        var random_device;
        if (typeof crypto !== 'undefined') {
          // for modern web browsers
          var randomBuffer = new Uint8Array(1);
          random_device = function() { crypto.getRandomValues(randomBuffer); return randomBuffer[0]; };
        } else if (ENVIRONMENT_IS_NODE) {
          // for nodejs
          random_device = function() { return require('crypto').randomBytes(1)[0]; };
        } else {
          // default for ES5 platforms
          random_device = function() { return (Math.random()*256)|0; };
        }
        FS.createDevice('/dev', 'random', random_device);
        FS.createDevice('/dev', 'urandom', random_device);
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createSpecialDirectories:function () {
        // create /proc/self/fd which allows /proc/self/fd/6 => readlink gives the name of the stream for fd 6 (see test_unistd_ttyname)
        FS.mkdir('/proc');
        FS.mkdir('/proc/self');
        FS.mkdir('/proc/self/fd');
        FS.mount({
          mount: function() {
            var node = FS.createNode('/proc/self', 'fd', 16384 | 0777, 73);
            node.node_ops = {
              lookup: function(parent, name) {
                var fd = +name;
                var stream = FS.getStream(fd);
                if (!stream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
                var ret = {
                  parent: null,
                  mount: { mountpoint: 'fake' },
                  node_ops: { readlink: function() { return stream.path } }
                };
                ret.parent = ret; // make it look like a simple root node
                return ret;
              }
            };
            return node;
          }
        }, {}, '/proc/self/fd');
      },createStandardStreams:function () {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');
  
        var stdout = FS.open('/dev/stdout', 'w');
        assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');
  
        var stderr = FS.open('/dev/stderr', 'w');
        assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function () {
        if (FS.ErrnoError) return;
        FS.ErrnoError = function ErrnoError(errno, node) {
          //Module.printErr(stackTrace()); // useful for debugging
          this.node = node;
          this.setErrno = function(errno) {
            this.errno = errno;
            for (var key in ERRNO_CODES) {
              if (ERRNO_CODES[key] === errno) {
                this.code = key;
                break;
              }
            }
          };
          this.setErrno(errno);
          this.message = ERRNO_MESSAGES[errno];
          if (this.stack) this.stack = demangleAll(this.stack);
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [ERRNO_CODES.ENOENT].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function () {
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
        FS.createSpecialDirectories();
  
        FS.filesystems = {
          'MEMFS': MEMFS,
          'IDBFS': IDBFS,
          'NODEFS': NODEFS,
          'WORKERFS': WORKERFS,
        };
      },init:function (input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:function () {
        FS.init.initialized = false;
        // force-flush all streams, so we get musl std streams printed out
        var fflush = Module['_fflush'];
        if (fflush) fflush(0);
        // close all of our streams
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function (canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function (parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function (relative, base) {
        return PATH.resolve(base, relative);
      },standardizePath:function (path) {
        return PATH.normalize(path);
      },findObject:function (path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },analyzePath:function (path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function (parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function (parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function (parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function (parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function (parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
            obj.usedBytes = obj.contents.length;
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
        function LazyUint8Array() {
          this.lengthKnown = false;
          this.chunks = []; // Loaded chunks. Index is the chunk number
        }
        LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
          if (idx > this.length-1 || idx < 0) {
            return undefined;
          }
          var chunkOffset = idx % this.chunkSize;
          var chunkNum = (idx / this.chunkSize)|0;
          return this.getter(chunkNum)[chunkOffset];
        }
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
          this.getter = getter;
        }
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
          // Find length
          var xhr = new XMLHttpRequest();
          xhr.open('HEAD', url, false);
          xhr.send(null);
          if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
          var datalength = Number(xhr.getResponseHeader("Content-length"));
          var header;
          var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
          var chunkSize = 1024*1024; // Chunk size in bytes
  
          if (!hasByteServing) chunkSize = datalength;
  
          // Function to get a range from the remote URL.
          var doXHR = (function(from, to) {
            if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
            if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
            // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, false);
            if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
            // Some hints to the browser that we want binary data.
            if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
            if (xhr.overrideMimeType) {
              xhr.overrideMimeType('text/plain; charset=x-user-defined');
            }
  
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            if (xhr.response !== undefined) {
              return new Uint8Array(xhr.response || []);
            } else {
              return intArrayFromString(xhr.responseText || '', true);
            }
          });
          var lazyArray = this;
          lazyArray.setDataGetter(function(chunkNum) {
            var start = chunkNum * chunkSize;
            var end = (chunkNum+1) * chunkSize - 1; // including this byte
            end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
              lazyArray.chunks[chunkNum] = doXHR(start, end);
            }
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
            return lazyArray.chunks[chunkNum];
          });
  
          this._length = datalength;
          this._chunkSize = chunkSize;
          this.lengthKnown = true;
        }
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          Object.defineProperty(lazyArray, "length", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._length;
              }
          });
          Object.defineProperty(lazyArray, "chunkSize", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._chunkSize;
              }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // Add a function that defers querying the file size until it is asked the first time.
        Object.defineProperty(node, "usedBytes", {
            get: function() { return this.contents.length; }
        });
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EIO);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn, preFinish) {
        Browser.init();
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH.resolve(PATH.join2(parent, name)) : parent;
        var dep = getUniqueRunDependency('cp ' + fullname); // might have several active requests for the same fullname
        function processData(byteArray) {
          function finish(byteArray) {
            if (preFinish) preFinish();
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency(dep);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency(dep);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency(dep);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function () {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          console.log('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};
  
  
  
  function _emscripten_set_main_loop_timing(mode, value) {
      Browser.mainLoop.timingMode = mode;
      Browser.mainLoop.timingValue = value;
  
      if (!Browser.mainLoop.func) {
        console.error('emscripten_set_main_loop_timing: Cannot set timing mode for main loop since a main loop does not exist! Call emscripten_set_main_loop first to set one up.');
        return 1; // Return non-zero on failure, can't set timing mode when there is no main loop.
      }
  
      if (mode == 0 /*EM_TIMING_SETTIMEOUT*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_setTimeout() {
          setTimeout(Browser.mainLoop.runner, value); // doing this each time means that on exception, we stop
        };
        Browser.mainLoop.method = 'timeout';
      } else if (mode == 1 /*EM_TIMING_RAF*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_rAF() {
          Browser.requestAnimationFrame(Browser.mainLoop.runner);
        };
        Browser.mainLoop.method = 'rAF';
      } else if (mode == 2 /*EM_TIMING_SETIMMEDIATE*/) {
        if (!window['setImmediate']) {
          // Emulate setImmediate. (note: not a complete polyfill, we don't emulate clearImmediate() to keep code size to minimum, since not needed)
          var setImmediates = [];
          var emscriptenMainLoopMessageId = '__emcc';
          function Browser_setImmediate_messageHandler(event) {
            if (event.source === window && event.data === emscriptenMainLoopMessageId) {
              event.stopPropagation();
              setImmediates.shift()();
            }
          }
          window.addEventListener("message", Browser_setImmediate_messageHandler, true);
          window['setImmediate'] = function Browser_emulated_setImmediate(func) {
            setImmediates.push(func);
            window.postMessage(emscriptenMainLoopMessageId, "*");
          }
        }
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_setImmediate() {
          window['setImmediate'](Browser.mainLoop.runner);
        };
        Browser.mainLoop.method = 'immediate';
      }
      return 0;
    }function _emscripten_set_main_loop(func, fps, simulateInfiniteLoop, arg, noSetTiming) {
      Module['noExitRuntime'] = true;
  
      assert(!Browser.mainLoop.func, 'emscripten_set_main_loop: there can only be one main loop function at once: call emscripten_cancel_main_loop to cancel the previous one before setting a new one with different parameters.');
  
      Browser.mainLoop.func = func;
      Browser.mainLoop.arg = arg;
  
      var thisMainLoopId = Browser.mainLoop.currentlyRunningMainloop;
  
      Browser.mainLoop.runner = function Browser_mainLoop_runner() {
        if (ABORT) return;
        if (Browser.mainLoop.queue.length > 0) {
          var start = Date.now();
          var blocker = Browser.mainLoop.queue.shift();
          blocker.func(blocker.arg);
          if (Browser.mainLoop.remainingBlockers) {
            var remaining = Browser.mainLoop.remainingBlockers;
            var next = remaining%1 == 0 ? remaining-1 : Math.floor(remaining);
            if (blocker.counted) {
              Browser.mainLoop.remainingBlockers = next;
            } else {
              // not counted, but move the progress along a tiny bit
              next = next + 0.5; // do not steal all the next one's progress
              Browser.mainLoop.remainingBlockers = (8*remaining + next)/9;
            }
          }
          console.log('main loop blocker "' + blocker.name + '" took ' + (Date.now() - start) + ' ms'); //, left: ' + Browser.mainLoop.remainingBlockers);
          Browser.mainLoop.updateStatus();
          setTimeout(Browser.mainLoop.runner, 0);
          return;
        }
  
        // catch pauses from non-main loop sources
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Implement very basic swap interval control
        Browser.mainLoop.currentFrameNumber = Browser.mainLoop.currentFrameNumber + 1 | 0;
        if (Browser.mainLoop.timingMode == 1/*EM_TIMING_RAF*/ && Browser.mainLoop.timingValue > 1 && Browser.mainLoop.currentFrameNumber % Browser.mainLoop.timingValue != 0) {
          // Not the scheduled time to render this frame - skip.
          Browser.mainLoop.scheduler();
          return;
        }
  
        // Signal GL rendering layer that processing of a new frame is about to start. This helps it optimize
        // VBO double-buffering and reduce GPU stalls.
  
        if (Browser.mainLoop.method === 'timeout' && Module.ctx) {
          Module.printErr('Looks like you are rendering without using requestAnimationFrame for the main loop. You should use 0 for the frame rate in emscripten_set_main_loop in order to use requestAnimationFrame, as that can greatly improve your frame rates!');
          Browser.mainLoop.method = ''; // just warn once per call to set main loop
        }
  
        Browser.mainLoop.runIter(function() {
          if (typeof arg !== 'undefined') {
            Runtime.dynCall('vi', func, [arg]);
          } else {
            Runtime.dynCall('v', func);
          }
        });
  
        // catch pauses from the main loop itself
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Queue new audio data. This is important to be right after the main loop invocation, so that we will immediately be able
        // to queue the newest produced audio samples.
        // TODO: Consider adding pre- and post- rAF callbacks so that GL.newRenderingFrameStarted() and SDL.audio.queueNewAudioData()
        //       do not need to be hardcoded into this function, but can be more generic.
        if (typeof SDL === 'object' && SDL.audio && SDL.audio.queueNewAudioData) SDL.audio.queueNewAudioData();
  
        Browser.mainLoop.scheduler();
      }
  
      if (!noSetTiming) {
        if (fps && fps > 0) _emscripten_set_main_loop_timing(0/*EM_TIMING_SETTIMEOUT*/, 1000.0 / fps);
        else _emscripten_set_main_loop_timing(1/*EM_TIMING_RAF*/, 1); // Do rAF by rendering each frame (no decimating)
  
        Browser.mainLoop.scheduler();
      }
  
      if (simulateInfiniteLoop) {
        throw 'SimulateInfiniteLoop';
      }
    }var Browser={mainLoop:{scheduler:null,method:"",currentlyRunningMainloop:0,func:null,arg:0,timingMode:0,timingValue:0,currentFrameNumber:0,queue:[],pause:function () {
          Browser.mainLoop.scheduler = null;
          Browser.mainLoop.currentlyRunningMainloop++; // Incrementing this signals the previous main loop that it's now become old, and it must return.
        },resume:function () {
          Browser.mainLoop.currentlyRunningMainloop++;
          var timingMode = Browser.mainLoop.timingMode;
          var timingValue = Browser.mainLoop.timingValue;
          var func = Browser.mainLoop.func;
          Browser.mainLoop.func = null;
          _emscripten_set_main_loop(func, 0, false, Browser.mainLoop.arg, true /* do not set timing and call scheduler, we will do it on the next lines */);
          _emscripten_set_main_loop_timing(timingMode, timingValue);
          Browser.mainLoop.scheduler();
        },updateStatus:function () {
          if (Module['setStatus']) {
            var message = Module['statusMessage'] || 'Please wait...';
            var remaining = Browser.mainLoop.remainingBlockers;
            var expected = Browser.mainLoop.expectedBlockers;
            if (remaining) {
              if (remaining < expected) {
                Module['setStatus'](message + ' (' + (expected - remaining) + '/' + expected + ')');
              } else {
                Module['setStatus'](message);
              }
            } else {
              Module['setStatus']('');
            }
          }
        },runIter:function (func) {
          if (ABORT) return;
          if (Module['preMainLoop']) {
            var preRet = Module['preMainLoop']();
            if (preRet === false) {
              return; // |return false| skips a frame
            }
          }
          try {
            func();
          } catch (e) {
            if (e instanceof ExitStatus) {
              return;
            } else {
              if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
              throw e;
            }
          }
          if (Module['postMainLoop']) Module['postMainLoop']();
        }},isFullScreen:false,pointerLock:false,moduleContextCreatedCallbacks:[],workers:[],init:function () {
        if (!Module["preloadPlugins"]) Module["preloadPlugins"] = []; // needs to exist even in workers
  
        if (Browser.initted) return;
        Browser.initted = true;
  
        try {
          new Blob();
          Browser.hasBlobConstructor = true;
        } catch(e) {
          Browser.hasBlobConstructor = false;
          console.log("warning: no blob constructor, cannot create blobs with mimetypes");
        }
        Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : (typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : (!Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null));
        Browser.URLObject = typeof window != "undefined" ? (window.URL ? window.URL : window.webkitURL) : undefined;
        if (!Module.noImageDecoding && typeof Browser.URLObject === 'undefined') {
          console.log("warning: Browser does not support creating object URLs. Built-in browser image decoding will not be available.");
          Module.noImageDecoding = true;
        }
  
        // Support for plugins that can process preloaded files. You can add more of these to
        // your app by creating and appending to Module.preloadPlugins.
        //
        // Each plugin is asked if it can handle a file based on the file's name. If it can,
        // it is given the file's raw data. When it is done, it calls a callback with the file's
        // (possibly modified) data. For example, a plugin might decompress a file, or it
        // might create some side data structure for use later (like an Image element, etc.).
  
        var imagePlugin = {};
        imagePlugin['canHandle'] = function imagePlugin_canHandle(name) {
          return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/i.test(name);
        };
        imagePlugin['handle'] = function imagePlugin_handle(byteArray, name, onload, onerror) {
          var b = null;
          if (Browser.hasBlobConstructor) {
            try {
              b = new Blob([byteArray], { type: Browser.getMimetype(name) });
              if (b.size !== byteArray.length) { // Safari bug #118630
                // Safari's Blob can only take an ArrayBuffer
                b = new Blob([(new Uint8Array(byteArray)).buffer], { type: Browser.getMimetype(name) });
              }
            } catch(e) {
              Runtime.warnOnce('Blob constructor present but fails: ' + e + '; falling back to blob builder');
            }
          }
          if (!b) {
            var bb = new Browser.BlobBuilder();
            bb.append((new Uint8Array(byteArray)).buffer); // we need to pass a buffer, and must copy the array to get the right data range
            b = bb.getBlob();
          }
          var url = Browser.URLObject.createObjectURL(b);
          assert(typeof url == 'string', 'createObjectURL must return a url as a string');
          var img = new Image();
          img.onload = function img_onload() {
            assert(img.complete, 'Image ' + name + ' could not be decoded');
            var canvas = document.createElement('canvas');
            canvas.width = img.width;
            canvas.height = img.height;
            var ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0);
            Module["preloadedImages"][name] = canvas;
            Browser.URLObject.revokeObjectURL(url);
            if (onload) onload(byteArray);
          };
          img.onerror = function img_onerror(event) {
            console.log('Image ' + url + ' could not be decoded');
            if (onerror) onerror();
          };
          img.src = url;
        };
        Module['preloadPlugins'].push(imagePlugin);
  
        var audioPlugin = {};
        audioPlugin['canHandle'] = function audioPlugin_canHandle(name) {
          return !Module.noAudioDecoding && name.substr(-4) in { '.ogg': 1, '.wav': 1, '.mp3': 1 };
        };
        audioPlugin['handle'] = function audioPlugin_handle(byteArray, name, onload, onerror) {
          var done = false;
          function finish(audio) {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = audio;
            if (onload) onload(byteArray);
          }
          function fail() {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = new Audio(); // empty shim
            if (onerror) onerror();
          }
          if (Browser.hasBlobConstructor) {
            try {
              var b = new Blob([byteArray], { type: Browser.getMimetype(name) });
            } catch(e) {
              return fail();
            }
            var url = Browser.URLObject.createObjectURL(b); // XXX we never revoke this!
            assert(typeof url == 'string', 'createObjectURL must return a url as a string');
            var audio = new Audio();
            audio.addEventListener('canplaythrough', function() { finish(audio) }, false); // use addEventListener due to chromium bug 124926
            audio.onerror = function audio_onerror(event) {
              if (done) return;
              console.log('warning: browser could not fully decode audio ' + name + ', trying slower base64 approach');
              function encode64(data) {
                var BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                var PAD = '=';
                var ret = '';
                var leftchar = 0;
                var leftbits = 0;
                for (var i = 0; i < data.length; i++) {
                  leftchar = (leftchar << 8) | data[i];
                  leftbits += 8;
                  while (leftbits >= 6) {
                    var curr = (leftchar >> (leftbits-6)) & 0x3f;
                    leftbits -= 6;
                    ret += BASE[curr];
                  }
                }
                if (leftbits == 2) {
                  ret += BASE[(leftchar&3) << 4];
                  ret += PAD + PAD;
                } else if (leftbits == 4) {
                  ret += BASE[(leftchar&0xf) << 2];
                  ret += PAD;
                }
                return ret;
              }
              audio.src = 'data:audio/x-' + name.substr(-3) + ';base64,' + encode64(byteArray);
              finish(audio); // we don't wait for confirmation this worked - but it's worth trying
            };
            audio.src = url;
            // workaround for chrome bug 124926 - we do not always get oncanplaythrough or onerror
            Browser.safeSetTimeout(function() {
              finish(audio); // try to use it even though it is not necessarily ready to play
            }, 10000);
          } else {
            return fail();
          }
        };
        Module['preloadPlugins'].push(audioPlugin);
  
        // Canvas event setup
  
        var canvas = Module['canvas'];
        function pointerLockChange() {
          Browser.pointerLock = document['pointerLockElement'] === canvas ||
                                document['mozPointerLockElement'] === canvas ||
                                document['webkitPointerLockElement'] === canvas ||
                                document['msPointerLockElement'] === canvas;
        }
        if (canvas) {
          // forced aspect ratio can be enabled by defining 'forcedAspectRatio' on Module
          // Module['forcedAspectRatio'] = 4 / 3;
          
          canvas.requestPointerLock = canvas['requestPointerLock'] ||
                                      canvas['mozRequestPointerLock'] ||
                                      canvas['webkitRequestPointerLock'] ||
                                      canvas['msRequestPointerLock'] ||
                                      function(){};
          canvas.exitPointerLock = document['exitPointerLock'] ||
                                   document['mozExitPointerLock'] ||
                                   document['webkitExitPointerLock'] ||
                                   document['msExitPointerLock'] ||
                                   function(){}; // no-op if function does not exist
          canvas.exitPointerLock = canvas.exitPointerLock.bind(document);
  
  
          document.addEventListener('pointerlockchange', pointerLockChange, false);
          document.addEventListener('mozpointerlockchange', pointerLockChange, false);
          document.addEventListener('webkitpointerlockchange', pointerLockChange, false);
          document.addEventListener('mspointerlockchange', pointerLockChange, false);
  
          if (Module['elementPointerLock']) {
            canvas.addEventListener("click", function(ev) {
              if (!Browser.pointerLock && canvas.requestPointerLock) {
                canvas.requestPointerLock();
                ev.preventDefault();
              }
            }, false);
          }
        }
      },createContext:function (canvas, useWebGL, setInModule, webGLContextAttributes) {
        if (useWebGL && Module.ctx && canvas == Module.canvas) return Module.ctx; // no need to recreate GL context if it's already been created for this canvas.
  
        var ctx;
        var contextHandle;
        if (useWebGL) {
          // For GLES2/desktop GL compatibility, adjust a few defaults to be different to WebGL defaults, so that they align better with the desktop defaults.
          var contextAttributes = {
            antialias: false,
            alpha: false
          };
  
          if (webGLContextAttributes) {
            for (var attribute in webGLContextAttributes) {
              contextAttributes[attribute] = webGLContextAttributes[attribute];
            }
          }
  
          contextHandle = GL.createContext(canvas, contextAttributes);
          if (contextHandle) {
            ctx = GL.getContext(contextHandle).GLctx;
          }
          // Set the background of the WebGL canvas to black
          canvas.style.backgroundColor = "black";
        } else {
          ctx = canvas.getContext('2d');
        }
  
        if (!ctx) return null;
  
        if (setInModule) {
          if (!useWebGL) assert(typeof GLctx === 'undefined', 'cannot set in module if GLctx is used, but we are a non-GL context that would replace it');
  
          Module.ctx = ctx;
          if (useWebGL) GL.makeContextCurrent(contextHandle);
          Module.useWebGL = useWebGL;
          Browser.moduleContextCreatedCallbacks.forEach(function(callback) { callback() });
          Browser.init();
        }
        return ctx;
      },destroyContext:function (canvas, useWebGL, setInModule) {},fullScreenHandlersInstalled:false,lockPointer:undefined,resizeCanvas:undefined,requestFullScreen:function (lockPointer, resizeCanvas, vrDevice) {
        Browser.lockPointer = lockPointer;
        Browser.resizeCanvas = resizeCanvas;
        Browser.vrDevice = vrDevice;
        if (typeof Browser.lockPointer === 'undefined') Browser.lockPointer = true;
        if (typeof Browser.resizeCanvas === 'undefined') Browser.resizeCanvas = false;
        if (typeof Browser.vrDevice === 'undefined') Browser.vrDevice = null;
  
        var canvas = Module['canvas'];
        function fullScreenChange() {
          Browser.isFullScreen = false;
          var canvasContainer = canvas.parentNode;
          if ((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
               document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
               document['fullScreenElement'] || document['fullscreenElement'] ||
               document['msFullScreenElement'] || document['msFullscreenElement'] ||
               document['webkitCurrentFullScreenElement']) === canvasContainer) {
            canvas.cancelFullScreen = document['cancelFullScreen'] ||
                                      document['mozCancelFullScreen'] ||
                                      document['webkitCancelFullScreen'] ||
                                      document['msExitFullscreen'] ||
                                      document['exitFullscreen'] ||
                                      function() {};
            canvas.cancelFullScreen = canvas.cancelFullScreen.bind(document);
            if (Browser.lockPointer) canvas.requestPointerLock();
            Browser.isFullScreen = true;
            if (Browser.resizeCanvas) Browser.setFullScreenCanvasSize();
          } else {
            
            // remove the full screen specific parent of the canvas again to restore the HTML structure from before going full screen
            canvasContainer.parentNode.insertBefore(canvas, canvasContainer);
            canvasContainer.parentNode.removeChild(canvasContainer);
            
            if (Browser.resizeCanvas) Browser.setWindowedCanvasSize();
          }
          if (Module['onFullScreen']) Module['onFullScreen'](Browser.isFullScreen);
          Browser.updateCanvasDimensions(canvas);
        }
  
        if (!Browser.fullScreenHandlersInstalled) {
          Browser.fullScreenHandlersInstalled = true;
          document.addEventListener('fullscreenchange', fullScreenChange, false);
          document.addEventListener('mozfullscreenchange', fullScreenChange, false);
          document.addEventListener('webkitfullscreenchange', fullScreenChange, false);
          document.addEventListener('MSFullscreenChange', fullScreenChange, false);
        }
  
        // create a new parent to ensure the canvas has no siblings. this allows browsers to optimize full screen performance when its parent is the full screen root
        var canvasContainer = document.createElement("div");
        canvas.parentNode.insertBefore(canvasContainer, canvas);
        canvasContainer.appendChild(canvas);
  
        // use parent of canvas as full screen root to allow aspect ratio correction (Firefox stretches the root to screen size)
        canvasContainer.requestFullScreen = canvasContainer['requestFullScreen'] ||
                                            canvasContainer['mozRequestFullScreen'] ||
                                            canvasContainer['msRequestFullscreen'] ||
                                           (canvasContainer['webkitRequestFullScreen'] ? function() { canvasContainer['webkitRequestFullScreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null);
  
        if (vrDevice) {
          canvasContainer.requestFullScreen({ vrDisplay: vrDevice });
        } else {
          canvasContainer.requestFullScreen();
        }
      },nextRAF:0,fakeRequestAnimationFrame:function (func) {
        // try to keep 60fps between calls to here
        var now = Date.now();
        if (Browser.nextRAF === 0) {
          Browser.nextRAF = now + 1000/60;
        } else {
          while (now + 2 >= Browser.nextRAF) { // fudge a little, to avoid timer jitter causing us to do lots of delay:0
            Browser.nextRAF += 1000/60;
          }
        }
        var delay = Math.max(Browser.nextRAF - now, 0);
        setTimeout(func, delay);
      },requestAnimationFrame:function requestAnimationFrame(func) {
        if (typeof window === 'undefined') { // Provide fallback to setTimeout if window is undefined (e.g. in Node.js)
          Browser.fakeRequestAnimationFrame(func);
        } else {
          if (!window.requestAnimationFrame) {
            window.requestAnimationFrame = window['requestAnimationFrame'] ||
                                           window['mozRequestAnimationFrame'] ||
                                           window['webkitRequestAnimationFrame'] ||
                                           window['msRequestAnimationFrame'] ||
                                           window['oRequestAnimationFrame'] ||
                                           Browser.fakeRequestAnimationFrame;
          }
          window.requestAnimationFrame(func);
        }
      },safeCallback:function (func) {
        return function() {
          if (!ABORT) return func.apply(null, arguments);
        };
      },allowAsyncCallbacks:true,queuedAsyncCallbacks:[],pauseAsyncCallbacks:function () {
        Browser.allowAsyncCallbacks = false;
      },resumeAsyncCallbacks:function () { // marks future callbacks as ok to execute, and synchronously runs any remaining ones right now
        Browser.allowAsyncCallbacks = true;
        if (Browser.queuedAsyncCallbacks.length > 0) {
          var callbacks = Browser.queuedAsyncCallbacks;
          Browser.queuedAsyncCallbacks = [];
          callbacks.forEach(function(func) {
            func();
          });
        }
      },safeRequestAnimationFrame:function (func) {
        return Browser.requestAnimationFrame(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } else {
            Browser.queuedAsyncCallbacks.push(func);
          }
        });
      },safeSetTimeout:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setTimeout(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } else {
            Browser.queuedAsyncCallbacks.push(func);
          }
        }, timeout);
      },safeSetInterval:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setInterval(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } // drop it on the floor otherwise, next interval will kick in
        }, timeout);
      },getMimetype:function (name) {
        return {
          'jpg': 'image/jpeg',
          'jpeg': 'image/jpeg',
          'png': 'image/png',
          'bmp': 'image/bmp',
          'ogg': 'audio/ogg',
          'wav': 'audio/wav',
          'mp3': 'audio/mpeg'
        }[name.substr(name.lastIndexOf('.')+1)];
      },getUserMedia:function (func) {
        if(!window.getUserMedia) {
          window.getUserMedia = navigator['getUserMedia'] ||
                                navigator['mozGetUserMedia'];
        }
        window.getUserMedia(func);
      },getMovementX:function (event) {
        return event['movementX'] ||
               event['mozMovementX'] ||
               event['webkitMovementX'] ||
               0;
      },getMovementY:function (event) {
        return event['movementY'] ||
               event['mozMovementY'] ||
               event['webkitMovementY'] ||
               0;
      },getMouseWheelDelta:function (event) {
        var delta = 0;
        switch (event.type) {
          case 'DOMMouseScroll': 
            delta = event.detail;
            break;
          case 'mousewheel': 
            delta = event.wheelDelta;
            break;
          case 'wheel': 
            delta = event['deltaY'];
            break;
          default:
            throw 'unrecognized mouse wheel event: ' + event.type;
        }
        return delta;
      },mouseX:0,mouseY:0,mouseMovementX:0,mouseMovementY:0,touches:{},lastTouches:{},calculateMouseEvent:function (event) { // event should be mousemove, mousedown or mouseup
        if (Browser.pointerLock) {
          // When the pointer is locked, calculate the coordinates
          // based on the movement of the mouse.
          // Workaround for Firefox bug 764498
          if (event.type != 'mousemove' &&
              ('mozMovementX' in event)) {
            Browser.mouseMovementX = Browser.mouseMovementY = 0;
          } else {
            Browser.mouseMovementX = Browser.getMovementX(event);
            Browser.mouseMovementY = Browser.getMovementY(event);
          }
          
          // check if SDL is available
          if (typeof SDL != "undefined") {
          	Browser.mouseX = SDL.mouseX + Browser.mouseMovementX;
          	Browser.mouseY = SDL.mouseY + Browser.mouseMovementY;
          } else {
          	// just add the mouse delta to the current absolut mouse position
          	// FIXME: ideally this should be clamped against the canvas size and zero
          	Browser.mouseX += Browser.mouseMovementX;
          	Browser.mouseY += Browser.mouseMovementY;
          }        
        } else {
          // Otherwise, calculate the movement based on the changes
          // in the coordinates.
          var rect = Module["canvas"].getBoundingClientRect();
          var cw = Module["canvas"].width;
          var ch = Module["canvas"].height;
  
          // Neither .scrollX or .pageXOffset are defined in a spec, but
          // we prefer .scrollX because it is currently in a spec draft.
          // (see: http://www.w3.org/TR/2013/WD-cssom-view-20131217/)
          var scrollX = ((typeof window.scrollX !== 'undefined') ? window.scrollX : window.pageXOffset);
          var scrollY = ((typeof window.scrollY !== 'undefined') ? window.scrollY : window.pageYOffset);
          // If this assert lands, it's likely because the browser doesn't support scrollX or pageXOffset
          // and we have no viable fallback.
          assert((typeof scrollX !== 'undefined') && (typeof scrollY !== 'undefined'), 'Unable to retrieve scroll position, mouse positions likely broken.');
  
          if (event.type === 'touchstart' || event.type === 'touchend' || event.type === 'touchmove') {
            var touch = event.touch;
            if (touch === undefined) {
              return; // the "touch" property is only defined in SDL
  
            }
            var adjustedX = touch.pageX - (scrollX + rect.left);
            var adjustedY = touch.pageY - (scrollY + rect.top);
  
            adjustedX = adjustedX * (cw / rect.width);
            adjustedY = adjustedY * (ch / rect.height);
  
            var coords = { x: adjustedX, y: adjustedY };
            
            if (event.type === 'touchstart') {
              Browser.lastTouches[touch.identifier] = coords;
              Browser.touches[touch.identifier] = coords;
            } else if (event.type === 'touchend' || event.type === 'touchmove') {
              var last = Browser.touches[touch.identifier];
              if (!last) last = coords;
              Browser.lastTouches[touch.identifier] = last;
              Browser.touches[touch.identifier] = coords;
            } 
            return;
          }
  
          var x = event.pageX - (scrollX + rect.left);
          var y = event.pageY - (scrollY + rect.top);
  
          // the canvas might be CSS-scaled compared to its backbuffer;
          // SDL-using content will want mouse coordinates in terms
          // of backbuffer units.
          x = x * (cw / rect.width);
          y = y * (ch / rect.height);
  
          Browser.mouseMovementX = x - Browser.mouseX;
          Browser.mouseMovementY = y - Browser.mouseY;
          Browser.mouseX = x;
          Browser.mouseY = y;
        }
      },xhrLoad:function (url, onload, onerror) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, true);
        xhr.responseType = 'arraybuffer';
        xhr.onload = function xhr_onload() {
          if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
            onload(xhr.response);
          } else {
            onerror();
          }
        };
        xhr.onerror = onerror;
        xhr.send(null);
      },asyncLoad:function (url, onload, onerror, noRunDep) {
        Browser.xhrLoad(url, function(arrayBuffer) {
          assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
          onload(new Uint8Array(arrayBuffer));
          if (!noRunDep) removeRunDependency('al ' + url);
        }, function(event) {
          if (onerror) {
            onerror();
          } else {
            throw 'Loading data file "' + url + '" failed.';
          }
        });
        if (!noRunDep) addRunDependency('al ' + url);
      },resizeListeners:[],updateResizeListeners:function () {
        var canvas = Module['canvas'];
        Browser.resizeListeners.forEach(function(listener) {
          listener(canvas.width, canvas.height);
        });
      },setCanvasSize:function (width, height, noUpdates) {
        var canvas = Module['canvas'];
        Browser.updateCanvasDimensions(canvas, width, height);
        if (!noUpdates) Browser.updateResizeListeners();
      },windowedWidth:0,windowedHeight:0,setFullScreenCanvasSize:function () {
        // check if SDL is available   
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags | 0x00800000; // set SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },setWindowedCanvasSize:function () {
        // check if SDL is available       
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags & ~0x00800000; // clear SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },updateCanvasDimensions:function (canvas, wNative, hNative) {
        if (wNative && hNative) {
          canvas.widthNative = wNative;
          canvas.heightNative = hNative;
        } else {
          wNative = canvas.widthNative;
          hNative = canvas.heightNative;
        }
        var w = wNative;
        var h = hNative;
        if (Module['forcedAspectRatio'] && Module['forcedAspectRatio'] > 0) {
          if (w/h < Module['forcedAspectRatio']) {
            w = Math.round(h * Module['forcedAspectRatio']);
          } else {
            h = Math.round(w / Module['forcedAspectRatio']);
          }
        }
        if (((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
             document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
             document['fullScreenElement'] || document['fullscreenElement'] ||
             document['msFullScreenElement'] || document['msFullscreenElement'] ||
             document['webkitCurrentFullScreenElement']) === canvas.parentNode) && (typeof screen != 'undefined')) {
           var factor = Math.min(screen.width / w, screen.height / h);
           w = Math.round(w * factor);
           h = Math.round(h * factor);
        }
        if (Browser.resizeCanvas) {
          if (canvas.width  != w) canvas.width  = w;
          if (canvas.height != h) canvas.height = h;
          if (typeof canvas.style != 'undefined') {
            canvas.style.removeProperty( "width");
            canvas.style.removeProperty("height");
          }
        } else {
          if (canvas.width  != wNative) canvas.width  = wNative;
          if (canvas.height != hNative) canvas.height = hNative;
          if (typeof canvas.style != 'undefined') {
            if (w != wNative || h != hNative) {
              canvas.style.setProperty( "width", w + "px", "important");
              canvas.style.setProperty("height", h + "px", "important");
            } else {
              canvas.style.removeProperty( "width");
              canvas.style.removeProperty("height");
            }
          }
        }
      },wgetRequests:{},nextWgetRequestHandle:0,getNextWgetRequestHandle:function () {
        var handle = Browser.nextWgetRequestHandle;
        Browser.nextWgetRequestHandle++;
        return handle;
      }};
  
  
  function _malloc(bytes) {
      /* Over-allocate to make sure it is byte-aligned by 8.
       * This will leak memory, but this is only the dummy
       * implementation (replaced by dlmalloc normally) so
       * not an issue.
       */
      var ptr = Runtime.dynamicAlloc(bytes + 8);
      return (ptr+8) & 0xFFFFFFF8;
    }
  Module["_malloc"] = _malloc;
  
  function _free() {
  }
  Module["_free"] = _free;
  
  
  
  
  
  
  function _SDL_CloseAudio() {
      if (SDL.audio) {
        _SDL_PauseAudio(1);
        _free(SDL.audio.buffer);
        SDL.audio = null;
        SDL.allocateChannels(0);
      }
    }
  
  
  
  
  
  
  
  
  
  
  
  
  
  var _environ=allocate(1, "i32*", ALLOC_STATIC);var ___environ=_environ;function ___buildEnvironment(env) {
      // WARNING: Arbitrary limit!
      var MAX_ENV_VALUES = 64;
      var TOTAL_ENV_SIZE = 1024;
  
      // Statically allocate memory for the environment.
      var poolPtr;
      var envPtr;
      if (!___buildEnvironment.called) {
        ___buildEnvironment.called = true;
        // Set default values. Use string keys for Closure Compiler compatibility.
        ENV['USER'] = ENV['LOGNAME'] = 'web_user';
        ENV['PATH'] = '/';
        ENV['PWD'] = '/';
        ENV['HOME'] = '/home/web_user';
        ENV['LANG'] = 'C';
        ENV['_'] = Module['thisProgram'];
        // Allocate memory.
        poolPtr = allocate(TOTAL_ENV_SIZE, 'i8', ALLOC_STATIC);
        envPtr = allocate(MAX_ENV_VALUES * 4,
                          'i8*', ALLOC_STATIC);
        HEAP32[((envPtr)>>2)]=poolPtr;
        HEAP32[((_environ)>>2)]=envPtr;
      } else {
        envPtr = HEAP32[((_environ)>>2)];
        poolPtr = HEAP32[((envPtr)>>2)];
      }
  
      // Collect key=value lines.
      var strings = [];
      var totalSize = 0;
      for (var key in env) {
        if (typeof env[key] === 'string') {
          var line = key + '=' + env[key];
          strings.push(line);
          totalSize += line.length;
        }
      }
      if (totalSize > TOTAL_ENV_SIZE) {
        throw new Error('Environment size exceeded TOTAL_ENV_SIZE!');
      }
  
      // Make new.
      var ptrSize = 4;
      for (var i = 0; i < strings.length; i++) {
        var line = strings[i];
        writeAsciiToMemory(line, poolPtr);
        HEAP32[(((envPtr)+(i * ptrSize))>>2)]=poolPtr;
        poolPtr += line.length + 1;
      }
      HEAP32[(((envPtr)+(strings.length * ptrSize))>>2)]=0;
    }var ENV={};function _getenv(name) {
      // char *getenv(const char *name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/getenv.html
      if (name === 0) return 0;
      name = Pointer_stringify(name);
      if (!ENV.hasOwnProperty(name)) return 0;
  
      if (_getenv.ret) _free(_getenv.ret);
      _getenv.ret = allocate(intArrayFromString(ENV[name]), 'i8', ALLOC_NORMAL);
      return _getenv.ret;
    }
  
  function _putenv(string) {
      // int putenv(char *string);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/putenv.html
      // WARNING: According to the standard (and the glibc implementation), the
      //          string is taken by reference so future changes are reflected.
      //          We copy it instead, possibly breaking some uses.
      if (string === 0) {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return -1;
      }
      string = Pointer_stringify(string);
      var splitPoint = string.indexOf('=')
      if (string === '' || string.indexOf('=') === -1) {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return -1;
      }
      var name = string.slice(0, splitPoint);
      var value = string.slice(splitPoint + 1);
      if (!(name in ENV) || ENV[name] !== value) {
        ENV[name] = value;
        ___buildEnvironment(ENV);
      }
      return 0;
    }
  
  function _SDL_RWFromConstMem(mem, size) {
      var id = SDL.rwops.length; // TODO: recycle ids when they are null
      SDL.rwops.push({ bytes: mem, count: size });
      return id;
    }function _TTF_FontHeight(font) {
      var fontData = SDL.fonts[font];
      return fontData.size;
    }function _TTF_SizeText(font, text, w, h) {
      var fontData = SDL.fonts[font];
      if (w) {
        HEAP32[((w)>>2)]=SDL.estimateTextWidth(fontData, Pointer_stringify(text));
      }
      if (h) {
        HEAP32[((h)>>2)]=fontData.size;
      }
      return 0;
    }function _TTF_RenderText_Solid(font, text, color) {
      // XXX the font and color are ignored
      text = Pointer_stringify(text) || ' '; // if given an empty string, still return a valid surface
      var fontData = SDL.fonts[font];
      var w = SDL.estimateTextWidth(fontData, text);
      var h = fontData.size;
      var color = SDL.loadColorToCSSRGB(color); // XXX alpha breaks fonts?
      var fontString = h + 'px ' + fontData.name;
      var surf = SDL.makeSurface(w, h, 0, false, 'text:' + text); // bogus numbers..
      var surfData = SDL.surfaces[surf];
      surfData.ctx.save();
      surfData.ctx.fillStyle = color;
      surfData.ctx.font = fontString;
      surfData.ctx.textBaseline = 'top';
      surfData.ctx.fillText(text, 0, 0);
      surfData.ctx.restore();
      return surf;
    }function _Mix_HaltMusic() {
      var audio = SDL.music.audio;
      if (audio) {
        audio.src = audio.src; // rewind <media> element
        audio.currentPosition = 0; // rewind Web Audio graph playback.
        audio.pause();
      }
      SDL.music.audio = null;
      if (SDL.hookMusicFinished) {
        Runtime.dynCall('v', SDL.hookMusicFinished);
      }
      return 0;
    }function _Mix_PlayMusic(id, loops) {
      // Pause old music if it exists.
      if (SDL.music.audio) {
        if (!SDL.music.audio.paused) Module.printErr('Music is already playing. ' + SDL.music.source);
        SDL.music.audio.pause();
      }
      var info = SDL.audios[id];
      var audio;
      if (info.webAudio) { // Play via Web Audio API
        // Create an instance of the WebAudio object.
        audio = {};
        audio.resource = info; // This new webAudio object is an instance that refers to this existing resource.
        audio.paused = false;
        audio.currentPosition = 0;
        audio.play = function() { SDL.playWebAudio(this); }
        audio.pause = function() { SDL.pauseWebAudio(this); }
      } else if (info.audio) { // Play via the <audio> element
        audio = info.audio;
      }
      audio['onended'] = function() { if (SDL.music.audio == this) _Mix_HaltMusic(); } // will send callback
      audio.loop = loops != 0; // TODO: handle N loops for finite N
      audio.volume = SDL.music.volume;
      SDL.music.audio = audio;
      audio.play();
      return 0;
    }function _Mix_FreeChunk(id) {
      SDL.audios[id] = null;
    }function _Mix_LoadWAV_RW(rwopsID, freesrc) {
      var rwops = SDL.rwops[rwopsID];
  
  
      if (rwops === undefined)
        return 0;
  
      var filename = '';
      var audio;
      var webAudio;
      var bytes;
  
      if (rwops.filename !== undefined) {
        filename = PATH.resolve(rwops.filename);
        var raw = Module["preloadedAudios"][filename];
        if (!raw) {
          if (raw === null) Module.printErr('Trying to reuse preloaded audio, but freePreloadedMediaOnUse is set!');
          if (!Module.noAudioDecoding) Runtime.warnOnce('Cannot find preloaded audio ' + filename);
  
          // see if we can read the file-contents from the in-memory FS
          try {
            bytes = FS.readFile(filename);
          } catch (e) {
            Module.printErr('Couldn\'t find file for: ' + filename);
            return 0;
          }
        }
        if (Module['freePreloadedMediaOnUse']) {
          Module["preloadedAudios"][filename] = null;
        }
        audio = raw;
      }
      else if (rwops.bytes !== undefined) {
        // For Web Audio context buffer decoding, we must make a clone of the audio data, but for <media> element,
        // a view to existing data is sufficient.
        if (SDL.webAudioAvailable()) bytes = HEAPU8.buffer.slice(rwops.bytes, rwops.bytes + rwops.count);
        else bytes = HEAPU8.subarray(rwops.bytes, rwops.bytes + rwops.count);
      }
      else {
        return 0;
      }
  
      var arrayBuffer = bytes ? bytes.buffer || bytes : bytes;
  
      // To allow user code to work around browser bugs with audio playback on <audio> elements an Web Audio, enable
      // the user code to hook in a callback to decide on a file basis whether each file should use Web Audio or <audio> for decoding and playback.
      // In particular, see https://bugzilla.mozilla.org/show_bug.cgi?id=654787 and ?id=1012801 for tradeoffs.
      var canPlayWithWebAudio = Module['SDL_canPlayWithWebAudio'] === undefined || Module['SDL_canPlayWithWebAudio'](filename, arrayBuffer);
  
      if (bytes !== undefined && SDL.webAudioAvailable() && canPlayWithWebAudio) {
        audio = undefined;
        webAudio = {};
        // The audio decoding process is asynchronous, which gives trouble if user code plays the audio data back immediately
        // after loading. Therefore prepare an array of callback handlers to run when this audio decoding is complete, which
        // will then start the playback (with some delay).
        webAudio.onDecodeComplete = []; // While this member array exists, decoding hasn't finished yet.
        function onDecodeComplete(data) {
          webAudio.decodedBuffer = data;
          // Call all handlers that were waiting for this decode to finish, and clear the handler list.
          webAudio.onDecodeComplete.forEach(function(e) { e(); });
          webAudio.onDecodeComplete = undefined; // Don't allow more callback handlers since audio has finished decoding.
        }
  
        SDL.audioContext['decodeAudioData'](arrayBuffer, onDecodeComplete);
      } else if (audio === undefined && bytes) {
        // Here, we didn't find a preloaded audio but we either were passed a filepath for
        // which we loaded bytes, or we were passed some bytes
        var blob = new Blob([bytes], {type: rwops.mimetype});
        var url = URL.createObjectURL(blob);
        audio = new Audio();
        audio.src = url;
        audio.mozAudioChannelType = 'content'; // bugzilla 910340
      }
  
      var id = SDL.audios.length;
      // Keep the loaded audio in the audio arrays, ready for playback
      SDL.audios.push({
        source: filename,
        audio: audio, // Points to the <audio> element, if loaded
        webAudio: webAudio // Points to a Web Audio -specific resource object, if loaded
      });
      return id;
    }function _Mix_PlayChannel(channel, id, loops) {
      // TODO: handle fixed amount of N loops. Currently loops either 0 or infinite times.
  
      // Get the audio element associated with the ID
      var info = SDL.audios[id];
      if (!info) return -1;
      if (!info.audio && !info.webAudio) return -1;
  
      // If the user asks us to allocate a channel automatically, get the first
      // free one.
      if (channel == -1) {
        for (var i = SDL.channelMinimumNumber; i < SDL.numChannels; i++) {
          if (!SDL.channels[i].audio) {
            channel = i;
            break;
          }
        }
        if (channel == -1) {
          Module.printErr('All ' + SDL.numChannels + ' channels in use!');
          return -1;
        }
      }
      var channelInfo = SDL.channels[channel];
      var audio;
      if (info.webAudio) {
        // Create an instance of the WebAudio object.
        audio = {};
        audio.resource = info; // This new object is an instance that refers to this existing resource.
        audio.paused = false;
        audio.currentPosition = 0;
        // Make our instance look similar to the instance of a <media> to make api simple.
        audio.play = function() { SDL.playWebAudio(this); }
        audio.pause = function() { SDL.pauseWebAudio(this); }
      } else {
        // We clone the audio node to utilize the preloaded audio buffer, since
        // the browser has already preloaded the audio file.
        audio = info.audio.cloneNode(true);
        audio.numChannels = info.audio.numChannels;
        audio.frequency = info.audio.frequency;
      }
      audio['onended'] = function SDL_audio_onended() { // TODO: cache these
        if (channelInfo.audio == this) { channelInfo.audio.paused = true; channelInfo.audio = null; }
        if (SDL.channelFinished) Runtime.getFuncWrapper(SDL.channelFinished, 'vi')(channel);
      }
      channelInfo.audio = audio;
      // TODO: handle N loops. Behavior matches Mix_PlayMusic
      audio.loop = loops != 0;
      audio.volume = channelInfo.volume;
      audio.play();
      return channel;
    }function _SDL_LockSurface(surf) {
      var surfData = SDL.surfaces[surf];
  
      surfData.locked++;
      if (surfData.locked > 1) return 0;
  
      if (!surfData.buffer) {
        surfData.buffer = _malloc(surfData.width * surfData.height * 4);
        HEAP32[(((surf)+(20))>>2)]=surfData.buffer;
      }
  
      // Mark in C/C++-accessible SDL structure
      // SDL_Surface has the following fields: Uint32 flags, SDL_PixelFormat *format; int w, h; Uint16 pitch; void *pixels; ...
      // So we have fields all of the same size, and 5 of them before us.
      // TODO: Use macros like in library.js
      HEAP32[(((surf)+(20))>>2)]=surfData.buffer;
  
      if (surf == SDL.screen && Module.screenIsReadOnly && surfData.image) return 0;
  
      if (SDL.defaults.discardOnLock) {
        if (!surfData.image) {
          surfData.image = surfData.ctx.createImageData(surfData.width, surfData.height);
        }
        if (!SDL.defaults.opaqueFrontBuffer) return;
      } else {
        surfData.image = surfData.ctx.getImageData(0, 0, surfData.width, surfData.height);
      }
  
      // Emulate desktop behavior and kill alpha values on the locked surface. (very costly!) Set SDL.defaults.opaqueFrontBuffer = false
      // if you don't want this.
      if (surf == SDL.screen && SDL.defaults.opaqueFrontBuffer) {
        var data = surfData.image.data;
        var num = data.length;
        for (var i = 0; i < num/4; i++) {
          data[i*4+3] = 255; // opacity, as canvases blend alpha
        }
      }
  
      if (SDL.defaults.copyOnLock && !SDL.defaults.discardOnLock) {
        // Copy pixel data to somewhere accessible to 'C/C++'
        if (surfData.isFlagSet(0x00200000 /* SDL_HWPALETTE */)) {
          // If this is neaded then
          // we should compact the data from 32bpp to 8bpp index.
          // I think best way to implement this is use
          // additional colorMap hash (color->index).
          // Something like this:
          //
          // var size = surfData.width * surfData.height;
          // var data = '';
          // for (var i = 0; i<size; i++) {
          //   var color = SDL.translateRGBAToColor(
          //     surfData.image.data[i*4   ], 
          //     surfData.image.data[i*4 +1], 
          //     surfData.image.data[i*4 +2], 
          //     255);
          //   var index = surfData.colorMap[color];
          //   HEAP8[(((surfData.buffer)+(i))>>0)]=index;
          // }
          throw 'CopyOnLock is not supported for SDL_LockSurface with SDL_HWPALETTE flag set' + new Error().stack;
        } else {
          HEAPU8.set(surfData.image.data, surfData.buffer);
        }
      }
  
      return 0;
    }
  
  function _SDL_FreeRW(rwopsID) {
      SDL.rwops[rwopsID] = null;
      while (SDL.rwops.length > 0 && SDL.rwops[SDL.rwops.length-1] === null) {
        SDL.rwops.pop();
      }
    }function _IMG_Load_RW(rwopsID, freeSrc) {
      try {
        // stb_image integration support
        function cleanup() {
          if (rwops && freeSrc) _SDL_FreeRW(rwopsID);
        };
        function addCleanup(func) {
          var old = cleanup;
          cleanup = function added_cleanup() {
            old();
            func();
          }
        }
        function callStbImage(func, params) {
          var x = Module['_malloc'](4);
          var y = Module['_malloc'](4);
          var comp = Module['_malloc'](4);
          addCleanup(function() {
            Module['_free'](x);
            Module['_free'](y);
            Module['_free'](comp);
            if (data) Module['_stbi_image_free'](data);
          });
          var data = Module['_' + func].apply(null, params.concat([x, y, comp, 0]));
          if (!data) return null;
          return {
            rawData: true,
            data: data,
            width: HEAP32[((x)>>2)],
            height: HEAP32[((y)>>2)],
            size: HEAP32[((x)>>2)] * HEAP32[((y)>>2)] * HEAP32[((comp)>>2)],
            bpp: HEAP32[((comp)>>2)]
          };
        }
  
        var rwops = SDL.rwops[rwopsID];
        if (rwops === undefined) {
          return 0;
        }
  
        var filename = rwops.filename;
        if (filename === undefined) {
          Runtime.warnOnce('Only file names that have been preloaded are supported for IMG_Load_RW. Consider using STB_IMAGE=1 if you want synchronous image decoding (see settings.js), or package files with --use-preload-plugins');
          return 0;
        }
  
        if (!raw) {
          filename = PATH.resolve(filename);
          var raw = Module["preloadedImages"][filename];
          if (!raw) {
            if (raw === null) Module.printErr('Trying to reuse preloaded image, but freePreloadedMediaOnUse is set!');
            Runtime.warnOnce('Cannot find preloaded image ' + filename);
            Runtime.warnOnce('Cannot find preloaded image ' + filename + '. Consider using STB_IMAGE=1 if you want synchronous image decoding (see settings.js), or package files with --use-preload-plugins');
            return 0;
          } else if (Module['freePreloadedMediaOnUse']) {
            Module["preloadedImages"][filename] = null;
          }
        }
  
        var surf = SDL.makeSurface(raw.width, raw.height, 0, false, 'load:' + filename);
        var surfData = SDL.surfaces[surf];
        surfData.ctx.globalCompositeOperation = "copy";
        if (!raw.rawData) {
          surfData.ctx.drawImage(raw, 0, 0, raw.width, raw.height, 0, 0, raw.width, raw.height);
        } else {
          var imageData = surfData.ctx.getImageData(0, 0, surfData.width, surfData.height);
          if (raw.bpp == 4) {
            // rgba
            imageData.data.set(HEAPU8.subarray((raw.data),(raw.data+raw.size)));
          } else if (raw.bpp == 3) {
            // rgb
            var pixels = raw.size/3;
            var data = imageData.data;
            var sourcePtr = raw.data;
            var destPtr = 0;
            for (var i = 0; i < pixels; i++) {
              data[destPtr++] = HEAPU8[((sourcePtr++)>>0)];
              data[destPtr++] = HEAPU8[((sourcePtr++)>>0)];
              data[destPtr++] = HEAPU8[((sourcePtr++)>>0)];
              data[destPtr++] = 255;
            }
          } else if (raw.bpp == 1) {
            // grayscale
            var pixels = raw.size;
            var data = imageData.data;
            var sourcePtr = raw.data;
            var destPtr = 0;
            for (var i = 0; i < pixels; i++) {
              var value = HEAPU8[((sourcePtr++)>>0)];
              data[destPtr++] = value;
              data[destPtr++] = value;
              data[destPtr++] = value;
              data[destPtr++] = 255;
            }
          } else {
            Module.printErr('cannot handle bpp ' + raw.bpp);
            return 0;
          }
          surfData.ctx.putImageData(imageData, 0, 0);
        }
        surfData.ctx.globalCompositeOperation = "source-over";
        // XXX SDL does not specify that loaded images must have available pixel data, in fact
        //     there are cases where you just want to blit them, so you just need the hardware
        //     accelerated version. However, code everywhere seems to assume that the pixels
        //     are in fact available, so we retrieve it here. This does add overhead though.
        _SDL_LockSurface(surf);
        surfData.locked--; // The surface is not actually locked in this hack
        if (SDL.GL) {
          // After getting the pixel data, we can free the canvas and context if we do not need to do 2D canvas blitting
          surfData.canvas = surfData.ctx = null;
        }
        return surf;
      } finally {
        cleanup();
      }
    }
  
  function _SDL_RWFromFile(_name, mode) {
      var id = SDL.rwops.length; // TODO: recycle ids when they are null
      var name = Pointer_stringify(_name)
      SDL.rwops.push({ filename: name, mimetype: Browser.getMimetype(name) });
      return id;
    }function _IMG_Load(filename){
      var rwops = _SDL_RWFromFile(filename);
      var result = _IMG_Load_RW(rwops, 1);
      return result;
    }function _SDL_UpperBlitScaled(src, srcrect, dst, dstrect) {
      return SDL.blitSurface(src, srcrect, dst, dstrect, true);
    }function _SDL_UpperBlit(src, srcrect, dst, dstrect) {
      return SDL.blitSurface(src, srcrect, dst, dstrect, false);
    }function _SDL_GetTicks() {
      return (Date.now() - SDL.startTime)|0;
    }var SDL={defaults:{width:320,height:200,copyOnLock:true,discardOnLock:false,opaqueFrontBuffer:true},version:null,surfaces:{},canvasPool:[],events:[],fonts:[null],audios:[null],rwops:[null],music:{audio:null,volume:1},mixerFrequency:22050,mixerFormat:32784,mixerNumChannels:2,mixerChunkSize:1024,channelMinimumNumber:0,GL:false,glAttributes:{0:3,1:3,2:2,3:0,4:0,5:1,6:16,7:0,8:0,9:0,10:0,11:0,12:0,13:0,14:0,15:1,16:0,17:0,18:0},keyboardState:null,keyboardMap:{},canRequestFullscreen:false,isRequestingFullscreen:false,textInput:false,startTime:null,initFlags:0,buttonState:0,modState:0,DOMButtons:[0,0,0],DOMEventToSDLEvent:{},TOUCH_DEFAULT_ID:0,eventHandler:null,eventHandlerContext:null,eventHandlerTemp:0,keyCodes:{16:1249,17:1248,18:1250,20:1081,33:1099,34:1102,35:1101,36:1098,37:1104,38:1106,39:1103,40:1105,44:316,45:1097,46:127,91:1251,93:1125,96:1122,97:1113,98:1114,99:1115,100:1116,101:1117,102:1118,103:1119,104:1120,105:1121,106:1109,107:1111,109:1110,110:1123,111:1108,112:1082,113:1083,114:1084,115:1085,116:1086,117:1087,118:1088,119:1089,120:1090,121:1091,122:1092,123:1093,124:1128,125:1129,126:1130,127:1131,128:1132,129:1133,130:1134,131:1135,132:1136,133:1137,134:1138,135:1139,144:1107,160:94,161:33,162:34,163:35,164:36,165:37,166:38,167:95,168:40,169:41,170:42,171:43,172:124,173:45,174:123,175:125,176:126,181:127,182:129,183:128,188:44,190:46,191:47,192:96,219:91,220:92,221:93,222:39,224:1251},scanCodes:{8:42,9:43,13:40,27:41,32:44,35:204,39:53,44:54,46:55,47:56,48:39,49:30,50:31,51:32,52:33,53:34,54:35,55:36,56:37,57:38,58:203,59:51,61:46,91:47,92:49,93:48,96:52,97:4,98:5,99:6,100:7,101:8,102:9,103:10,104:11,105:12,106:13,107:14,108:15,109:16,110:17,111:18,112:19,113:20,114:21,115:22,116:23,117:24,118:25,119:26,120:27,121:28,122:29,127:76,305:224,308:226,316:70},loadRect:function (rect) {
        return {
          x: HEAP32[((rect + 0)>>2)],
          y: HEAP32[((rect + 4)>>2)],
          w: HEAP32[((rect + 8)>>2)],
          h: HEAP32[((rect + 12)>>2)]
        };
      },updateRect:function (rect, r) {
        HEAP32[((rect)>>2)]=r.x;
        HEAP32[(((rect)+(4))>>2)]=r.y;
        HEAP32[(((rect)+(8))>>2)]=r.w;
        HEAP32[(((rect)+(12))>>2)]=r.h;
      },intersectionOfRects:function (first, second) {
        var leftX = Math.max(first.x, second.x);
        var leftY = Math.max(first.y, second.y);
        var rightX = Math.min(first.x + first.w, second.x + second.w);
        var rightY = Math.min(first.y + first.h, second.y + second.h);
  
        return {
          x: leftX,
          y: leftY,
          w: Math.max(leftX, rightX) - leftX,
          h: Math.max(leftY, rightY) - leftY
        }
      },checkPixelFormat:function (fmt) {
        // Canvas screens are always RGBA.
        var format = HEAP32[((fmt)>>2)];
        if (format != -2042224636) {
          Runtime.warnOnce('Unsupported pixel format!');
        }
      },loadColorToCSSRGB:function (color) {
        var rgba = HEAP32[((color)>>2)];
        return 'rgb(' + (rgba&255) + ',' + ((rgba >> 8)&255) + ',' + ((rgba >> 16)&255) + ')';
      },loadColorToCSSRGBA:function (color) {
        var rgba = HEAP32[((color)>>2)];
        return 'rgba(' + (rgba&255) + ',' + ((rgba >> 8)&255) + ',' + ((rgba >> 16)&255) + ',' + (((rgba >> 24)&255)/255) + ')';
      },translateColorToCSSRGBA:function (rgba) {
        return 'rgba(' + (rgba&0xff) + ',' + (rgba>>8 & 0xff) + ',' + (rgba>>16 & 0xff) + ',' + (rgba>>>24)/0xff + ')';
      },translateRGBAToCSSRGBA:function (r, g, b, a) {
        return 'rgba(' + (r&0xff) + ',' + (g&0xff) + ',' + (b&0xff) + ',' + (a&0xff)/255 + ')';
      },translateRGBAToColor:function (r, g, b, a) {
        return r | g << 8 | b << 16 | a << 24;
      },makeSurface:function (width, height, flags, usePageCanvas, source, rmask, gmask, bmask, amask) {
        flags = flags || 0;
        var is_SDL_HWSURFACE = flags & 0x00000001;
        var is_SDL_HWPALETTE = flags & 0x00200000;
        var is_SDL_OPENGL = flags & 0x04000000;
  
        var surf = _malloc(60);
        var pixelFormat = _malloc(44);
        //surface with SDL_HWPALETTE flag is 8bpp surface (1 byte)
        var bpp = is_SDL_HWPALETTE ? 1 : 4;
        var buffer = 0;
  
        // preemptively initialize this for software surfaces,
        // otherwise it will be lazily initialized inside of SDL_LockSurface
        if (!is_SDL_HWSURFACE && !is_SDL_OPENGL) {
          buffer = _malloc(width * height * 4);
        }
  
        HEAP32[((surf)>>2)]=flags;
        HEAP32[(((surf)+(4))>>2)]=pixelFormat;
        HEAP32[(((surf)+(8))>>2)]=width;
        HEAP32[(((surf)+(12))>>2)]=height;
        HEAP32[(((surf)+(16))>>2)]=width * bpp;  // assuming RGBA or indexed for now,
                                                                                          // since that is what ImageData gives us in browsers
        HEAP32[(((surf)+(20))>>2)]=buffer;
  
        HEAP32[(((surf)+(36))>>2)]=0;
        HEAP32[(((surf)+(40))>>2)]=0;
        HEAP32[(((surf)+(44))>>2)]=Module["canvas"].width;
        HEAP32[(((surf)+(48))>>2)]=Module["canvas"].height;
  
        HEAP32[(((surf)+(56))>>2)]=1;
  
        HEAP32[((pixelFormat)>>2)]=-2042224636;
        HEAP32[(((pixelFormat)+(4))>>2)]=0;// TODO
        HEAP8[(((pixelFormat)+(8))>>0)]=bpp * 8;
        HEAP8[(((pixelFormat)+(9))>>0)]=bpp;
  
        HEAP32[(((pixelFormat)+(12))>>2)]=rmask || 0x000000ff;
        HEAP32[(((pixelFormat)+(16))>>2)]=gmask || 0x0000ff00;
        HEAP32[(((pixelFormat)+(20))>>2)]=bmask || 0x00ff0000;
        HEAP32[(((pixelFormat)+(24))>>2)]=amask || 0xff000000;
  
        // Decide if we want to use WebGL or not
        SDL.GL = SDL.GL || is_SDL_OPENGL;
        var canvas;
        if (!usePageCanvas) {
          if (SDL.canvasPool.length > 0) {
            canvas = SDL.canvasPool.pop();
          } else {
            canvas = document.createElement('canvas');
          }
          canvas.width = width;
          canvas.height = height;
        } else {
          canvas = Module['canvas'];
        }
  
        var webGLContextAttributes = {
          antialias: ((SDL.glAttributes[13 /*SDL_GL_MULTISAMPLEBUFFERS*/] != 0) && (SDL.glAttributes[14 /*SDL_GL_MULTISAMPLESAMPLES*/] > 1)),
          depth: (SDL.glAttributes[6 /*SDL_GL_DEPTH_SIZE*/] > 0),
          stencil: (SDL.glAttributes[7 /*SDL_GL_STENCIL_SIZE*/] > 0)
        };
        
        var ctx = Browser.createContext(canvas, is_SDL_OPENGL, usePageCanvas, webGLContextAttributes);
              
        SDL.surfaces[surf] = {
          width: width,
          height: height,
          canvas: canvas,
          ctx: ctx,
          surf: surf,
          buffer: buffer,
          pixelFormat: pixelFormat,
          alpha: 255,
          flags: flags,
          locked: 0,
          usePageCanvas: usePageCanvas,
          source: source,
  
          isFlagSet: function(flag) {
            return flags & flag;
          }
        };
  
        return surf;
      },copyIndexedColorData:function (surfData, rX, rY, rW, rH) {
        // HWPALETTE works with palette
        // setted by SDL_SetColors
        if (!surfData.colors) {
          return;
        }
        
        var fullWidth  = Module['canvas'].width;
        var fullHeight = Module['canvas'].height;
  
        var startX  = rX || 0;
        var startY  = rY || 0;
        var endX    = (rW || (fullWidth - startX)) + startX;
        var endY    = (rH || (fullHeight - startY)) + startY;
        
        var buffer  = surfData.buffer;
  
        if (!surfData.image.data32) {
          surfData.image.data32 = new Uint32Array(surfData.image.data.buffer);
        }
        var data32   = surfData.image.data32;
  
        var colors32 = surfData.colors32;
  
        for (var y = startY; y < endY; ++y) {
          var base = y * fullWidth;
          for (var x = startX; x < endX; ++x) {
            data32[base + x] = colors32[HEAPU8[((buffer + base + x)>>0)]];
          }
        }
      },freeSurface:function (surf) {
        var refcountPointer = surf + 56;
        var refcount = HEAP32[((refcountPointer)>>2)];
        if (refcount > 1) {
          HEAP32[((refcountPointer)>>2)]=refcount - 1;
          return;
        }
  
        var info = SDL.surfaces[surf];
        if (!info.usePageCanvas && info.canvas) SDL.canvasPool.push(info.canvas);
        if (info.buffer) _free(info.buffer);
        _free(info.pixelFormat);
        _free(surf);
        SDL.surfaces[surf] = null;
  
        if (surf === SDL.screen) {
          SDL.screen = null;
        }
      },blitSurface__deps:["SDL_LockSurface"],blitSurface:function (src, srcrect, dst, dstrect, scale) {
        var srcData = SDL.surfaces[src];
        var dstData = SDL.surfaces[dst];
        var sr, dr;
        if (srcrect) {
          sr = SDL.loadRect(srcrect);
        } else {
          sr = { x: 0, y: 0, w: srcData.width, h: srcData.height };
        }
        if (dstrect) {
          dr = SDL.loadRect(dstrect);
        } else {
          dr = { x: 0, y: 0, w: srcData.width, h: srcData.height };
        }
        if (dstData.clipRect) {
          var widthScale = (!scale || sr.w === 0) ? 1 : sr.w / dr.w;
          var heightScale = (!scale || sr.h === 0) ? 1 : sr.h / dr.h;
          
          dr = SDL.intersectionOfRects(dstData.clipRect, dr);
          
          sr.w = dr.w * widthScale;
          sr.h = dr.h * heightScale;
          
          if (dstrect) {
            SDL.updateRect(dstrect, dr);
          }
        }
        var blitw, blith;
        if (scale) {
          blitw = dr.w; blith = dr.h;
        } else {
          blitw = sr.w; blith = sr.h;
        }
        if (sr.w === 0 || sr.h === 0 || blitw === 0 || blith === 0) {
          return 0;
        }
        var oldAlpha = dstData.ctx.globalAlpha;
        dstData.ctx.globalAlpha = srcData.alpha/255;
        dstData.ctx.drawImage(srcData.canvas, sr.x, sr.y, sr.w, sr.h, dr.x, dr.y, blitw, blith);
        dstData.ctx.globalAlpha = oldAlpha;
        if (dst != SDL.screen) {
          // XXX As in IMG_Load, for compatibility we write out |pixels|
          Runtime.warnOnce('WARNING: copying canvas data to memory for compatibility');
          _SDL_LockSurface(dst);
          dstData.locked--; // The surface is not actually locked in this hack
        }
        return 0;
      },downFingers:{},savedKeydown:null,receiveEvent:function (event) {
        function unpressAllPressedKeys() {
          // Un-press all pressed keys: TODO
          for (var code in SDL.keyboardMap) {
            SDL.events.push({
              type: 'keyup',
              keyCode: SDL.keyboardMap[code]
            });
          }
        };
        switch(event.type) {
          case 'touchstart': case 'touchmove': {
            event.preventDefault();
  
            var touches = [];
            
            // Clear out any touchstart events that we've already processed
            if (event.type === 'touchstart') {
              for (var i = 0; i < event.touches.length; i++) {
                var touch = event.touches[i];
                if (SDL.downFingers[touch.identifier] != true) {
                  SDL.downFingers[touch.identifier] = true;
                  touches.push(touch);
                }
              }
            } else {
              touches = event.touches;
            }
            
            var firstTouch = touches[0];
            if (event.type == 'touchstart') {
              SDL.DOMButtons[0] = 1;
            }
            var mouseEventType;
            switch(event.type) {
              case 'touchstart': mouseEventType = 'mousedown'; break;
              case 'touchmove': mouseEventType = 'mousemove'; break;
            }
            var mouseEvent = {
              type: mouseEventType,
              button: 0,
              pageX: firstTouch.clientX,
              pageY: firstTouch.clientY
            };
            SDL.events.push(mouseEvent);
  
            for (var i = 0; i < touches.length; i++) {
              var touch = touches[i];
              SDL.events.push({
                type: event.type,
                touch: touch
              });
            };
            break;
          }
          case 'touchend': {
            event.preventDefault();
            
            // Remove the entry in the SDL.downFingers hash
            // because the finger is no longer down.
            for(var i = 0; i < event.changedTouches.length; i++) {
              var touch = event.changedTouches[i];
              if (SDL.downFingers[touch.identifier] === true) {
                delete SDL.downFingers[touch.identifier];
              }
            }
  
            var mouseEvent = {
              type: 'mouseup',
              button: 0,
              pageX: event.changedTouches[0].clientX,
              pageY: event.changedTouches[0].clientY
            };
            SDL.DOMButtons[0] = 0;
            SDL.events.push(mouseEvent);
            
            for (var i = 0; i < event.changedTouches.length; i++) {
              var touch = event.changedTouches[i];
              SDL.events.push({
                type: 'touchend',
                touch: touch
              });
            };
            break;
          }
          case 'DOMMouseScroll': case 'mousewheel': case 'wheel':
            var delta = -Browser.getMouseWheelDelta(event); // Flip the wheel direction to translate from browser wheel direction (+:down) to SDL direction (+:up)
            delta = (delta == 0) ? 0 : (delta > 0 ? Math.max(delta, 1) : Math.min(delta, -1)); // Quantize to integer so that minimum scroll is at least +/- 1.
  
            // Simulate old-style SDL events representing mouse wheel input as buttons
            var button = delta > 0 ? 3 /*SDL_BUTTON_WHEELUP-1*/ : 4 /*SDL_BUTTON_WHEELDOWN-1*/; // Subtract one since JS->C marshalling is defined to add one back.
            SDL.events.push({ type: 'mousedown', button: button, pageX: event.pageX, pageY: event.pageY });
            SDL.events.push({ type: 'mouseup', button: button, pageX: event.pageX, pageY: event.pageY });
  
            // Pass a delta motion event.
            SDL.events.push({ type: 'wheel', deltaX: 0, deltaY: delta });
            event.preventDefault(); // If we don't prevent this, then 'wheel' event will be sent again by the browser as 'DOMMouseScroll' and we will receive this same event the second time.
            break;
          case 'mousemove':
            if (SDL.DOMButtons[0] === 1) {
              SDL.events.push({
                type: 'touchmove',
                touch: {
                  identifier: 0,
                  deviceID: -1,
                  pageX: event.pageX,
                  pageY: event.pageY
                }
              });
            }
            if (Browser.pointerLock) {
              // workaround for firefox bug 750111
              if ('mozMovementX' in event) {
                event['movementX'] = event['mozMovementX'];
                event['movementY'] = event['mozMovementY'];
              }
              // workaround for Firefox bug 782777
              if (event['movementX'] == 0 && event['movementY'] == 0) {
                // ignore a mousemove event if it doesn't contain any movement info
                // (without pointer lock, we infer movement from pageX/pageY, so this check is unnecessary)
                event.preventDefault();
                return;
              }
            }
            // fall through
          case 'keydown': case 'keyup': case 'keypress': case 'mousedown': case 'mouseup':
            // If we preventDefault on keydown events, the subsequent keypress events
            // won't fire. However, it's fine (and in some cases necessary) to
            // preventDefault for keys that don't generate a character. Otherwise,
            // preventDefault is the right thing to do in general.
            if (event.type !== 'keydown' || (!SDL.unicode && !SDL.textInput) || (event.keyCode === 8 /* backspace */ || event.keyCode === 9 /* tab */)) {
              event.preventDefault();
            }
  
            if (event.type == 'mousedown') {
              SDL.DOMButtons[event.button] = 1;
              SDL.events.push({
                type: 'touchstart',
                touch: {
                  identifier: 0,
                  deviceID: -1,
                  pageX: event.pageX,
                  pageY: event.pageY
                }
              });
            } else if (event.type == 'mouseup') {
              // ignore extra ups, can happen if we leave the canvas while pressing down, then return,
              // since we add a mouseup in that case
              if (!SDL.DOMButtons[event.button]) {
                return;
              }
  
              SDL.events.push({
                type: 'touchend',
                touch: {
                  identifier: 0,
                  deviceID: -1,
                  pageX: event.pageX,
                  pageY: event.pageY
                }
              });
              SDL.DOMButtons[event.button] = 0;
            }
  
            // We can only request fullscreen as the result of user input.
            // Due to this limitation, we toggle a boolean on keydown which
            // SDL_WM_ToggleFullScreen will check and subsequently set another
            // flag indicating for us to request fullscreen on the following
            // keyup. This isn't perfect, but it enables SDL_WM_ToggleFullScreen
            // to work as the result of a keypress (which is an extremely
            // common use case).
            if (event.type === 'keydown' || event.type === 'mousedown') {
              SDL.canRequestFullscreen = true;
            } else if (event.type === 'keyup' || event.type === 'mouseup') {
              if (SDL.isRequestingFullscreen) {
                Module['requestFullScreen'](true, true);
                SDL.isRequestingFullscreen = false;
              }
              SDL.canRequestFullscreen = false;
            }
  
            // SDL expects a unicode character to be passed to its keydown events.
            // Unfortunately, the browser APIs only provide a charCode property on
            // keypress events, so we must backfill in keydown events with their
            // subsequent keypress event's charCode.
            if (event.type === 'keypress' && SDL.savedKeydown) {
              // charCode is read-only
              SDL.savedKeydown.keypressCharCode = event.charCode;
              SDL.savedKeydown = null;
            } else if (event.type === 'keydown') {
              SDL.savedKeydown = event;
            }
  
            // Don't push keypress events unless SDL_StartTextInput has been called.
            if (event.type !== 'keypress' || SDL.textInput) {
              SDL.events.push(event);
            }
            break;
          case 'mouseout':
            // Un-press all pressed mouse buttons, because we might miss the release outside of the canvas
            for (var i = 0; i < 3; i++) {
              if (SDL.DOMButtons[i]) {
                SDL.events.push({
                  type: 'mouseup',
                  button: i,
                  pageX: event.pageX,
                  pageY: event.pageY
                });
                SDL.DOMButtons[i] = 0;
              }
            }
            event.preventDefault();
            break;
          case 'focus':
            SDL.events.push(event);
            event.preventDefault();
            break;
          case 'blur':
            SDL.events.push(event);
            unpressAllPressedKeys();
            event.preventDefault();
            break;
          case 'visibilitychange':
            SDL.events.push({
              type: 'visibilitychange',
              visible: !document.hidden
            });
            unpressAllPressedKeys();
            event.preventDefault();
            break;
          case 'unload':
            if (Browser.mainLoop.runner) {
              SDL.events.push(event);
              // Force-run a main event loop, since otherwise this event will never be caught!
              Browser.mainLoop.runner();
            }
            return;
          case 'resize':
            SDL.events.push(event);
            // manually triggered resize event doesn't have a preventDefault member
            if (event.preventDefault) {
              event.preventDefault();
            }
            break;
        }
        if (SDL.events.length >= 10000) {
          Module.printErr('SDL event queue full, dropping events');
          SDL.events = SDL.events.slice(0, 10000);
        }
        // If we have a handler installed, this will push the events to the app
        // instead of the app polling for them.
        SDL.flushEventsToHandler();
        return;
      },lookupKeyCodeForEvent:function (event) {
          var code = event.keyCode;
          if (code >= 65 && code <= 90) {
            code += 32; // make lowercase for SDL
          } else {
            code = SDL.keyCodes[event.keyCode] || event.keyCode;
            // If this is one of the modifier keys (224 | 1<<10 - 227 | 1<<10), and the event specifies that it is
            // a right key, add 4 to get the right key SDL key code.
            if (event.location === KeyboardEvent.DOM_KEY_LOCATION_RIGHT && code >= (224 | 1<<10) && code <= (227 | 1<<10)) {
              code += 4;
            }
          }
          return code;
      },handleEvent:function (event) {
        if (event.handled) return;
        event.handled = true;
  
        switch (event.type) {
          case 'touchstart': case 'touchend': case 'touchmove': {
            Browser.calculateMouseEvent(event);
            break;
          }
          case 'keydown': case 'keyup': {
            var down = event.type === 'keydown';
            var code = SDL.lookupKeyCodeForEvent(event);
            HEAP8[(((SDL.keyboardState)+(code))>>0)]=down;
            // TODO: lmeta, rmeta, numlock, capslock, KMOD_MODE, KMOD_RESERVED
            SDL.modState = (HEAP8[(((SDL.keyboardState)+(1248))>>0)] ? 0x0040 : 0) | // KMOD_LCTRL
              (HEAP8[(((SDL.keyboardState)+(1249))>>0)] ? 0x0001 : 0) | // KMOD_LSHIFT
              (HEAP8[(((SDL.keyboardState)+(1250))>>0)] ? 0x0100 : 0) | // KMOD_LALT
              (HEAP8[(((SDL.keyboardState)+(1252))>>0)] ? 0x0080 : 0) | // KMOD_RCTRL
              (HEAP8[(((SDL.keyboardState)+(1253))>>0)] ? 0x0002 : 0) | // KMOD_RSHIFT
              (HEAP8[(((SDL.keyboardState)+(1254))>>0)] ? 0x0200 : 0); //  KMOD_RALT
            if (down) {
              SDL.keyboardMap[code] = event.keyCode; // save the DOM input, which we can use to unpress it during blur
            } else {
              delete SDL.keyboardMap[code];
            }
  
            break;
          }
          case 'mousedown': case 'mouseup':
            if (event.type == 'mousedown') {
              // SDL_BUTTON(x) is defined as (1 << ((x)-1)).  SDL buttons are 1-3,
              // and DOM buttons are 0-2, so this means that the below formula is
              // correct.
              SDL.buttonState |= 1 << event.button;
            } else if (event.type == 'mouseup') {
              SDL.buttonState &= ~(1 << event.button);
            }
            // fall through
          case 'mousemove': {
            Browser.calculateMouseEvent(event);
            break;
          }
        }
      },flushEventsToHandler:function () {
        if (!SDL.eventHandler) return;
  
        while (SDL.pollEvent(SDL.eventHandlerTemp)) {
          Runtime.dynCall('iii', SDL.eventHandler, [SDL.eventHandlerContext, SDL.eventHandlerTemp]);
        }
      },pollEvent:function (ptr) {
        if (SDL.initFlags & 0x200 && SDL.joystickEventState) {
          // If SDL_INIT_JOYSTICK was supplied AND the joystick system is configured
          // to automatically query for events, query for joystick events.
          SDL.queryJoysticks();
        }
        if (ptr) {
          while (SDL.events.length > 0) {
            if (SDL.makeCEvent(SDL.events.shift(), ptr) !== false) return 1;
          }
          return 0;
        } else {
          // XXX: somewhat risky in that we do not check if the event is real or not (makeCEvent returns false) if no pointer supplied
          return SDL.events.length > 0;
        }
      },makeCEvent:function (event, ptr) {
        if (typeof event === 'number') {
          // This is a pointer to a copy of a native C event that was SDL_PushEvent'ed
          _memcpy(ptr, event, 28);
          _free(event); // the copy is no longer needed
          return;
        }
  
        SDL.handleEvent(event);
  
        switch (event.type) {
          case 'keydown': case 'keyup': {
            var down = event.type === 'keydown';
            //Module.print('Received key event: ' + event.keyCode);
            var key = SDL.lookupKeyCodeForEvent(event);
            var scan;
            if (key >= 1024) {
              scan = key - 1024;
            } else {
              scan = SDL.scanCodes[key] || key;
            }
  
            HEAP32[((ptr)>>2)]=SDL.DOMEventToSDLEvent[event.type];
            HEAP8[(((ptr)+(8))>>0)]=down ? 1 : 0;
            HEAP8[(((ptr)+(9))>>0)]=0; // TODO
            HEAP32[(((ptr)+(12))>>2)]=scan;
            HEAP32[(((ptr)+(16))>>2)]=key;
            HEAP16[(((ptr)+(20))>>1)]=SDL.modState;
            // some non-character keys (e.g. backspace and tab) won't have keypressCharCode set, fill in with the keyCode.
            HEAP32[(((ptr)+(24))>>2)]=event.keypressCharCode || key;
  
            break;
          }
          case 'keypress': {
            HEAP32[((ptr)>>2)]=SDL.DOMEventToSDLEvent[event.type];
            // Not filling in windowID for now
            var cStr = intArrayFromString(String.fromCharCode(event.charCode));
            for (var i = 0; i < cStr.length; ++i) {
              HEAP8[(((ptr)+(8 + i))>>0)]=cStr[i];
            }
            break;
          }
          case 'mousedown': case 'mouseup': case 'mousemove': {
            if (event.type != 'mousemove') {
              var down = event.type === 'mousedown';
              HEAP32[((ptr)>>2)]=SDL.DOMEventToSDLEvent[event.type];
              HEAP32[(((ptr)+(4))>>2)]=0;
              HEAP32[(((ptr)+(8))>>2)]=0;
              HEAP32[(((ptr)+(12))>>2)]=0;
              HEAP8[(((ptr)+(16))>>0)]=event.button+1; // DOM buttons are 0-2, SDL 1-3
              HEAP8[(((ptr)+(17))>>0)]=down ? 1 : 0;
              HEAP32[(((ptr)+(20))>>2)]=Browser.mouseX;
              HEAP32[(((ptr)+(24))>>2)]=Browser.mouseY;
            } else {
              HEAP32[((ptr)>>2)]=SDL.DOMEventToSDLEvent[event.type];
              HEAP32[(((ptr)+(4))>>2)]=0;
              HEAP32[(((ptr)+(8))>>2)]=0;
              HEAP32[(((ptr)+(12))>>2)]=0;
              HEAP32[(((ptr)+(16))>>2)]=SDL.buttonState;
              HEAP32[(((ptr)+(20))>>2)]=Browser.mouseX;
              HEAP32[(((ptr)+(24))>>2)]=Browser.mouseY;
              HEAP32[(((ptr)+(28))>>2)]=Browser.mouseMovementX;
              HEAP32[(((ptr)+(32))>>2)]=Browser.mouseMovementY;
            }
            break;
          }
          case 'wheel': {
            HEAP32[((ptr)>>2)]=SDL.DOMEventToSDLEvent[event.type];
            HEAP32[(((ptr)+(16))>>2)]=event.deltaX;
            HEAP32[(((ptr)+(20))>>2)]=event.deltaY; 
            break;       
          }
          case 'touchstart': case 'touchend': case 'touchmove': {
            var touch = event.touch;
            if (!Browser.touches[touch.identifier]) break;
            var w = Module['canvas'].width;
            var h = Module['canvas'].height;
            var x = Browser.touches[touch.identifier].x / w;
            var y = Browser.touches[touch.identifier].y / h;
            var lx = Browser.lastTouches[touch.identifier].x / w;
            var ly = Browser.lastTouches[touch.identifier].y / h;
            var dx = x - lx;
            var dy = y - ly;
            if (touch['deviceID'] === undefined) touch.deviceID = SDL.TOUCH_DEFAULT_ID;
            if (dx === 0 && dy === 0 && event.type === 'touchmove') return false; // don't send these if nothing happened
            HEAP32[((ptr)>>2)]=SDL.DOMEventToSDLEvent[event.type];
            HEAP32[(((ptr)+(4))>>2)]=_SDL_GetTicks();
            (tempI64 = [touch.deviceID>>>0,(tempDouble=touch.deviceID,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[(((ptr)+(8))>>2)]=tempI64[0],HEAP32[(((ptr)+(12))>>2)]=tempI64[1]);
            (tempI64 = [touch.identifier>>>0,(tempDouble=touch.identifier,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[(((ptr)+(16))>>2)]=tempI64[0],HEAP32[(((ptr)+(20))>>2)]=tempI64[1]);
            HEAPF32[(((ptr)+(24))>>2)]=x;
            HEAPF32[(((ptr)+(28))>>2)]=y;
            HEAPF32[(((ptr)+(32))>>2)]=dx;
            HEAPF32[(((ptr)+(36))>>2)]=dy;
            if (touch.force !== undefined) {
              HEAPF32[(((ptr)+(40))>>2)]=touch.force;
            } else { // No pressure data, send a digital 0/1 pressure.
              HEAPF32[(((ptr)+(40))>>2)]=event.type == "touchend" ? 0 : 1;
            }
            break;
          }
          case 'unload': {
            HEAP32[((ptr)>>2)]=SDL.DOMEventToSDLEvent[event.type];
            break;
          }
          case 'resize': {
            HEAP32[((ptr)>>2)]=SDL.DOMEventToSDLEvent[event.type];
            HEAP32[(((ptr)+(4))>>2)]=event.w;
            HEAP32[(((ptr)+(8))>>2)]=event.h;
            break;
          }
          case 'joystick_button_up': case 'joystick_button_down': {
            var state = event.type === 'joystick_button_up' ? 0 : 1;
            HEAP32[((ptr)>>2)]=SDL.DOMEventToSDLEvent[event.type];
            HEAP8[(((ptr)+(4))>>0)]=event.index;
            HEAP8[(((ptr)+(5))>>0)]=event.button;
            HEAP8[(((ptr)+(6))>>0)]=state;
            break;
          }
          case 'joystick_axis_motion': {
            HEAP32[((ptr)>>2)]=SDL.DOMEventToSDLEvent[event.type];
            HEAP8[(((ptr)+(4))>>0)]=event.index;
            HEAP8[(((ptr)+(5))>>0)]=event.axis;
            HEAP32[(((ptr)+(8))>>2)]=SDL.joystickAxisValueConversion(event.value);
            break;
          }
          case 'focus': {
            var SDL_WINDOWEVENT_FOCUS_GAINED = 12 /* SDL_WINDOWEVENT_FOCUS_GAINED */;
            HEAP32[((ptr)>>2)]=SDL.DOMEventToSDLEvent[event.type];
            HEAP32[(((ptr)+(4))>>2)]=0;
            HEAP8[(((ptr)+(8))>>0)]=SDL_WINDOWEVENT_FOCUS_GAINED;
            break;
          }
          case 'blur': {
            var SDL_WINDOWEVENT_FOCUS_LOST = 13 /* SDL_WINDOWEVENT_FOCUS_LOST */;
            HEAP32[((ptr)>>2)]=SDL.DOMEventToSDLEvent[event.type];
            HEAP32[(((ptr)+(4))>>2)]=0;
            HEAP8[(((ptr)+(8))>>0)]=SDL_WINDOWEVENT_FOCUS_LOST;
            break;
          }
          case 'visibilitychange': {
            var SDL_WINDOWEVENT_SHOWN  = 1 /* SDL_WINDOWEVENT_SHOWN */;
            var SDL_WINDOWEVENT_HIDDEN = 2 /* SDL_WINDOWEVENT_HIDDEN */;
            var visibilityEventID = event.visible ? SDL_WINDOWEVENT_SHOWN : SDL_WINDOWEVENT_HIDDEN;
            HEAP32[((ptr)>>2)]=SDL.DOMEventToSDLEvent[event.type];
            HEAP32[(((ptr)+(4))>>2)]=0;
            HEAP8[(((ptr)+(8))>>0)]=visibilityEventID;
            break;
          }
          default: throw 'Unhandled SDL event: ' + event.type;
        }
      },estimateTextWidth:function (fontData, text) {
        var h = fontData.size;
        var fontString = h + 'px ' + fontData.name;
        var tempCtx = SDL.ttfContext;
        assert(tempCtx, 'TTF_Init must have been called');
        tempCtx.save();
        tempCtx.font = fontString;
        var ret = tempCtx.measureText(text).width | 0;
        tempCtx.restore();
        return ret;
      },allocateChannels:function (num) { // called from Mix_AllocateChannels and init
        if (SDL.numChannels && SDL.numChannels >= num && num != 0) return;
        SDL.numChannels = num;
        SDL.channels = [];
        for (var i = 0; i < num; i++) {
          SDL.channels[i] = {
            audio: null,
            volume: 1.0
          };
        }
      },setGetVolume:function (info, volume) {
        if (!info) return 0;
        var ret = info.volume * 128; // MIX_MAX_VOLUME
        if (volume != -1) {
          info.volume = Math.min(Math.max(volume, 0), 128) / 128;
          if (info.audio) {
            try {
              info.audio.volume = info.volume; // For <audio> element
              if (info.audio.webAudioGainNode) info.audio.webAudioGainNode['gain']['value'] = info.volume; // For WebAudio playback
            } catch(e) {
              Module.printErr('setGetVolume failed to set audio volume: ' + e);
            }
          }
        }
        return ret;
      },setPannerPosition:function (info, x, y, z) {
        if (!info) return;
        if (info.audio) {
          if (info.audio.webAudioPannerNode) {
            info.audio.webAudioPannerNode['setPosition'](x, y, z);
          }
        }
      },playWebAudio:function (audio) {
        if (!audio) return;
        if (audio.webAudioNode) return; // This instance is already playing, don't start again.
        if (!SDL.webAudioAvailable()) return;
        try {
          var webAudio = audio.resource.webAudio;
          audio.paused = false;
          if (!webAudio.decodedBuffer) {
            if (webAudio.onDecodeComplete === undefined) abort("Cannot play back audio object that was not loaded");
            webAudio.onDecodeComplete.push(function() { if (!audio.paused) SDL.playWebAudio(audio); });
            return;
          }
          audio.webAudioNode = SDL.audioContext['createBufferSource']();
          audio.webAudioNode['buffer'] = webAudio.decodedBuffer;
          audio.webAudioNode['loop'] = audio.loop;
          audio.webAudioNode['onended'] = function() { audio['onended'](); } // For <media> element compatibility, route the onended signal to the instance.
  
          audio.webAudioPannerNode = SDL.audioContext['createPanner']();
          audio.webAudioPannerNode['panningModel'] = 'equalpower';
  
          // Add an intermediate gain node to control volume.
          audio.webAudioGainNode = SDL.audioContext['createGain']();
          audio.webAudioGainNode['gain']['value'] = audio.volume;
  
          audio.webAudioNode['connect'](audio.webAudioPannerNode);
          audio.webAudioPannerNode['connect'](audio.webAudioGainNode);
          audio.webAudioGainNode['connect'](SDL.audioContext['destination']);
  
          audio.webAudioNode['start'](0, audio.currentPosition);
          audio.startTime = SDL.audioContext['currentTime'] - audio.currentPosition;
        } catch(e) {
          Module.printErr('playWebAudio failed: ' + e);
        }
      },pauseWebAudio:function (audio) {
        if (!audio) return;
        if (audio.webAudioNode) {
          try {
            // Remember where we left off, so that if/when we resume, we can restart the playback at a proper place.
            audio.currentPosition = (SDL.audioContext['currentTime'] - audio.startTime) % audio.resource.webAudio.decodedBuffer.duration;
            // Important: When we reach here, the audio playback is stopped by the user. But when calling .stop() below, the Web Audio
            // graph will send the onended signal, but we don't want to process that, since pausing should not clear/destroy the audio
            // channel.
            audio.webAudioNode['onended'] = undefined;
            audio.webAudioNode.stop();
            audio.webAudioNode = undefined;
          } catch(e) {
            Module.printErr('pauseWebAudio failed: ' + e);
          }
        }
        audio.paused = true;
      },openAudioContext:function () {
        // Initialize Web Audio API if we haven't done so yet. Note: Only initialize Web Audio context ever once on the web page,
        // since initializing multiple times fails on Chrome saying 'audio resources have been exhausted'.
        if (!SDL.audioContext) {
          if (typeof(AudioContext) !== 'undefined') SDL.audioContext = new AudioContext();
          else if (typeof(webkitAudioContext) !== 'undefined') SDL.audioContext = new webkitAudioContext();
        }
      },webAudioAvailable:function () { return !!SDL.audioContext; },fillWebAudioBufferFromHeap:function (heapPtr, sizeSamplesPerChannel, dstAudioBuffer) {
        // The input audio data is interleaved across the channels, i.e. [L, R, L, R, L, R, ...] and is either 8-bit or 16-bit as
        // supported by the SDL API. The output audio wave data for Web Audio API must be in planar buffers of [-1,1]-normalized Float32 data,
        // so perform a buffer conversion for the data.
        var numChannels = SDL.audio.channels;
        for(var c = 0; c < numChannels; ++c) {
          var channelData = dstAudioBuffer['getChannelData'](c);
          if (channelData.length != sizeSamplesPerChannel) {
            throw 'Web Audio output buffer length mismatch! Destination size: ' + channelData.length + ' samples vs expected ' + sizeSamplesPerChannel + ' samples!';
          }
          if (SDL.audio.format == 0x8010 /*AUDIO_S16LSB*/) {
            for(var j = 0; j < sizeSamplesPerChannel; ++j) {
              channelData[j] = (HEAP16[(((heapPtr)+((j*numChannels + c)*2))>>1)]) / 0x8000;
            }
          } else if (SDL.audio.format == 0x0008 /*AUDIO_U8*/) {
            for(var j = 0; j < sizeSamplesPerChannel; ++j) {
              var v = (HEAP8[(((heapPtr)+(j*numChannels + c))>>0)]);
              channelData[j] = ((v >= 0) ? v-128 : v+128) /128;
            }
          }
        }
      },debugSurface:function (surfData) {
        console.log('dumping surface ' + [surfData.surf, surfData.source, surfData.width, surfData.height]);
        var image = surfData.ctx.getImageData(0, 0, surfData.width, surfData.height);
        var data = image.data;
        var num = Math.min(surfData.width, surfData.height);
        for (var i = 0; i < num; i++) {
          console.log('   diagonal ' + i + ':' + [data[i*surfData.width*4 + i*4 + 0], data[i*surfData.width*4 + i*4 + 1], data[i*surfData.width*4 + i*4 + 2], data[i*surfData.width*4 + i*4 + 3]]);
        }
      },joystickEventState:1,lastJoystickState:{},joystickNamePool:{},recordJoystickState:function (joystick, state) {
        // Standardize button state.
        var buttons = new Array(state.buttons.length);
        for (var i = 0; i < state.buttons.length; i++) {
          buttons[i] = SDL.getJoystickButtonState(state.buttons[i]);
        }
  
        SDL.lastJoystickState[joystick] = {
          buttons: buttons,
          axes: state.axes.slice(0),
          timestamp: state.timestamp,
          index: state.index,
          id: state.id
        };
      },getJoystickButtonState:function (button) {
        if (typeof button === 'object') {
          // Current gamepad API editor's draft (Firefox Nightly)
          // https://dvcs.w3.org/hg/gamepad/raw-file/default/gamepad.html#idl-def-GamepadButton
          return button.pressed;
        } else {
          // Current gamepad API working draft (Firefox / Chrome Stable)
          // http://www.w3.org/TR/2012/WD-gamepad-20120529/#gamepad-interface
          return button > 0;
        }
      },queryJoysticks:function () {
        for (var joystick in SDL.lastJoystickState) {
          var state = SDL.getGamepad(joystick - 1);
          var prevState = SDL.lastJoystickState[joystick];
          // Check only if the timestamp has differed.
          // NOTE: Timestamp is not available in Firefox.
          if (typeof state.timestamp !== 'number' || state.timestamp !== prevState.timestamp) {
            var i;
            for (i = 0; i < state.buttons.length; i++) {
              var buttonState = SDL.getJoystickButtonState(state.buttons[i]);
              // NOTE: The previous state already has a boolean representation of
              //       its button, so no need to standardize its button state here.
              if (buttonState !== prevState.buttons[i]) {
                // Insert button-press event.
                SDL.events.push({
                  type: buttonState ? 'joystick_button_down' : 'joystick_button_up',
                  joystick: joystick,
                  index: joystick - 1,
                  button: i
                });
              }
            }
            for (i = 0; i < state.axes.length; i++) {
              if (state.axes[i] !== prevState.axes[i]) {
                // Insert axes-change event.
                SDL.events.push({
                  type: 'joystick_axis_motion',
                  joystick: joystick,
                  index: joystick - 1,
                  axis: i,
                  value: state.axes[i]
                });
              }
            }
  
            SDL.recordJoystickState(joystick, state);
          }
        }
      },joystickAxisValueConversion:function (value) {
        // Ensures that 0 is 0, 1 is 32767, and -1 is 32768.
        return Math.ceil(((value+1) * 32767.5) - 32768);
      },getGamepads:function () {
        var fcn = navigator.getGamepads || navigator.webkitGamepads || navigator.mozGamepads || navigator.gamepads || navigator.webkitGetGamepads;
        if (fcn !== undefined) {
          // The function must be applied on the navigator object.
          return fcn.apply(navigator);
        } else {
          return [];
        }
      },getGamepad:function (deviceIndex) {
        var gamepads = SDL.getGamepads();
        if (gamepads.length > deviceIndex && deviceIndex >= 0) {
          return gamepads[deviceIndex];
        }
        return null;
      }};function _SDL_PauseAudio(pauseOn) {
      if (!SDL.audio) {
        return;
      }
      if (pauseOn) {
        if (SDL.audio.timer !== undefined) {
          clearTimeout(SDL.audio.timer);
          SDL.audio.numAudioTimersPending = 0;
          SDL.audio.timer = undefined;
        }
      } else if (!SDL.audio.timer) {
        // Start the audio playback timer callback loop.
        SDL.audio.numAudioTimersPending = 1;
        SDL.audio.timer = Browser.safeSetTimeout(SDL.audio.caller, 1);
      }
      SDL.audio.paused = pauseOn;
    }

  
  function __ZSt18uncaught_exceptionv() { // std::uncaught_exception()
      return !!__ZSt18uncaught_exceptionv.uncaught_exception;
    }
  
  
  
  var EXCEPTIONS={last:0,caught:[],infos:{},deAdjust:function (adjusted) {
        if (!adjusted || EXCEPTIONS.infos[adjusted]) return adjusted;
        for (var ptr in EXCEPTIONS.infos) {
          var info = EXCEPTIONS.infos[ptr];
          if (info.adjusted === adjusted) {
            return ptr;
          }
        }
        return adjusted;
      },addRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        info.refcount++;
      },decRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        assert(info.refcount > 0);
        info.refcount--;
        if (info.refcount === 0) {
          if (info.destructor) {
            Runtime.dynCall('vi', info.destructor, [ptr]);
          }
          delete EXCEPTIONS.infos[ptr];
          ___cxa_free_exception(ptr);
        }
      },clearRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        info.refcount = 0;
      }};
  function ___resumeException(ptr) {
      if (!EXCEPTIONS.last) { EXCEPTIONS.last = ptr; }
      EXCEPTIONS.clearRef(EXCEPTIONS.deAdjust(ptr)); // exception refcount should be cleared, but don't free it
      throw ptr;
    }function ___cxa_find_matching_catch() {
      var thrown = EXCEPTIONS.last;
      if (!thrown) {
        // just pass through the null ptr
        return ((asm["setTempRet0"](0),0)|0);
      }
      var info = EXCEPTIONS.infos[thrown];
      var throwntype = info.type;
      if (!throwntype) {
        // just pass through the thrown ptr
        return ((asm["setTempRet0"](0),thrown)|0);
      }
      var typeArray = Array.prototype.slice.call(arguments);
  
      var pointer = Module['___cxa_is_pointer_type'](throwntype);
      // can_catch receives a **, add indirection
      if (!___cxa_find_matching_catch.buffer) ___cxa_find_matching_catch.buffer = _malloc(4);
      HEAP32[((___cxa_find_matching_catch.buffer)>>2)]=thrown;
      thrown = ___cxa_find_matching_catch.buffer;
      // The different catch blocks are denoted by different types.
      // Due to inheritance, those types may not precisely match the
      // type of the thrown object. Find one which matches, and
      // return the type of the catch block which should be called.
      for (var i = 0; i < typeArray.length; i++) {
        if (typeArray[i] && Module['___cxa_can_catch'](typeArray[i], throwntype, thrown)) {
          thrown = HEAP32[((thrown)>>2)]; // undo indirection
          info.adjusted = thrown;
          return ((asm["setTempRet0"](typeArray[i]),thrown)|0);
        }
      }
      // Shouldn't happen unless we have bogus data in typeArray
      // or encounter a type for which emscripten doesn't have suitable
      // typeinfo defined. Best-efforts match just in case.
      thrown = HEAP32[((thrown)>>2)]; // undo indirection
      return ((asm["setTempRet0"](throwntype),thrown)|0);
    }function ___cxa_throw(ptr, type, destructor) {
      EXCEPTIONS.infos[ptr] = {
        ptr: ptr,
        adjusted: ptr,
        type: type,
        destructor: destructor,
        refcount: 0
      };
      EXCEPTIONS.last = ptr;
      if (!("uncaught_exception" in __ZSt18uncaught_exceptionv)) {
        __ZSt18uncaught_exceptionv.uncaught_exception = 1;
      } else {
        __ZSt18uncaught_exceptionv.uncaught_exception++;
      }
      throw ptr;
    }

   
  Module["_memset"] = _memset;

  var _BDtoILow=true;

  var _emscripten_resume=true;

  function ___gxx_personality_v0() {
    }

  var _emscripten_landingpad=true;

  function _atexit(func, arg) {
      __ATEXIT__.unshift({ func: func, arg: arg });
    }

  function _abort() {
      Module['abort']();
    }

  
  var GL={counter:1,lastError:0,buffers:[],mappedBuffers:{},programs:[],framebuffers:[],renderbuffers:[],textures:[],uniforms:[],shaders:[],vaos:[],contexts:[],currentContext:null,byteSizeByTypeRoot:5120,byteSizeByType:[1,1,2,2,4,4,4,2,3,4,8],programInfos:{},stringCache:{},packAlignment:4,unpackAlignment:4,init:function () {
        GL.miniTempBuffer = new Float32Array(GL.MINI_TEMP_BUFFER_SIZE);
        for (var i = 0; i < GL.MINI_TEMP_BUFFER_SIZE; i++) {
          GL.miniTempBufferViews[i] = GL.miniTempBuffer.subarray(0, i+1);
        }
      },recordError:function recordError(errorCode) {
        if (!GL.lastError) {
          GL.lastError = errorCode;
        }
      },getNewId:function (table) {
        var ret = GL.counter++;
        for (var i = table.length; i < ret; i++) {
          table[i] = null;
        }
        return ret;
      },MINI_TEMP_BUFFER_SIZE:16,miniTempBuffer:null,miniTempBufferViews:[0],getSource:function (shader, count, string, length) {
        var source = '';
        for (var i = 0; i < count; ++i) {
          var frag;
          if (length) {
            var len = HEAP32[(((length)+(i*4))>>2)];
            if (len < 0) {
              frag = Pointer_stringify(HEAP32[(((string)+(i*4))>>2)]);
            } else {
              frag = Pointer_stringify(HEAP32[(((string)+(i*4))>>2)], len);
            }
          } else {
            frag = Pointer_stringify(HEAP32[(((string)+(i*4))>>2)]);
          }
          source += frag;
        }
        return source;
      },createContext:function (canvas, webGLContextAttributes) {
        if (typeof webGLContextAttributes.majorVersion === 'undefined' && typeof webGLContextAttributes.minorVersion === 'undefined') {
          webGLContextAttributes.majorVersion = 1;
          webGLContextAttributes.minorVersion = 0;
        }
        var ctx;
        var errorInfo = '?';
        function onContextCreationError(event) {
          errorInfo = event.statusMessage || errorInfo;
        }
        try {
          canvas.addEventListener('webglcontextcreationerror', onContextCreationError, false);
          try {
            if (webGLContextAttributes.majorVersion == 1 && webGLContextAttributes.minorVersion == 0) {
              ctx = canvas.getContext("webgl", webGLContextAttributes) || canvas.getContext("experimental-webgl", webGLContextAttributes);
            } else if (webGLContextAttributes.majorVersion == 2 && webGLContextAttributes.minorVersion == 0) {
              ctx = canvas.getContext("webgl2", webGLContextAttributes) || canvas.getContext("experimental-webgl2", webGLContextAttributes);
            } else {
              throw 'Unsupported WebGL context version ' + majorVersion + '.' + minorVersion + '!'
            }
          } finally {
            canvas.removeEventListener('webglcontextcreationerror', onContextCreationError, false);
          }
          if (!ctx) throw ':(';
        } catch (e) {
          Module.print('Could not create canvas: ' + [errorInfo, e, JSON.stringify(webGLContextAttributes)]);
          return 0;
        }
        // possible GL_DEBUG entry point: ctx = wrapDebugGL(ctx);
  
        if (!ctx) return 0;
        return GL.registerContext(ctx, webGLContextAttributes);
      },registerContext:function (ctx, webGLContextAttributes) {
        var handle = GL.getNewId(GL.contexts);
        var context = {
          handle: handle,
          version: webGLContextAttributes.majorVersion,
          GLctx: ctx
        };
        // Store the created context object so that we can access the context given a canvas without having to pass the parameters again.
        if (ctx.canvas) ctx.canvas.GLctxObject = context;
        GL.contexts[handle] = context;
        if (typeof webGLContextAttributes['enableExtensionsByDefault'] === 'undefined' || webGLContextAttributes.enableExtensionsByDefault) {
          GL.initExtensions(context);
        }
        return handle;
      },makeContextCurrent:function (contextHandle) {
        var context = GL.contexts[contextHandle];
        if (!context) return false;
        GLctx = Module.ctx = context.GLctx; // Active WebGL context object.
        GL.currentContext = context; // Active Emscripten GL layer context object.
        return true;
      },getContext:function (contextHandle) {
        return GL.contexts[contextHandle];
      },deleteContext:function (contextHandle) {
        if (GL.currentContext === GL.contexts[contextHandle]) GL.currentContext = null;
        if (typeof JSEvents === 'object') JSEvents.removeAllHandlersOnTarget(GL.contexts[contextHandle].GLctx.canvas); // Release all JS event handlers on the DOM element that the GL context is associated with since the context is now deleted.
        if (GL.contexts[contextHandle] && GL.contexts[contextHandle].GLctx.canvas) GL.contexts[contextHandle].GLctx.canvas.GLctxObject = undefined; // Make sure the canvas object no longer refers to the context object so there are no GC surprises.
        GL.contexts[contextHandle] = null;
      },initExtensions:function (context) {
        // If this function is called without a specific context object, init the extensions of the currently active context.
        if (!context) context = GL.currentContext;
  
        if (context.initExtensionsDone) return;
        context.initExtensionsDone = true;
  
        var GLctx = context.GLctx;
  
        context.maxVertexAttribs = GLctx.getParameter(GLctx.MAX_VERTEX_ATTRIBS);
  
        // Detect the presence of a few extensions manually, this GL interop layer itself will need to know if they exist. 
  
        if (context.version < 2) {
          // Extension available from Firefox 26 and Google Chrome 30
          var instancedArraysExt = GLctx.getExtension('ANGLE_instanced_arrays');
          if (instancedArraysExt) {
            GLctx['vertexAttribDivisor'] = function(index, divisor) { instancedArraysExt['vertexAttribDivisorANGLE'](index, divisor); };
            GLctx['drawArraysInstanced'] = function(mode, first, count, primcount) { instancedArraysExt['drawArraysInstancedANGLE'](mode, first, count, primcount); };
            GLctx['drawElementsInstanced'] = function(mode, count, type, indices, primcount) { instancedArraysExt['drawElementsInstancedANGLE'](mode, count, type, indices, primcount); };
          }
  
          // Extension available from Firefox 25 and WebKit
          var vaoExt = GLctx.getExtension('OES_vertex_array_object');
          if (vaoExt) {
            GLctx['createVertexArray'] = function() { return vaoExt['createVertexArrayOES'](); };
            GLctx['deleteVertexArray'] = function(vao) { vaoExt['deleteVertexArrayOES'](vao); };
            GLctx['bindVertexArray'] = function(vao) { vaoExt['bindVertexArrayOES'](vao); };
            GLctx['isVertexArray'] = function(vao) { return vaoExt['isVertexArrayOES'](vao); };
          }
  
          var drawBuffersExt = GLctx.getExtension('WEBGL_draw_buffers');
          if (drawBuffersExt) {
            GLctx['drawBuffers'] = function(n, bufs) { drawBuffersExt['drawBuffersWEBGL'](n, bufs); };
          }
        }
  
        // These are the 'safe' feature-enabling extensions that don't add any performance impact related to e.g. debugging, and
        // should be enabled by default so that client GLES2/GL code will not need to go through extra hoops to get its stuff working.
        // As new extensions are ratified at http://www.khronos.org/registry/webgl/extensions/ , feel free to add your new extensions
        // here, as long as they don't produce a performance impact for users that might not be using those extensions.
        // E.g. debugging-related extensions should probably be off by default.
        var automaticallyEnabledExtensions = [ "OES_texture_float", "OES_texture_half_float", "OES_standard_derivatives",
                                               "OES_vertex_array_object", "WEBGL_compressed_texture_s3tc", "WEBGL_depth_texture",
                                               "OES_element_index_uint", "EXT_texture_filter_anisotropic", "ANGLE_instanced_arrays",
                                               "OES_texture_float_linear", "OES_texture_half_float_linear", "WEBGL_compressed_texture_atc",
                                               "WEBGL_compressed_texture_pvrtc", "EXT_color_buffer_half_float", "WEBGL_color_buffer_float",
                                               "EXT_frag_depth", "EXT_sRGB", "WEBGL_draw_buffers", "WEBGL_shared_resources",
                                               "EXT_shader_texture_lod" ];
  
        function shouldEnableAutomatically(extension) {
          var ret = false;
          automaticallyEnabledExtensions.forEach(function(include) {
            if (ext.indexOf(include) != -1) {
              ret = true;
            }
          });
          return ret;
        }
  
        var exts = GLctx.getSupportedExtensions();
        if (exts && exts.length > 0) {
          GLctx.getSupportedExtensions().forEach(function(ext) {
            if (automaticallyEnabledExtensions.indexOf(ext) != -1) {
              GLctx.getExtension(ext); // Calling .getExtension enables that extension permanently, no need to store the return value to be enabled.
            }
          });
        }
      },populateUniformTable:function (program) {
        var p = GL.programs[program];
        GL.programInfos[program] = {
          uniforms: {},
          maxUniformLength: 0, // This is eagerly computed below, since we already enumerate all uniforms anyway.
          maxAttributeLength: -1 // This is lazily computed and cached, computed when/if first asked, "-1" meaning not computed yet.
        };
  
        var ptable = GL.programInfos[program];
        var utable = ptable.uniforms;
        // A program's uniform table maps the string name of an uniform to an integer location of that uniform.
        // The global GL.uniforms map maps integer locations to WebGLUniformLocations.
        var numUniforms = GLctx.getProgramParameter(p, GLctx.ACTIVE_UNIFORMS);
        for (var i = 0; i < numUniforms; ++i) {
          var u = GLctx.getActiveUniform(p, i);
  
          var name = u.name;
          ptable.maxUniformLength = Math.max(ptable.maxUniformLength, name.length+1);
  
          // Strip off any trailing array specifier we might have got, e.g. "[0]".
          if (name.indexOf(']', name.length-1) !== -1) {
            var ls = name.lastIndexOf('[');
            name = name.slice(0, ls);
          }
  
          // Optimize memory usage slightly: If we have an array of uniforms, e.g. 'vec3 colors[3];', then 
          // only store the string 'colors' in utable, and 'colors[0]', 'colors[1]' and 'colors[2]' will be parsed as 'colors'+i.
          // Note that for the GL.uniforms table, we still need to fetch the all WebGLUniformLocations for all the indices.
          var loc = GLctx.getUniformLocation(p, name);
          var id = GL.getNewId(GL.uniforms);
          utable[name] = [u.size, id];
          GL.uniforms[id] = loc;
  
          for (var j = 1; j < u.size; ++j) {
            var n = name + '['+j+']';
            loc = GLctx.getUniformLocation(p, n);
            id = GL.getNewId(GL.uniforms);
  
            GL.uniforms[id] = loc;
          }
        }
      }};function _SDL_SetVideoMode(width, height, depth, flags) {
      ['touchstart', 'touchend', 'touchmove', 'mousedown', 'mouseup', 'mousemove', 'DOMMouseScroll', 'mousewheel', 'wheel', 'mouseout'].forEach(function(event) {
        Module['canvas'].addEventListener(event, SDL.receiveEvent, true);
      });
  
      var canvas = Module['canvas'];
  
      // (0,0) means 'use fullscreen' in native; in Emscripten, use the current canvas size.
      if (width == 0 && height == 0) {
        width = canvas.width;
        height = canvas.height;
      }
  
      if (!SDL.addedResizeListener) {
        SDL.addedResizeListener = true;
        Browser.resizeListeners.push(function(w, h) {
          if (!SDL.settingVideoMode) {
            SDL.receiveEvent({
              type: 'resize',
              w: w,
              h: h
            });
          }
        });
      }
  
      if (width !== canvas.width || height !== canvas.height) {
        SDL.settingVideoMode = true; // SetVideoMode itself should not trigger resize events
        Browser.setCanvasSize(width, height);
        SDL.settingVideoMode = false;
      }
  
      // Free the old surface first if there is one
      if (SDL.screen) {
        SDL.freeSurface(SDL.screen);
        assert(!SDL.screen);
      }
  
      if (SDL.GL) flags = flags | 0x04000000; // SDL_OPENGL - if we are using GL, then later calls to SetVideoMode may not mention GL, but we do need it. Once in GL mode, we never leave it.
  
      SDL.screen = SDL.makeSurface(width, height, flags, true, 'screen');
  
      return SDL.screen;
    }


  function ___lock() {}

  function ___unlock() {}

   
  Module["_i64Add"] = _i64Add;

  var _emscripten_postinvoke=true;


  function _SDL_Flip(surf) {
      // We actually do this in Unlock, since the screen surface has as its canvas
      // backing the page canvas element
    }


  
  function __exit(status) {
      // void _exit(int status);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/exit.html
      Module['exit'](status);
    }function _exit(status) {
      __exit(status);
    }

  function _SDL_GetError() {
      if (!SDL.errorMessage) {
        SDL.errorMessage = allocate(intArrayFromString("unknown SDL-emscripten error"), 'i8', ALLOC_NORMAL);
      }
      return SDL.errorMessage;
    }

  
  var SYSCALLS={DEFAULT_POLLMASK:5,mappings:{},umask:511,calculateAt:function (dirfd, path) {
        if (path[0] !== '/') {
          // relative path
          var dir;
          if (dirfd === -100) {
            dir = FS.cwd();
          } else {
            var dirstream = FS.getStream(dirfd);
            if (!dirstream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
            dir = dirstream.path;
          }
          path = PATH.join2(dir, path);
        }
        return path;
      },doStat:function (func, path, buf) {
        try {
          var stat = func(path);
        } catch (e) {
          if (e && e.node && PATH.normalize(path) !== PATH.normalize(FS.getPath(e.node))) {
            // an error occurred while trying to look up the path; we should just report ENOTDIR
            return -ERRNO_CODES.ENOTDIR;
          }
          throw e;
        }
        HEAP32[((buf)>>2)]=stat.dev;
        HEAP32[(((buf)+(4))>>2)]=0;
        HEAP32[(((buf)+(8))>>2)]=stat.ino;
        HEAP32[(((buf)+(12))>>2)]=stat.mode;
        HEAP32[(((buf)+(16))>>2)]=stat.nlink;
        HEAP32[(((buf)+(20))>>2)]=stat.uid;
        HEAP32[(((buf)+(24))>>2)]=stat.gid;
        HEAP32[(((buf)+(28))>>2)]=stat.rdev;
        HEAP32[(((buf)+(32))>>2)]=0;
        HEAP32[(((buf)+(36))>>2)]=stat.size;
        HEAP32[(((buf)+(40))>>2)]=4096;
        HEAP32[(((buf)+(44))>>2)]=stat.blocks;
        HEAP32[(((buf)+(48))>>2)]=(stat.atime.getTime() / 1000)|0;
        HEAP32[(((buf)+(52))>>2)]=0;
        HEAP32[(((buf)+(56))>>2)]=(stat.mtime.getTime() / 1000)|0;
        HEAP32[(((buf)+(60))>>2)]=0;
        HEAP32[(((buf)+(64))>>2)]=(stat.ctime.getTime() / 1000)|0;
        HEAP32[(((buf)+(68))>>2)]=0;
        HEAP32[(((buf)+(72))>>2)]=stat.ino;
        return 0;
      },doMsync:function (addr, stream, len, flags) {
        var buffer = new Uint8Array(HEAPU8.subarray(addr, addr + len));
        FS.msync(stream, buffer, 0, len, flags);
      },doMkdir:function (path, mode) {
        // remove a trailing slash, if one - /a/b/ has basename of '', but
        // we want to create b in the context of this function
        path = PATH.normalize(path);
        if (path[path.length-1] === '/') path = path.substr(0, path.length-1);
        FS.mkdir(path, mode, 0);
        return 0;
      },doMknod:function (path, mode, dev) {
        // we don't want this in the JS API as it uses mknod to create all nodes.
        switch (mode & 61440) {
          case 32768:
          case 8192:
          case 24576:
          case 4096:
          case 49152:
            break;
          default: return -ERRNO_CODES.EINVAL;
        }
        FS.mknod(path, mode, dev);
        return 0;
      },doReadlink:function (path, buf, bufsize) {
        if (bufsize <= 0) return -ERRNO_CODES.EINVAL;
        var ret = FS.readlink(path);
        ret = ret.slice(0, Math.max(0, bufsize));
        writeStringToMemory(ret, buf, true);
        return ret.length;
      },doAccess:function (path, amode) {
        if (amode & ~7) {
          // need a valid mode
          return -ERRNO_CODES.EINVAL;
        }
        var node;
        var lookup = FS.lookupPath(path, { follow: true });
        node = lookup.node;
        var perms = '';
        if (amode & 4) perms += 'r';
        if (amode & 2) perms += 'w';
        if (amode & 1) perms += 'x';
        if (perms /* otherwise, they've just passed F_OK */ && FS.nodePermissions(node, perms)) {
          return -ERRNO_CODES.EACCES;
        }
        return 0;
      },doDup:function (path, flags, suggestFD) {
        var suggest = FS.getStream(suggestFD);
        if (suggest) FS.close(suggest);
        return FS.open(path, flags, 0, suggestFD, suggestFD).fd;
      },doReadv:function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.read(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
          if (curr < len) break; // nothing more to read
        }
        return ret;
      },doWritev:function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.write(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
        }
        return ret;
      },varargs:0,get:function (varargs) {
        SYSCALLS.varargs += 4;
        var ret = HEAP32[(((SYSCALLS.varargs)-(4))>>2)];
        return ret;
      },getStr:function () {
        var ret = Pointer_stringify(SYSCALLS.get());
        return ret;
      },getStreamFromFD:function () {
        var stream = FS.getStream(SYSCALLS.get());
        if (!stream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        return stream;
      },getSocketFromFD:function () {
        var socket = SOCKFS.getSocket(SYSCALLS.get());
        if (!socket) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        return socket;
      },getSocketAddress:function (allowNull) {
        var addrp = SYSCALLS.get(), addrlen = SYSCALLS.get();
        if (allowNull && addrp === 0) return null;
        var info = __read_sockaddr(addrp, addrlen);
        if (info.errno) throw new FS.ErrnoError(info.errno);
        info.addr = DNS.lookup_addr(info.addr) || info.addr;
        return info;
      },get64:function () {
        var low = SYSCALLS.get(), high = SYSCALLS.get();
        if (low >= 0) assert(high === 0);
        else assert(high === -1);
        return low;
      },getZero:function () {
        assert(SYSCALLS.get() === 0);
      }};function ___syscall54(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // ioctl
      var stream = SYSCALLS.getStreamFromFD(), op = SYSCALLS.get();
      switch (op) {
        case 21505: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0;
        }
        case 21506: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0; // no-op, not actually adjusting terminal settings
        }
        case 21519: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          var argp = SYSCALLS.get();
          HEAP32[((argp)>>2)]=0;
          return 0;
        }
        case 21520: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return -ERRNO_CODES.EINVAL; // not supported
        }
        case 21531: {
          var argp = SYSCALLS.get();
          return FS.ioctl(stream, op, argp);
        }
        default: abort('bad ioctl syscall ' + op);
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function _sysconf(name) {
      // long sysconf(int name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/sysconf.html
      switch(name) {
        case 30: return PAGE_SIZE;
        case 85: return totalMemory / PAGE_SIZE;
        case 132:
        case 133:
        case 12:
        case 137:
        case 138:
        case 15:
        case 235:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 149:
        case 13:
        case 10:
        case 236:
        case 153:
        case 9:
        case 21:
        case 22:
        case 159:
        case 154:
        case 14:
        case 77:
        case 78:
        case 139:
        case 80:
        case 81:
        case 82:
        case 68:
        case 67:
        case 164:
        case 11:
        case 29:
        case 47:
        case 48:
        case 95:
        case 52:
        case 51:
        case 46:
          return 200809;
        case 79:
          return 0;
        case 27:
        case 246:
        case 127:
        case 128:
        case 23:
        case 24:
        case 160:
        case 161:
        case 181:
        case 182:
        case 242:
        case 183:
        case 184:
        case 243:
        case 244:
        case 245:
        case 165:
        case 178:
        case 179:
        case 49:
        case 50:
        case 168:
        case 169:
        case 175:
        case 170:
        case 171:
        case 172:
        case 97:
        case 76:
        case 32:
        case 173:
        case 35:
          return -1;
        case 176:
        case 177:
        case 7:
        case 155:
        case 8:
        case 157:
        case 125:
        case 126:
        case 92:
        case 93:
        case 129:
        case 130:
        case 131:
        case 94:
        case 91:
          return 1;
        case 74:
        case 60:
        case 69:
        case 70:
        case 4:
          return 1024;
        case 31:
        case 42:
        case 72:
          return 32;
        case 87:
        case 26:
        case 33:
          return 2147483647;
        case 34:
        case 1:
          return 47839;
        case 38:
        case 36:
          return 99;
        case 43:
        case 37:
          return 2048;
        case 0: return 2097152;
        case 3: return 65536;
        case 28: return 32768;
        case 44: return 32767;
        case 75: return 16384;
        case 39: return 1000;
        case 89: return 700;
        case 71: return 256;
        case 40: return 255;
        case 2: return 100;
        case 180: return 64;
        case 25: return 20;
        case 5: return 16;
        case 6: return 6;
        case 73: return 4;
        case 84: {
          if (typeof navigator === 'object') return navigator['hardwareConcurrency'] || 1;
          return 1;
        }
      }
      ___setErrNo(ERRNO_CODES.EINVAL);
      return -1;
    }

   
  Module["_bitshift64Lshr"] = _bitshift64Lshr;


  var _BDtoIHigh=true;

  function _pthread_cleanup_push(routine, arg) {
      __ATEXIT__.push(function() { Runtime.dynCall('vi', routine, [arg]) })
      _pthread_cleanup_push.level = __ATEXIT__.length;
    }

  function ___cxa_guard_acquire(variable) {
      if (!HEAP8[((variable)>>0)]) { // ignore SAFE_HEAP stuff because llvm mixes i64 and i8 here
        HEAP8[((variable)>>0)]=1;
        return 1;
      }
      return 0;
    }

  function _pthread_cleanup_pop() {
      assert(_pthread_cleanup_push.level == __ATEXIT__.length, 'cannot pop if something else added meanwhile!');
      __ATEXIT__.pop();
      _pthread_cleanup_push.level = __ATEXIT__.length;
    }

  function ___cxa_guard_release() {}

  function _SDL_OpenAudio(desired, obtained) {
      try {
        SDL.audio = {
          freq: HEAPU32[((desired)>>2)],
          format: HEAPU16[(((desired)+(4))>>1)],
          channels: HEAPU8[(((desired)+(6))>>0)],
          samples: HEAPU16[(((desired)+(8))>>1)], // Samples in the CB buffer per single sound channel.
          callback: HEAPU32[(((desired)+(16))>>2)],
          userdata: HEAPU32[(((desired)+(20))>>2)],
          paused: true,
          timer: null
        };
        // The .silence field tells the constant sample value that corresponds to the safe un-skewed silence value for the wave data.
        if (SDL.audio.format == 0x0008 /*AUDIO_U8*/) {
          SDL.audio.silence = 128; // Audio ranges in [0, 255], so silence is half-way in between.
        } else if (SDL.audio.format == 0x8010 /*AUDIO_S16LSB*/) {
          SDL.audio.silence = 0; // Signed data in range [-32768, 32767], silence is 0.
        } else {
          throw 'Invalid SDL audio format ' + SDL.audio.format + '!';
        }
        // Round the desired audio frequency up to the next 'common' frequency value.
        // Web Audio API spec states 'An implementation must support sample-rates in at least the range 22050 to 96000.'
        if (SDL.audio.freq <= 0) {
          throw 'Unsupported sound frequency ' + SDL.audio.freq + '!';
        } else if (SDL.audio.freq <= 22050) {
          SDL.audio.freq = 22050; // Take it safe and clamp everything lower than 22kHz to that.
        } else if (SDL.audio.freq <= 32000) {
          SDL.audio.freq = 32000;
        } else if (SDL.audio.freq <= 44100) {
          SDL.audio.freq = 44100;
        } else if (SDL.audio.freq <= 48000) {
          SDL.audio.freq = 48000;
        } else if (SDL.audio.freq <= 96000) {
          SDL.audio.freq = 96000;
        } else {
          throw 'Unsupported sound frequency ' + SDL.audio.freq + '!';
        }
        if (SDL.audio.channels == 0) {
          SDL.audio.channels = 1; // In SDL both 0 and 1 mean mono.
        } else if (SDL.audio.channels < 0 || SDL.audio.channels > 32) {
          throw 'Unsupported number of audio channels for SDL audio: ' + SDL.audio.channels + '!';
        } else if (SDL.audio.channels != 1 && SDL.audio.channels != 2) { // Unsure what SDL audio spec supports. Web Audio spec supports up to 32 channels.
          console.log('Warning: Using untested number of audio channels ' + SDL.audio.channels);
        }
        if (SDL.audio.samples < 128 || SDL.audio.samples > 524288 /* arbitrary cap */) {
          throw 'Unsupported audio callback buffer size ' + SDL.audio.samples + '!';
        } else if ((SDL.audio.samples & (SDL.audio.samples-1)) != 0) {
          throw 'Audio callback buffer size ' + SDL.audio.samples + ' must be a power-of-two!';
        }
        
        var totalSamples = SDL.audio.samples*SDL.audio.channels;
        SDL.audio.bytesPerSample = (SDL.audio.format == 0x0008 /*AUDIO_U8*/ || SDL.audio.format == 0x8008 /*AUDIO_S8*/) ? 1 : 2;
        SDL.audio.bufferSize = totalSamples*SDL.audio.bytesPerSample;
        SDL.audio.bufferDurationSecs = SDL.audio.bufferSize / SDL.audio.bytesPerSample / SDL.audio.channels / SDL.audio.freq; // Duration of a single queued buffer in seconds.
        SDL.audio.bufferingDelay = 50 / 1000; // Audio samples are played with a constant delay of this many seconds to account for browser and jitter.
        SDL.audio.buffer = _malloc(SDL.audio.bufferSize);
        
        // To account for jittering in frametimes, always have multiple audio buffers queued up for the audio output device.
        // This helps that we won't starve that easily if a frame takes long to complete.
        SDL.audio.numSimultaneouslyQueuedBuffers = Module['SDL_numSimultaneouslyQueuedBuffers'] || 5;
  
        // Pulls and queues new audio data if appropriate. This function gets "over-called" in both requestAnimationFrames and
        // setTimeouts to ensure that we get the finest granularity possible and as many chances from the browser to fill
        // new audio data. This is because setTimeouts alone have very poor granularity for audio streaming purposes, but also
        // the application might not be using emscripten_set_main_loop to drive the main loop, so we cannot rely on that alone.
        SDL.audio.queueNewAudioData = function SDL_queueNewAudioData() {
          if (!SDL.audio) return;
  
          for(var i = 0; i < SDL.audio.numSimultaneouslyQueuedBuffers; ++i) {
            // Only queue new data if we don't have enough audio data already in queue. Otherwise skip this time slot
            // and wait to queue more in the next time the callback is run.
            var secsUntilNextPlayStart = SDL.audio.nextPlayTime - SDL.audioContext['currentTime'];
            if (secsUntilNextPlayStart >= SDL.audio.bufferingDelay + SDL.audio.bufferDurationSecs*SDL.audio.numSimultaneouslyQueuedBuffers) return;
  
            // Ask SDL audio data from the user code.
            Runtime.dynCall('viii', SDL.audio.callback, [SDL.audio.userdata, SDL.audio.buffer, SDL.audio.bufferSize]);
            // And queue it to be played after the currently playing audio stream.
            SDL.audio.pushAudio(SDL.audio.buffer, SDL.audio.bufferSize);
          }
        } 
  
  
        // Create a callback function that will be routinely called to ask more audio data from the user application.
        SDL.audio.caller = function SDL_audioCaller() {
          if (!SDL.audio) return;
  
          --SDL.audio.numAudioTimersPending;
  
          SDL.audio.queueNewAudioData();
  
          // Queue this callback function to be called again later to pull more audio data.
          var secsUntilNextPlayStart = SDL.audio.nextPlayTime - SDL.audioContext['currentTime'];
  
          // Queue the next audio frame push to be performed half-way when the previously queued buffer has finished playing.
          var preemptBufferFeedSecs = SDL.audio.bufferDurationSecs/2.0;
  
          if (SDL.audio.numAudioTimersPending < SDL.audio.numSimultaneouslyQueuedBuffers) {
            ++SDL.audio.numAudioTimersPending;
            SDL.audio.timer = Browser.safeSetTimeout(SDL.audio.caller, Math.max(0.0, 1000.0*(secsUntilNextPlayStart-preemptBufferFeedSecs)));
  
            // If we are risking starving, immediately queue an extra buffer.
            if (SDL.audio.numAudioTimersPending < SDL.audio.numSimultaneouslyQueuedBuffers) {
              ++SDL.audio.numAudioTimersPending;
              Browser.safeSetTimeout(SDL.audio.caller, 1.0);
            }
          }
        };
        
        SDL.audio.audioOutput = new Audio();
  
        // Initialize Web Audio API if we haven't done so yet. Note: Only initialize Web Audio context ever once on the web page,
        // since initializing multiple times fails on Chrome saying 'audio resources have been exhausted'.
        SDL.openAudioContext();
        if (!SDL.audioContext) throw 'Web Audio API is not available!';
        SDL.audio.nextPlayTime = 0; // Time in seconds when the next audio block is due to start.
        
        // The pushAudio function with a new audio buffer whenever there is new audio data to schedule to be played back on the device.
        SDL.audio.pushAudio=function(ptr,sizeBytes) {
          try {
            if (SDL.audio.paused) return;
  
            var sizeSamples = sizeBytes / SDL.audio.bytesPerSample; // How many samples fit in the callback buffer?
            var sizeSamplesPerChannel = sizeSamples / SDL.audio.channels; // How many samples per a single channel fit in the cb buffer?
            if (sizeSamplesPerChannel != SDL.audio.samples) {
              throw 'Received mismatching audio buffer size!';
            }
            // Allocate new sound buffer to be played.
            var source = SDL.audioContext['createBufferSource']();
            var soundBuffer = SDL.audioContext['createBuffer'](SDL.audio.channels,sizeSamplesPerChannel,SDL.audio.freq);
            source['connect'](SDL.audioContext['destination']);
  
            SDL.fillWebAudioBufferFromHeap(ptr, sizeSamplesPerChannel, soundBuffer);
            // Workaround https://bugzilla.mozilla.org/show_bug.cgi?id=883675 by setting the buffer only after filling. The order is important here!
            source['buffer'] = soundBuffer;
            
            // Schedule the generated sample buffer to be played out at the correct time right after the previously scheduled
            // sample buffer has finished.
            var curtime = SDL.audioContext['currentTime'];
            if (curtime > SDL.audio.nextPlayTime && SDL.audio.nextPlayTime != 0) {
              console.log('warning: Audio callback had starved sending audio by ' + (curtime - SDL.audio.nextPlayTime) + ' seconds.');
            }
            // Don't ever start buffer playbacks earlier from current time than a given constant 'SDL.audio.bufferingDelay', since a browser 
            // may not be able to mix that audio clip in immediately, and there may be subsequent jitter that might cause the stream to starve.
            var playtime = Math.max(curtime + SDL.audio.bufferingDelay, SDL.audio.nextPlayTime);
            if (typeof source['start'] !== 'undefined') {
              source['start'](playtime); // New Web Audio API: sound sources are started with a .start() call.
            } else if (typeof source['noteOn'] !== 'undefined') {
              source['noteOn'](playtime); // Support old Web Audio API specification which had the .noteOn() API.
            }
            /*
            // Uncomment to debug SDL buffer feed starves.
            if (SDL.audio.curBufferEnd) {
              var thisBufferStart = Math.round(playtime * SDL.audio.freq);
              if (thisBufferStart != SDL.audio.curBufferEnd) console.log('SDL starved ' + (thisBufferStart - SDL.audio.curBufferEnd) + ' samples!');
            }
            SDL.audio.curBufferEnd = Math.round(playtime * SDL.audio.freq + sizeSamplesPerChannel);
            */
            
            SDL.audio.nextPlayTime = playtime + SDL.audio.bufferDurationSecs;
          } catch(e) {
            console.log('Web Audio API error playing back audio: ' + e.toString());
          }
        }
  
        if (obtained) {
          // Report back the initialized audio parameters.
          HEAP32[((obtained)>>2)]=SDL.audio.freq;
          HEAP16[(((obtained)+(4))>>1)]=SDL.audio.format;
          HEAP8[(((obtained)+(6))>>0)]=SDL.audio.channels;
          HEAP8[(((obtained)+(7))>>0)]=SDL.audio.silence;
          HEAP16[(((obtained)+(8))>>1)]=SDL.audio.samples;
          HEAP32[(((obtained)+(16))>>2)]=SDL.audio.callback;
          HEAP32[(((obtained)+(20))>>2)]=SDL.audio.userdata;
        }
        SDL.allocateChannels(32);
  
      } catch(e) {
        console.log('Initializing SDL audio threw an exception: "' + e.toString() + '"! Continuing without audio.');
        SDL.audio = null;
        SDL.allocateChannels(0);
        if (obtained) {
          HEAP32[((obtained)>>2)]=0;
          HEAP16[(((obtained)+(4))>>1)]=0;
          HEAP8[(((obtained)+(6))>>0)]=0;
          HEAP8[(((obtained)+(7))>>0)]=0;
          HEAP16[(((obtained)+(8))>>1)]=0;
          HEAP32[(((obtained)+(16))>>2)]=0;
          HEAP32[(((obtained)+(20))>>2)]=0;
        }
      }
      if (!SDL.audio) {
        return -1;
      }
      return 0;
    }

  function ___syscall5(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // open
      var pathname = SYSCALLS.getStr(), flags = SYSCALLS.get(), mode = SYSCALLS.get() // optional TODO
      var stream = FS.open(pathname, flags, mode);
      return stream.fd;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
      return dest;
    } 
  Module["_memcpy"] = _memcpy;

  function ___syscall6(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // close
      var stream = SYSCALLS.getStreamFromFD();
      FS.close(stream);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function _SDL_UnlockSurface(surf) {
      assert(!SDL.GL); // in GL mode we do not keep around 2D canvases and contexts
  
      var surfData = SDL.surfaces[surf];
  
      if (!surfData.locked || --surfData.locked > 0) {
        return;
      }
  
      // Copy pixel data to image
      if (surfData.isFlagSet(0x00200000 /* SDL_HWPALETTE */)) {
        SDL.copyIndexedColorData(surfData);
      } else if (!surfData.colors) {
        var data = surfData.image.data;
        var buffer = surfData.buffer;
        assert(buffer % 4 == 0, 'Invalid buffer offset: ' + buffer);
        var src = buffer >> 2;
        var dst = 0;
        var isScreen = surf == SDL.screen;
        var num;
        if (typeof CanvasPixelArray !== 'undefined' && data instanceof CanvasPixelArray) {
          // IE10/IE11: ImageData objects are backed by the deprecated CanvasPixelArray,
          // not UInt8ClampedArray. These don't have buffers, so we need to revert
          // to copying a byte at a time. We do the undefined check because modern
          // browsers do not define CanvasPixelArray anymore.
          num = data.length;
          while (dst < num) {
            var val = HEAP32[src]; // This is optimized. Instead, we could do HEAP32[(((buffer)+(dst))>>2)];
            data[dst  ] = val & 0xff;
            data[dst+1] = (val >> 8) & 0xff;
            data[dst+2] = (val >> 16) & 0xff;
            data[dst+3] = isScreen ? 0xff : ((val >> 24) & 0xff);
            src++;
            dst += 4;
          }
        } else {
          var data32 = new Uint32Array(data.buffer);
          if (isScreen && SDL.defaults.opaqueFrontBuffer) {
            num = data32.length;
            // logically we need to do
            //      while (dst < num) {
            //          data32[dst++] = HEAP32[src++] | 0xff000000
            //      }
            // the following code is faster though, because
            // .set() is almost free - easily 10x faster due to
            // native memcpy efficiencies, and the remaining loop
            // just stores, not load + store, so it is faster
            data32.set(HEAP32.subarray(src, src + num));
            var data8 = new Uint8Array(data.buffer);
            var i = 3;
            var j = i + 4*num;
            if (num % 8 == 0) {
              // unrolling gives big speedups
              while (i < j) {
                data8[i] = 0xff;
                i = i + 4 | 0;
                data8[i] = 0xff;
                i = i + 4 | 0;
                data8[i] = 0xff;
                i = i + 4 | 0;
                data8[i] = 0xff;
                i = i + 4 | 0;
                data8[i] = 0xff;
                i = i + 4 | 0;
                data8[i] = 0xff;
                i = i + 4 | 0;
                data8[i] = 0xff;
                i = i + 4 | 0;
                data8[i] = 0xff;
                i = i + 4 | 0;
              }
             } else {
              while (i < j) {
                data8[i] = 0xff;
                i = i + 4 | 0;
              }
            }
          } else {
            data32.set(HEAP32.subarray(src, src + data32.length));
          }
        }
      } else {
        var width = Module['canvas'].width;
        var height = Module['canvas'].height;
        var s = surfData.buffer;
        var data = surfData.image.data;
        var colors = surfData.colors; // TODO: optimize using colors32
        for (var y = 0; y < height; y++) {
          var base = y*width*4;
          for (var x = 0; x < width; x++) {
            // See comment above about signs
            var val = HEAPU8[((s++)>>0)] * 4;
            var start = base + x*4;
            data[start]   = colors[val];
            data[start+1] = colors[val+1];
            data[start+2] = colors[val+2];
          }
          s += width*3;
        }
      }
      // Copy to canvas
      surfData.ctx.putImageData(surfData.image, 0, 0);
      // Note that we save the image, so future writes are fast. But, memory is not yet released
    }

  function _SDL_PollEvent(ptr) {
      return SDL.pollEvent(ptr);
    }

  function _sbrk(bytes) {
      // Implement a Linux-like 'memory area' for our 'process'.
      // Changes the size of the memory area by |bytes|; returns the
      // address of the previous top ('break') of the memory area
      // We control the "dynamic" memory - DYNAMIC_BASE to DYNAMICTOP
      var self = _sbrk;
      if (!self.called) {
        DYNAMICTOP = alignMemoryPage(DYNAMICTOP); // make sure we start out aligned
        self.called = true;
        assert(Runtime.dynamicAlloc);
        self.alloc = Runtime.dynamicAlloc;
        Runtime.dynamicAlloc = function() { abort('cannot dynamically allocate, sbrk now has control') };
      }
      var ret = DYNAMICTOP;
      if (bytes != 0) {
        var success = self.alloc(bytes);
        if (!success) return -1 >>> 0; // sbrk failure code
      }
      return ret;  // Previous break location.
    }

   
  Module["_bitshift64Shl"] = _bitshift64Shl;

  function ___cxa_guard_abort() {}

  function ___cxa_allocate_exception(size) {
      return _malloc(size);
    }

  var _emscripten_preinvoke=true;

  var _BItoD=true;

  function _SDL_Init(initFlags) {
      SDL.startTime = Date.now();
      SDL.initFlags = initFlags;
  
      // capture all key events. we just keep down and up, but also capture press to prevent default actions
      if (!Module['doNotCaptureKeyboard']) {
        var keyboardListeningElement = Module['keyboardListeningElement'] || document;
        keyboardListeningElement.addEventListener("keydown", SDL.receiveEvent);
        keyboardListeningElement.addEventListener("keyup", SDL.receiveEvent);
        keyboardListeningElement.addEventListener("keypress", SDL.receiveEvent);
        window.addEventListener("focus", SDL.receiveEvent);
        window.addEventListener("blur", SDL.receiveEvent);
        document.addEventListener("visibilitychange", SDL.receiveEvent);
      }
  
      if (initFlags & 0x200) {
        // SDL_INIT_JOYSTICK
        // Firefox will not give us Joystick data unless we register this NOP
        // callback.
        // https://bugzilla.mozilla.org/show_bug.cgi?id=936104
        addEventListener("gamepadconnected", function() {});
      }
  
      window.addEventListener("unload", SDL.receiveEvent);
      SDL.keyboardState = _malloc(0x10000); // Our SDL needs 512, but 64K is safe for older SDLs
      _memset(SDL.keyboardState, 0, 0x10000);
      // Initialize this structure carefully for closure
      SDL.DOMEventToSDLEvent['keydown']    = 0x300  /* SDL_KEYDOWN */;
      SDL.DOMEventToSDLEvent['keyup']      = 0x301  /* SDL_KEYUP */;
      SDL.DOMEventToSDLEvent['keypress']   = 0x303  /* SDL_TEXTINPUT */;
      SDL.DOMEventToSDLEvent['mousedown']  = 0x401  /* SDL_MOUSEBUTTONDOWN */;
      SDL.DOMEventToSDLEvent['mouseup']    = 0x402  /* SDL_MOUSEBUTTONUP */;
      SDL.DOMEventToSDLEvent['mousemove']  = 0x400  /* SDL_MOUSEMOTION */;
      SDL.DOMEventToSDLEvent['wheel']      = 0x403  /* SDL_MOUSEWHEEL */; 
      SDL.DOMEventToSDLEvent['touchstart'] = 0x700  /* SDL_FINGERDOWN */;
      SDL.DOMEventToSDLEvent['touchend']   = 0x701  /* SDL_FINGERUP */;
      SDL.DOMEventToSDLEvent['touchmove']  = 0x702  /* SDL_FINGERMOTION */;
      SDL.DOMEventToSDLEvent['unload']     = 0x100  /* SDL_QUIT */;
      SDL.DOMEventToSDLEvent['resize']     = 0x7001 /* SDL_VIDEORESIZE/SDL_EVENT_COMPAT2 */;
      SDL.DOMEventToSDLEvent['visibilitychange'] = 0x200 /* SDL_WINDOWEVENT */;
      SDL.DOMEventToSDLEvent['focus']      = 0x200 /* SDL_WINDOWEVENT */;
      SDL.DOMEventToSDLEvent['blur']       = 0x200 /* SDL_WINDOWEVENT */;
  
      // These are not technically DOM events; the HTML gamepad API is poll-based.
      // However, we define them here, as the rest of the SDL code assumes that
      // all SDL events originate as DOM events.
      SDL.DOMEventToSDLEvent['joystick_axis_motion'] = 0x600 /* SDL_JOYAXISMOTION */;
      SDL.DOMEventToSDLEvent['joystick_button_down'] = 0x603 /* SDL_JOYBUTTONDOWN */;
      SDL.DOMEventToSDLEvent['joystick_button_up'] = 0x604 /* SDL_JOYBUTTONUP */;
      return 0; // success
    }

  
  function _SDL_AudioQuit() {
      for (var i = 0; i < SDL.numChannels; ++i) {
        if (SDL.channels[i].audio) {
          SDL.channels[i].audio.pause();
          SDL.channels[i].audio = undefined;
        }
      }
      if (SDL.music.audio) SDL.music.audio.pause();
      SDL.music.audio = undefined;
    }function _SDL_Quit() {
      _SDL_AudioQuit();
      Module.print('SDL_Quit called (and ignored)');
    }

  function _time(ptr) {
      var ret = (Date.now()/1000)|0;
      if (ptr) {
        HEAP32[((ptr)>>2)]=ret;
      }
      return ret;
    }

  function _pthread_self() {
      //FIXME: assumes only a single thread
      return 0;
    }

  function ___syscall140(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // llseek
      var stream = SYSCALLS.getStreamFromFD(), offset_high = SYSCALLS.get(), offset_low = SYSCALLS.get(), result = SYSCALLS.get(), whence = SYSCALLS.get();
      var offset = offset_low;
      assert(offset_high === 0);
      FS.llseek(stream, offset, whence);
      HEAP32[((result)>>2)]=stream.position;
      if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null; // reset readdir state
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall146(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // writev
      var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      return SYSCALLS.doWritev(stream, iov, iovcnt);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall221(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // fcntl64
      var stream = SYSCALLS.getStreamFromFD(), cmd = SYSCALLS.get();
      switch (cmd) {
        case 0: {
          var arg = SYSCALLS.get();
          if (arg < 0) {
            return -ERRNO_CODES.EINVAL;
          }
          var newStream;
          newStream = FS.open(stream.path, stream.flags, 0, arg);
          return newStream.fd;
        }
        case 1:
        case 2:
          return 0;  // FD_CLOEXEC makes no sense for a single process.
        case 3:
          return stream.flags;
        case 4: {
          var arg = SYSCALLS.get();
          stream.flags |= arg;
          return 0;
        }
        case 12:
        case 12: {
          var arg = SYSCALLS.get();
          var offset = 0;
          // We're always unlocked.
          HEAP16[(((arg)+(offset))>>1)]=2;
          return 0;
        }
        case 13:
        case 14:
        case 13:
        case 14:
          return 0; // Pretend that the locking is successful.
        case 16:
        case 8:
          return -ERRNO_CODES.EINVAL; // These are for sockets. We don't have them fully implemented yet.
        case 9:
          // musl trusts getown return values, due to a bug where they must be, as they overlap with errors. just return -1 here, so fnctl() returns that, and we set errno ourselves.
          ___setErrNo(ERRNO_CODES.EINVAL);
          return -1;
        default: {
          return -ERRNO_CODES.EINVAL;
        }
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall145(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // readv
      var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      return SYSCALLS.doReadv(stream, iov, iovcnt);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
FS.staticInit();__ATINIT__.unshift(function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() });__ATMAIN__.push(function() { FS.ignorePermissions = false });__ATEXIT__.push(function() { FS.quit() });Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;Module["FS_unlink"] = FS.unlink;
__ATINIT__.unshift(function() { TTY.init() });__ATEXIT__.push(function() { TTY.shutdown() });
if (ENVIRONMENT_IS_NODE) { var fs = require("fs"); var NODEJS_PATH = require("path"); NODEFS.staticInit(); }
Module["requestFullScreen"] = function Module_requestFullScreen(lockPointer, resizeCanvas, vrDevice) { Browser.requestFullScreen(lockPointer, resizeCanvas, vrDevice) };
  Module["requestAnimationFrame"] = function Module_requestAnimationFrame(func) { Browser.requestAnimationFrame(func) };
  Module["setCanvasSize"] = function Module_setCanvasSize(width, height, noUpdates) { Browser.setCanvasSize(width, height, noUpdates) };
  Module["pauseMainLoop"] = function Module_pauseMainLoop() { Browser.mainLoop.pause() };
  Module["resumeMainLoop"] = function Module_resumeMainLoop() { Browser.mainLoop.resume() };
  Module["getUserMedia"] = function Module_getUserMedia() { Browser.getUserMedia() }
  Module["createContext"] = function Module_createContext(canvas, useWebGL, setInModule, webGLContextAttributes) { return Browser.createContext(canvas, useWebGL, setInModule, webGLContextAttributes) }
___buildEnvironment(ENV);
var GLctx; GL.init()
STACK_BASE = STACKTOP = Runtime.alignMemory(STATICTOP);

staticSealed = true; // seal the static portion of memory

STACK_MAX = STACK_BASE + TOTAL_STACK;

DYNAMIC_BASE = DYNAMICTOP = Runtime.alignMemory(STACK_MAX);

assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");

 var cttz_i8 = allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0], "i8", ALLOC_DYNAMIC);


function nullFunc_iiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_i(x) { Module["printErr"]("Invalid function pointer called with signature 'i'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vi(x) { Module["printErr"]("Invalid function pointer called with signature 'vi'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vii(x) { Module["printErr"]("Invalid function pointer called with signature 'vii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_ii(x) { Module["printErr"]("Invalid function pointer called with signature 'ii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viii(x) { Module["printErr"]("Invalid function pointer called with signature 'viii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_v(x) { Module["printErr"]("Invalid function pointer called with signature 'v'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function invoke_iiii(index,a1,a2,a3) {
  try {
    return Module["dynCall_iiii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiii(index,a1,a2,a3,a4,a5) {
  try {
    Module["dynCall_viiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_i(index) {
  try {
    return Module["dynCall_i"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vi(index,a1) {
  try {
    Module["dynCall_vi"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vii(index,a1,a2) {
  try {
    Module["dynCall_vii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_ii(index,a1) {
  try {
    return Module["dynCall_ii"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viii(index,a1,a2,a3) {
  try {
    Module["dynCall_viii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_v(index) {
  try {
    Module["dynCall_v"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiii(index,a1,a2,a3,a4,a5,a6) {
  try {
    Module["dynCall_viiiiii"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiii(index,a1,a2,a3,a4) {
  try {
    Module["dynCall_viiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

Module.asmGlobalArg = { "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array, "NaN": NaN, "Infinity": Infinity };

Module.asmLibraryArg = { "abort": abort, "assert": assert, "nullFunc_iiii": nullFunc_iiii, "nullFunc_viiiii": nullFunc_viiiii, "nullFunc_i": nullFunc_i, "nullFunc_vi": nullFunc_vi, "nullFunc_vii": nullFunc_vii, "nullFunc_ii": nullFunc_ii, "nullFunc_viii": nullFunc_viii, "nullFunc_v": nullFunc_v, "nullFunc_viiiiii": nullFunc_viiiiii, "nullFunc_viiii": nullFunc_viiii, "invoke_iiii": invoke_iiii, "invoke_viiiii": invoke_viiiii, "invoke_i": invoke_i, "invoke_vi": invoke_vi, "invoke_vii": invoke_vii, "invoke_ii": invoke_ii, "invoke_viii": invoke_viii, "invoke_v": invoke_v, "invoke_viiiiii": invoke_viiiiii, "invoke_viiii": invoke_viiii, "_pthread_cleanup_pop": _pthread_cleanup_pop, "___syscall221": ___syscall221, "_putenv": _putenv, "_SDL_SetVideoMode": _SDL_SetVideoMode, "___resumeException": ___resumeException, "_pthread_cleanup_push": _pthread_cleanup_push, "_IMG_Load": _IMG_Load, "_abort": _abort, "___cxa_guard_acquire": ___cxa_guard_acquire, "_TTF_FontHeight": _TTF_FontHeight, "_SDL_CloseAudio": _SDL_CloseAudio, "_emscripten_set_main_loop_timing": _emscripten_set_main_loop_timing, "_SDL_GetTicks": _SDL_GetTicks, "___gxx_personality_v0": ___gxx_personality_v0, "___assert_fail": ___assert_fail, "___cxa_allocate_exception": ___cxa_allocate_exception, "__ZSt18uncaught_exceptionv": __ZSt18uncaught_exceptionv, "___buildEnvironment": ___buildEnvironment, "___cxa_guard_abort": ___cxa_guard_abort, "___cxa_guard_release": ___cxa_guard_release, "_SDL_LockSurface": _SDL_LockSurface, "_SDL_GetError": _SDL_GetError, "___setErrNo": ___setErrNo, "_sbrk": _sbrk, "_SDL_Init": _SDL_Init, "_SDL_OpenAudio": _SDL_OpenAudio, "_SDL_FreeRW": _SDL_FreeRW, "_Mix_PlayChannel": _Mix_PlayChannel, "_TTF_RenderText_Solid": _TTF_RenderText_Solid, "_Mix_LoadWAV_RW": _Mix_LoadWAV_RW, "_SDL_PauseAudio": _SDL_PauseAudio, "__exit": __exit, "_IMG_Load_RW": _IMG_Load_RW, "_SDL_PollEvent": _SDL_PollEvent, "_Mix_FreeChunk": _Mix_FreeChunk, "_emscripten_memcpy_big": _emscripten_memcpy_big, "_SDL_Quit": _SDL_Quit, "_pthread_self": _pthread_self, "_TTF_SizeText": _TTF_SizeText, "_SDL_UpperBlitScaled": _SDL_UpperBlitScaled, "___syscall54": ___syscall54, "___unlock": ___unlock, "___syscall140": ___syscall140, "_SDL_AudioQuit": _SDL_AudioQuit, "_emscripten_set_main_loop": _emscripten_set_main_loop, "_Mix_PlayMusic": _Mix_PlayMusic, "_getenv": _getenv, "___cxa_throw": ___cxa_throw, "_sysconf": _sysconf, "___lock": ___lock, "_SDL_UnlockSurface": _SDL_UnlockSurface, "___syscall6": ___syscall6, "___syscall5": ___syscall5, "_time": _time, "_Mix_HaltMusic": _Mix_HaltMusic, "_SDL_Flip": _SDL_Flip, "_atexit": _atexit, "_SDL_UpperBlit": _SDL_UpperBlit, "_exit": _exit, "_SDL_RWFromConstMem": _SDL_RWFromConstMem, "___cxa_find_matching_catch": ___cxa_find_matching_catch, "___syscall145": ___syscall145, "___syscall146": ___syscall146, "_SDL_RWFromFile": _SDL_RWFromFile, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX, "tempDoublePtr": tempDoublePtr, "ABORT": ABORT, "cttz_i8": cttz_i8 };
// EMSCRIPTEN_START_ASM
var asm = (function(global, env, buffer) {
  'almost asm';
  
  
  var HEAP8 = new global.Int8Array(buffer);
  var HEAP16 = new global.Int16Array(buffer);
  var HEAP32 = new global.Int32Array(buffer);
  var HEAPU8 = new global.Uint8Array(buffer);
  var HEAPU16 = new global.Uint16Array(buffer);
  var HEAPU32 = new global.Uint32Array(buffer);
  var HEAPF32 = new global.Float32Array(buffer);
  var HEAPF64 = new global.Float64Array(buffer);


  var STACKTOP=env.STACKTOP|0;
  var STACK_MAX=env.STACK_MAX|0;
  var tempDoublePtr=env.tempDoublePtr|0;
  var ABORT=env.ABORT|0;
  var cttz_i8=env.cttz_i8|0;

  var __THREW__ = 0;
  var threwValue = 0;
  var setjmpId = 0;
  var undef = 0;
  var nan = global.NaN, inf = global.Infinity;
  var tempInt = 0, tempBigInt = 0, tempBigIntP = 0, tempBigIntS = 0, tempBigIntR = 0.0, tempBigIntI = 0, tempBigIntD = 0, tempValue = 0, tempDouble = 0.0;

  var tempRet0 = 0;
  var tempRet1 = 0;
  var tempRet2 = 0;
  var tempRet3 = 0;
  var tempRet4 = 0;
  var tempRet5 = 0;
  var tempRet6 = 0;
  var tempRet7 = 0;
  var tempRet8 = 0;
  var tempRet9 = 0;
  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var Math_min=global.Math.min;
  var Math_clz32=global.Math.clz32;
  var abort=env.abort;
  var assert=env.assert;
  var nullFunc_iiii=env.nullFunc_iiii;
  var nullFunc_viiiii=env.nullFunc_viiiii;
  var nullFunc_i=env.nullFunc_i;
  var nullFunc_vi=env.nullFunc_vi;
  var nullFunc_vii=env.nullFunc_vii;
  var nullFunc_ii=env.nullFunc_ii;
  var nullFunc_viii=env.nullFunc_viii;
  var nullFunc_v=env.nullFunc_v;
  var nullFunc_viiiiii=env.nullFunc_viiiiii;
  var nullFunc_viiii=env.nullFunc_viiii;
  var invoke_iiii=env.invoke_iiii;
  var invoke_viiiii=env.invoke_viiiii;
  var invoke_i=env.invoke_i;
  var invoke_vi=env.invoke_vi;
  var invoke_vii=env.invoke_vii;
  var invoke_ii=env.invoke_ii;
  var invoke_viii=env.invoke_viii;
  var invoke_v=env.invoke_v;
  var invoke_viiiiii=env.invoke_viiiiii;
  var invoke_viiii=env.invoke_viiii;
  var _pthread_cleanup_pop=env._pthread_cleanup_pop;
  var ___syscall221=env.___syscall221;
  var _putenv=env._putenv;
  var _SDL_SetVideoMode=env._SDL_SetVideoMode;
  var ___resumeException=env.___resumeException;
  var _pthread_cleanup_push=env._pthread_cleanup_push;
  var _IMG_Load=env._IMG_Load;
  var _abort=env._abort;
  var ___cxa_guard_acquire=env.___cxa_guard_acquire;
  var _TTF_FontHeight=env._TTF_FontHeight;
  var _SDL_CloseAudio=env._SDL_CloseAudio;
  var _emscripten_set_main_loop_timing=env._emscripten_set_main_loop_timing;
  var _SDL_GetTicks=env._SDL_GetTicks;
  var ___gxx_personality_v0=env.___gxx_personality_v0;
  var ___assert_fail=env.___assert_fail;
  var ___cxa_allocate_exception=env.___cxa_allocate_exception;
  var __ZSt18uncaught_exceptionv=env.__ZSt18uncaught_exceptionv;
  var ___buildEnvironment=env.___buildEnvironment;
  var ___cxa_guard_abort=env.___cxa_guard_abort;
  var ___cxa_guard_release=env.___cxa_guard_release;
  var _SDL_LockSurface=env._SDL_LockSurface;
  var _SDL_GetError=env._SDL_GetError;
  var ___setErrNo=env.___setErrNo;
  var _sbrk=env._sbrk;
  var _SDL_Init=env._SDL_Init;
  var _SDL_OpenAudio=env._SDL_OpenAudio;
  var _SDL_FreeRW=env._SDL_FreeRW;
  var _Mix_PlayChannel=env._Mix_PlayChannel;
  var _TTF_RenderText_Solid=env._TTF_RenderText_Solid;
  var _Mix_LoadWAV_RW=env._Mix_LoadWAV_RW;
  var _SDL_PauseAudio=env._SDL_PauseAudio;
  var __exit=env.__exit;
  var _IMG_Load_RW=env._IMG_Load_RW;
  var _SDL_PollEvent=env._SDL_PollEvent;
  var _Mix_FreeChunk=env._Mix_FreeChunk;
  var _emscripten_memcpy_big=env._emscripten_memcpy_big;
  var _SDL_Quit=env._SDL_Quit;
  var _pthread_self=env._pthread_self;
  var _TTF_SizeText=env._TTF_SizeText;
  var _SDL_UpperBlitScaled=env._SDL_UpperBlitScaled;
  var ___syscall54=env.___syscall54;
  var ___unlock=env.___unlock;
  var ___syscall140=env.___syscall140;
  var _SDL_AudioQuit=env._SDL_AudioQuit;
  var _emscripten_set_main_loop=env._emscripten_set_main_loop;
  var _Mix_PlayMusic=env._Mix_PlayMusic;
  var _getenv=env._getenv;
  var ___cxa_throw=env.___cxa_throw;
  var _sysconf=env._sysconf;
  var ___lock=env.___lock;
  var _SDL_UnlockSurface=env._SDL_UnlockSurface;
  var ___syscall6=env.___syscall6;
  var ___syscall5=env.___syscall5;
  var _time=env._time;
  var _Mix_HaltMusic=env._Mix_HaltMusic;
  var _SDL_Flip=env._SDL_Flip;
  var _atexit=env._atexit;
  var _SDL_UpperBlit=env._SDL_UpperBlit;
  var _exit=env._exit;
  var _SDL_RWFromConstMem=env._SDL_RWFromConstMem;
  var ___cxa_find_matching_catch=env.___cxa_find_matching_catch;
  var ___syscall145=env.___syscall145;
  var ___syscall146=env.___syscall146;
  var _SDL_RWFromFile=env._SDL_RWFromFile;
  var tempFloat = 0.0;

// EMSCRIPTEN_START_FUNCS
function stackAlloc(size) {
  size = size|0;
  var ret = 0;
  ret = STACKTOP;
  STACKTOP = (STACKTOP + size)|0;
  STACKTOP = (STACKTOP + 15)&-16;
if ((STACKTOP|0) >= (STACK_MAX|0)) abort();

  return ret|0;
}
function stackSave() {
  return STACKTOP|0;
}
function stackRestore(top) {
  top = top|0;
  STACKTOP = top;
}
function establishStackSpace(stackBase, stackMax) {
  stackBase = stackBase|0;
  stackMax = stackMax|0;
  STACKTOP = stackBase;
  STACK_MAX = stackMax;
}

function setThrew(threw, value) {
  threw = threw|0;
  value = value|0;
  if ((__THREW__|0) == 0) {
    __THREW__ = threw;
    threwValue = value;
  }
}
function copyTempFloat(ptr) {
  ptr = ptr|0;
  HEAP8[tempDoublePtr>>0] = HEAP8[ptr>>0];
  HEAP8[tempDoublePtr+1>>0] = HEAP8[ptr+1>>0];
  HEAP8[tempDoublePtr+2>>0] = HEAP8[ptr+2>>0];
  HEAP8[tempDoublePtr+3>>0] = HEAP8[ptr+3>>0];
}
function copyTempDouble(ptr) {
  ptr = ptr|0;
  HEAP8[tempDoublePtr>>0] = HEAP8[ptr>>0];
  HEAP8[tempDoublePtr+1>>0] = HEAP8[ptr+1>>0];
  HEAP8[tempDoublePtr+2>>0] = HEAP8[ptr+2>>0];
  HEAP8[tempDoublePtr+3>>0] = HEAP8[ptr+3>>0];
  HEAP8[tempDoublePtr+4>>0] = HEAP8[ptr+4>>0];
  HEAP8[tempDoublePtr+5>>0] = HEAP8[ptr+5>>0];
  HEAP8[tempDoublePtr+6>>0] = HEAP8[ptr+6>>0];
  HEAP8[tempDoublePtr+7>>0] = HEAP8[ptr+7>>0];
}

function setTempRet0(value) {
  value = value|0;
  tempRet0 = value;
}
function getTempRet0() {
  return tempRet0|0;
}

function ___cxx_global_var_init() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN6NesApuC2Ev(8);
 return;
}
function __ZN6NesApuC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 24|0);
 __ZN11CChannelSqrC2Ev($2);
 $3 = ((($1)) + 144|0);
 __ZN11CChannelSqrC2Ev($3);
 $4 = ((($1)) + 264|0);
 __ZN11CChannelTriC2Ev($4);
 $5 = ((($1)) + 352|0);
 __ZN11CChannelNoiC2Ev($5);
 $6 = ((($1)) + 456|0);
 __ZN11CChannelDpmC2Ev($6);
 $7 = ((($1)) + 8|0);
 HEAPF32[$7>>2] = 40.584400177001953;
 $8 = ((($1)) + 12|0);
 HEAPF32[$8>>2] = 1789772.0;
 $9 = ((($1)) + 540|0);
 HEAP32[$9>>2] = 0;
 $10 = ((($1)) + 544|0);
 HEAP8[$10>>0] = 0;
 $11 = ((($1)) + 545|0);
 HEAP8[$11>>0] = 0;
 STACKTOP = sp;return;
}
function __Z11APUEndFramev() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $a = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $i = 0;
 while(1) {
  $0 = $i;
  $1 = ($0|0)<(734);
  if (!($1)) {
   break;
  }
  $2 = (__ZN6NesApu10PullSampleEv(8)|0);
  $a = $2;
  $3 = $a;
  $4 = $3&65535;
  $5 = $i;
  $6 = (429556 + ($5<<1)|0);
  HEAP16[$6>>1] = $4;
  $7 = $i;
  $8 = (($7) + 1)|0;
  $i = $8;
 }
 __Z14APUPlaySamplesPvl(429556,734);
 STACKTOP = sp;return;
}
function __ZN6NesApu10PullSampleEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 while(1) {
  $2 = HEAP32[$1>>2]|0;
  $3 = ((($1)) + 4|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($2|0)>=($4|0);
  if (!($5)) {
   break;
  }
  $6 = ((($1)) + 8|0);
  $7 = +HEAPF32[$6>>2];
  __ZN6NesApu9AddSampleEf($1,$7);
 }
 $8 = HEAP32[$1>>2]|0;
 $9 = (($8) + 1)|0;
 HEAP32[$1>>2] = $9;
 $10 = (($8|0) % 44100)&-1;
 $11 = (760 + ($10<<2)|0);
 $12 = HEAP32[$11>>2]|0;
 STACKTOP = sp;return ($12|0);
}
function __Z8APUResetv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN6NesApu10InitializeEb(8,1);
 return;
}
function __ZN6NesApu10InitializeEb($this,$initializing) {
 $this = $this|0;
 $initializing = $initializing|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $2 = $initializing&1;
 $1 = $2;
 $3 = $0;
 $4 = ((($3)) + 536|0);
 HEAP8[$4>>0] = 1;
 $5 = HEAP32[177288>>2]|0;
 $6 = (($5) - 11)|0;
 $7 = ((($3)) + 540|0);
 HEAP32[$7>>2] = $6;
 STACKTOP = sp;return;
}
function __Z12APUWriteByteth($addr,$data) {
 $addr = $addr|0;
 $data = $data|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $addr;
 $1 = $data;
 $2 = $0;
 $3 = $2&65535;
 do {
  switch ($3|0) {
  case 16384:  {
   $4 = $0;
   $5 = $4&65535;
   $6 = $1;
   __ZN11CChannelSqr5Poke1Eih((32),$5,$6);
   break;
  }
  case 16385:  {
   $7 = $0;
   $8 = $7&65535;
   $9 = $1;
   __ZN11CChannelSqr5Poke2Eih((32),$8,$9);
   break;
  }
  case 16386:  {
   $10 = $0;
   $11 = $10&65535;
   $12 = $1;
   __ZN11CChannelSqr5Poke3Eih((32),$11,$12);
   break;
  }
  case 16387:  {
   $13 = $0;
   $14 = $13&65535;
   $15 = $1;
   __ZN11CChannelSqr5Poke4Eih((32),$14,$15);
   break;
  }
  case 16388:  {
   $16 = $0;
   $17 = $16&65535;
   $18 = $1;
   __ZN11CChannelSqr5Poke1Eih((152),$17,$18);
   break;
  }
  case 16389:  {
   $19 = $0;
   $20 = $19&65535;
   $21 = $1;
   __ZN11CChannelSqr5Poke2Eih((152),$20,$21);
   break;
  }
  case 16390:  {
   $22 = $0;
   $23 = $22&65535;
   $24 = $1;
   __ZN11CChannelSqr5Poke3Eih((152),$23,$24);
   break;
  }
  case 16391:  {
   $25 = $0;
   $26 = $25&65535;
   $27 = $1;
   __ZN11CChannelSqr5Poke4Eih((152),$26,$27);
   break;
  }
  case 16392:  {
   $28 = $0;
   $29 = $28&65535;
   $30 = $1;
   __ZN11CChannelTri5Poke1Eih((272),$29,$30);
   break;
  }
  case 16393:  {
   $31 = $0;
   $32 = $31&65535;
   $33 = $1;
   __ZN11CChannelTri5Poke2Eih((272),$32,$33);
   break;
  }
  case 16394:  {
   $34 = $0;
   $35 = $34&65535;
   $36 = $1;
   __ZN11CChannelTri5Poke3Eih((272),$35,$36);
   break;
  }
  case 16395:  {
   $37 = $0;
   $38 = $37&65535;
   $39 = $1;
   __ZN11CChannelTri5Poke4Eih((272),$38,$39);
   break;
  }
  case 16396:  {
   $40 = $0;
   $41 = $40&65535;
   $42 = $1;
   __ZN11CChannelNoi5Poke1Eih((360),$41,$42);
   break;
  }
  case 16397:  {
   $43 = $0;
   $44 = $43&65535;
   $45 = $1;
   __ZN11CChannelNoi5Poke2Eih((360),$44,$45);
   break;
  }
  case 16398:  {
   $46 = $0;
   $47 = $46&65535;
   $48 = $1;
   __ZN11CChannelNoi5Poke3Eih((360),$47,$48);
   break;
  }
  case 16399:  {
   $49 = $0;
   $50 = $49&65535;
   $51 = $1;
   __ZN11CChannelNoi5Poke4Eih((360),$50,$51);
   break;
  }
  case 16400:  {
   $52 = $0;
   $53 = $52&65535;
   $54 = $1;
   __ZN11CChannelDpm5Poke1Eih((464),$53,$54);
   break;
  }
  case 16401:  {
   $55 = $0;
   $56 = $55&65535;
   $57 = $1;
   __ZN11CChannelDpm5Poke2Eih((464),$56,$57);
   break;
  }
  case 16402:  {
   $58 = $0;
   $59 = $58&65535;
   $60 = $1;
   __ZN11CChannelDpm5Poke3Eih((464),$59,$60);
   break;
  }
  case 16403:  {
   $61 = $0;
   $62 = $61&65535;
   $63 = $1;
   __ZN11CChannelDpm5Poke4Eih((464),$62,$63);
   break;
  }
  case 16405:  {
   $64 = $0;
   $65 = $64&65535;
   $66 = $1;
   __ZN6NesApu8Poke4015Eih(8,$65,$66);
   break;
  }
  case 16407:  {
   $67 = $0;
   $68 = $67&65535;
   $69 = $1;
   __ZN6NesApu8Poke4017Eih(8,$68,$69);
   break;
  }
  default: {
  }
  }
 } while(0);
 STACKTOP = sp;return;
}
function __ZN11CChannelSqr5Poke1Eih($this,$addr,$data) {
 $this = $this|0;
 $addr = $addr|0;
 $data = $data|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $addr;
 $2 = $data;
 $3 = $0;
 $4 = $2;
 $5 = $4&255;
 $6 = $5 & 192;
 $7 = $6 >> 6;
 $8 = $7&255;
 $9 = ((($3)) + 67|0);
 HEAP8[$9>>0] = $8;
 $10 = $2;
 $11 = $10&255;
 $12 = $11 & 32;
 $13 = ($12|0)==(0);
 $14 = ((($3)) + 104|0);
 $15 = $13&1;
 HEAP8[$14>>0] = $15;
 $16 = $2;
 $17 = $16&255;
 $18 = $17 & 32;
 $19 = ($18|0)!=(0);
 $20 = ((($3)) + 44|0);
 $21 = ((($20)) + 1|0);
 $22 = $19&1;
 HEAP8[$21>>0] = $22;
 $23 = $2;
 $24 = $23&255;
 $25 = $24 & 16;
 $26 = ($25|0)!=(0);
 $27 = ((($3)) + 44|0);
 $28 = $26&1;
 HEAP8[$27>>0] = $28;
 $29 = ((($3)) + 44|0);
 $30 = $2;
 $31 = $30&255;
 $32 = $31 & 15;
 __ZN14NesApuEnvelope5SoundEi($29,$32);
 STACKTOP = sp;return;
}
function __ZN11CChannelSqr5Poke2Eih($this,$addr,$data) {
 $this = $this|0;
 $addr = $addr|0;
 $data = $data|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $addr;
 $2 = $data;
 $3 = $0;
 $4 = $2;
 $5 = $4&255;
 $6 = $5 & 8;
 $7 = ($6|0)!=(0);
 $8 = $7 ? 0 : -1;
 $9 = ((($3)) + 88|0);
 HEAP32[$9>>2] = $8;
 $10 = $2;
 $11 = $10&255;
 $12 = $11 & 7;
 $13 = ((($3)) + 84|0);
 HEAP32[$13>>2] = $12;
 $14 = ((($3)) + 80|0);
 HEAP32[$14>>2] = 0;
 $15 = $2;
 $16 = $15&255;
 $17 = $16 & 135;
 $18 = ($17|0)>(128);
 if (!($18)) {
  __ZN11CChannelSqr15UpdateFrequencyEv($3);
  STACKTOP = sp;return;
 }
 $19 = $2;
 $20 = $19&255;
 $21 = $20 >> 4;
 $22 = $21 & 7;
 $23 = (($22) + 1)|0;
 $24 = ((($3)) + 80|0);
 HEAP32[$24>>2] = $23;
 $25 = ((($3)) + 65|0);
 HEAP8[$25>>0] = 1;
 __ZN11CChannelSqr15UpdateFrequencyEv($3);
 STACKTOP = sp;return;
}
function __ZN11CChannelSqr5Poke3Eih($this,$addr,$data) {
 $this = $this|0;
 $addr = $addr|0;
 $data = $data|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $addr;
 $2 = $data;
 $3 = $0;
 $4 = ((($3)) + 92|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 & 1792;
 $7 = $2;
 $8 = $7&255;
 $9 = $8 << 0;
 $10 = $9 & 255;
 $11 = $6 | $10;
 $12 = ((($3)) + 92|0);
 HEAP32[$12>>2] = $11;
 __ZN11CChannelSqr15UpdateFrequencyEv($3);
 STACKTOP = sp;return;
}
function __ZN11CChannelSqr5Poke4Eih($this,$addr,$data) {
 $this = $this|0;
 $addr = $addr|0;
 $data = $data|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $addr;
 $2 = $data;
 $3 = $0;
 $4 = ((($3)) + 92|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 & 255;
 $7 = $2;
 $8 = $7&255;
 $9 = $8 << 8;
 $10 = $9 & 1792;
 $11 = $6 | $10;
 $12 = ((($3)) + 92|0);
 HEAP32[$12>>2] = $11;
 __ZN11CChannelSqr15UpdateFrequencyEv($3);
 $13 = $2;
 $14 = $13&255;
 $15 = $14 & 248;
 $16 = $15 >> 3;
 $17 = (433184 + ($16)|0);
 $18 = HEAP8[$17>>0]|0;
 $19 = $18&255;
 $20 = ((($3)) + 72|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = $19 & $21;
 $23 = ((($3)) + 108|0);
 HEAP32[$23>>2] = $22;
 $24 = ((($3)) + 112|0);
 HEAP8[$24>>0] = 1;
 $25 = ((($3)) + 44|0);
 $26 = ((($25)) + 2|0);
 HEAP8[$26>>0] = 1;
 $27 = ((($3)) + 68|0);
 HEAP8[$27>>0] = 0;
 $28 = (__ZN11CChannelSqr9CanOutputEv($3)|0);
 $29 = ((($3)) + 64|0);
 $30 = $28&1;
 HEAP8[$29>>0] = $30;
 STACKTOP = sp;return;
}
function __ZN11CChannelTri5Poke1Eih($this,$addr,$data) {
 $this = $this|0;
 $addr = $addr|0;
 $data = $data|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $addr;
 $2 = $data;
 $3 = $0;
 $4 = $2;
 $5 = $4&255;
 $6 = $5 & 128;
 $7 = ($6|0)==(0);
 $8 = ((($3)) + 76|0);
 $9 = $7&1;
 HEAP8[$8>>0] = $9;
 $10 = $2;
 $11 = $10&255;
 $12 = $11 & 128;
 $13 = ($12|0)!=(0);
 $14 = ((($3)) + 46|0);
 $15 = $13&1;
 HEAP8[$14>>0] = $15;
 $16 = $2;
 $17 = $16&255;
 $18 = $17 & 127;
 $19 = ((($3)) + 56|0);
 HEAP32[$19>>2] = $18;
 STACKTOP = sp;return;
}
function __ZN11CChannelTri5Poke2Eih($this,$addr,$data) {
 $this = $this|0;
 $addr = $addr|0;
 $data = $data|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $addr;
 $2 = $data;
 STACKTOP = sp;return;
}
function __ZN11CChannelTri5Poke3Eih($this,$addr,$data) {
 $this = $this|0;
 $addr = $addr|0;
 $data = $data|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $addr;
 $2 = $data;
 $3 = $0;
 $4 = ((($3)) + 64|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 & 1792;
 $7 = $2;
 $8 = $7&255;
 $9 = $8 << 0;
 $10 = $9 & 255;
 $11 = $6 | $10;
 $12 = ((($3)) + 64|0);
 HEAP32[$12>>2] = $11;
 $13 = ((($3)) + 64|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (($14) + 1)|0;
 $16 = (+($15|0));
 $17 = ((($3)) + 68|0);
 HEAPF32[$17>>2] = $16;
 $18 = (__ZN11CChannelTri9CanOutputEv($3)|0);
 $19 = ((($3)) + 44|0);
 $20 = $18&1;
 HEAP8[$19>>0] = $20;
 STACKTOP = sp;return;
}
function __ZN11CChannelTri5Poke4Eih($this,$addr,$data) {
 $this = $this|0;
 $addr = $addr|0;
 $data = $data|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $addr;
 $2 = $data;
 $3 = $0;
 $4 = ((($3)) + 64|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 & 255;
 $7 = $2;
 $8 = $7&255;
 $9 = $8 << 8;
 $10 = $9 & 1792;
 $11 = $6 | $10;
 $12 = ((($3)) + 64|0);
 HEAP32[$12>>2] = $11;
 $13 = ((($3)) + 64|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (($14) + 1)|0;
 $16 = (+($15|0));
 $17 = ((($3)) + 68|0);
 HEAPF32[$17>>2] = $16;
 $18 = $2;
 $19 = $18&255;
 $20 = $19 >> 3;
 $21 = (433184 + ($20)|0);
 $22 = HEAP8[$21>>0]|0;
 $23 = $22&255;
 $24 = ((($3)) + 48|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = $23 & $25;
 $27 = ((($3)) + 80|0);
 HEAP32[$27>>2] = $26;
 $28 = ((($3)) + 84|0);
 HEAP8[$28>>0] = 1;
 $29 = ((($3)) + 45|0);
 HEAP8[$29>>0] = 1;
 $30 = (__ZN11CChannelTri9CanOutputEv($3)|0);
 $31 = ((($3)) + 44|0);
 $32 = $30&1;
 HEAP8[$31>>0] = $32;
 STACKTOP = sp;return;
}
function __ZN11CChannelNoi5Poke1Eih($this,$addr,$data) {
 $this = $this|0;
 $addr = $addr|0;
 $data = $data|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $addr;
 $2 = $data;
 $3 = $0;
 $4 = $2;
 $5 = $4&255;
 $6 = $5 & 32;
 $7 = ($6|0)==(0);
 $8 = ((($3)) + 88|0);
 $9 = $7&1;
 HEAP8[$8>>0] = $9;
 $10 = $2;
 $11 = $10&255;
 $12 = $11 & 32;
 $13 = ($12|0)!=(0);
 $14 = ((($3)) + 44|0);
 $15 = ((($14)) + 1|0);
 $16 = $13&1;
 HEAP8[$15>>0] = $16;
 $17 = $2;
 $18 = $17&255;
 $19 = $18 & 16;
 $20 = ($19|0)!=(0);
 $21 = ((($3)) + 44|0);
 $22 = $20&1;
 HEAP8[$21>>0] = $22;
 $23 = ((($3)) + 44|0);
 $24 = $2;
 $25 = $24&255;
 $26 = $25 & 15;
 __ZN14NesApuEnvelope5SoundEi($23,$26);
 STACKTOP = sp;return;
}
function __ZN11CChannelNoi5Poke2Eih($this,$addr,$data) {
 $this = $this|0;
 $addr = $addr|0;
 $data = $data|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $addr;
 $2 = $data;
 STACKTOP = sp;return;
}
function __ZN11CChannelNoi5Poke3Eih($this,$addr,$data) {
 $this = $this|0;
 $addr = $addr|0;
 $data = $data|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $addr;
 $2 = $data;
 $3 = $0;
 $4 = $2;
 $5 = $4&255;
 $6 = $5 & 15;
 $7 = (696 + ($6<<2)|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (+($8|0));
 $10 = ((($3)) + 80|0);
 HEAPF32[$10>>2] = $9;
 $11 = $2;
 $12 = $11&255;
 $13 = $12 & 128;
 $14 = ($13|0)!=(0);
 $15 = $14 ? 8 : 13;
 $16 = ((($3)) + 72|0);
 HEAP32[$16>>2] = $15;
 STACKTOP = sp;return;
}
function __ZN11CChannelNoi5Poke4Eih($this,$addr,$data) {
 $this = $this|0;
 $addr = $addr|0;
 $data = $data|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $addr;
 $2 = $data;
 $3 = $0;
 $4 = $2;
 $5 = $4&255;
 $6 = $5 >> 3;
 $7 = (433184 + ($6)|0);
 $8 = HEAP8[$7>>0]|0;
 $9 = $8&255;
 $10 = ((($3)) + 68|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $9 & $11;
 $13 = ((($3)) + 92|0);
 HEAP32[$13>>2] = $12;
 $14 = ((($3)) + 96|0);
 HEAP8[$14>>0] = 1;
 $15 = ((($3)) + 44|0);
 $16 = ((($15)) + 2|0);
 HEAP8[$16>>0] = 1;
 $17 = (__ZN11CChannelNoi9CanOutputEv($3)|0);
 $18 = ((($3)) + 64|0);
 $19 = $17&1;
 HEAP8[$18>>0] = $19;
 STACKTOP = sp;return;
}
function __ZN11CChannelDpm5Poke1Eih($this,$addr,$data) {
 $this = $this|0;
 $addr = $addr|0;
 $data = $data|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $addr;
 $2 = $data;
 $3 = $0;
 $4 = $2;
 $5 = $4&255;
 $6 = $5 & 128;
 $7 = ($6|0)!=(0);
 $8 = ((($3)) + 65|0);
 $9 = $7&1;
 HEAP8[$8>>0] = $9;
 $10 = $2;
 $11 = $10&255;
 $12 = $11 & 64;
 $13 = ($12|0)!=(0);
 $14 = ((($3)) + 34|0);
 $15 = $13&1;
 HEAP8[$14>>0] = $15;
 $16 = ((($3)) + 65|0);
 $17 = HEAP8[$16>>0]|0;
 $18 = $17&1;
 if (!($18)) {
  $19 = ((($3)) + 66|0);
  HEAP8[$19>>0] = 0;
  __Z9Delta_IRQb(0);
 }
 $20 = $2;
 $21 = $20&255;
 $22 = $21 & 15;
 $23 = ((($3)) + 68|0);
 HEAP32[$23>>2] = $22;
 STACKTOP = sp;return;
}
function __ZN11CChannelDpm5Poke2Eih($this,$addr,$data) {
 $this = $this|0;
 $addr = $addr|0;
 $data = $data|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $addr;
 $2 = $data;
 $3 = $0;
 $4 = $2;
 $5 = $4&255;
 $6 = $5 & 127;
 $7 = ((($3)) + 60|0);
 HEAP32[$7>>2] = $6;
 STACKTOP = sp;return;
}
function __ZN11CChannelDpm5Poke3Eih($this,$addr,$data) {
 $this = $this|0;
 $addr = $addr|0;
 $data = $data|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $addr;
 $2 = $data;
 $3 = $0;
 $4 = $2;
 $5 = $4&255;
 $6 = $5 << 6;
 $7 = $6 | 49152;
 $8 = ((($3)) + 40|0);
 HEAP32[$8>>2] = $7;
 STACKTOP = sp;return;
}
function __ZN11CChannelDpm5Poke4Eih($this,$addr,$data) {
 $this = $this|0;
 $addr = $addr|0;
 $data = $data|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $addr;
 $2 = $data;
 $3 = $0;
 $4 = $2;
 $5 = $4&255;
 $6 = $5 << 4;
 $7 = $6 | 1;
 $8 = ((($3)) + 56|0);
 HEAP32[$8>>2] = $7;
 STACKTOP = sp;return;
}
function __ZN6NesApu8Poke4015Eih($this,$addr,$data) {
 $this = $this|0;
 $addr = $addr|0;
 $data = $data|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $addr;
 $2 = $data;
 $3 = $0;
 $4 = ((($3)) + 24|0);
 $5 = $2;
 $6 = $5&255;
 $7 = $6 & 1;
 $8 = ($7|0)!=(0);
 __ZN11CChannelSqr7EnabledEb($4,$8);
 $9 = ((($3)) + 144|0);
 $10 = $2;
 $11 = $10&255;
 $12 = $11 & 2;
 $13 = ($12|0)!=(0);
 __ZN11CChannelSqr7EnabledEb($9,$13);
 $14 = ((($3)) + 264|0);
 $15 = $2;
 $16 = $15&255;
 $17 = $16 & 4;
 $18 = ($17|0)!=(0);
 __ZN11CChannelTri7EnabledEb($14,$18);
 $19 = ((($3)) + 352|0);
 $20 = $2;
 $21 = $20&255;
 $22 = $21 & 8;
 $23 = ($22|0)!=(0);
 __ZN11CChannelNoi7EnabledEb($19,$23);
 $24 = ((($3)) + 456|0);
 $25 = $2;
 $26 = $25&255;
 $27 = $26 & 16;
 $28 = ($27|0)!=(0);
 __ZN11CChannelDpm7EnabledEb($24,$28);
 STACKTOP = sp;return;
}
function __ZN6NesApu8Poke4017Eih($this,$addr,$data) {
 $this = $this|0;
 $addr = $addr|0;
 $data = $data|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $addr;
 $2 = $data;
 $3 = $0;
 $4 = $2;
 $5 = $4&255;
 $6 = $5 & 128;
 $7 = ($6|0)!=(0);
 $8 = ((($3)) + 538|0);
 $9 = $7&1;
 HEAP8[$8>>0] = $9;
 $10 = $2;
 $11 = $10&255;
 $12 = $11 & 64;
 $13 = ($12|0)==(0);
 $14 = ((($3)) + 536|0);
 $15 = $13&1;
 HEAP8[$14>>0] = $15;
 $16 = ((($3)) + 544|0);
 HEAP8[$16>>0] = 0;
 $17 = ((($3)) + 538|0);
 $18 = HEAP8[$17>>0]|0;
 $19 = $18&1;
 if ($19) {
  $22 = HEAP32[177320>>2]|0;
  $23 = ((($3)) + 540|0);
  HEAP32[$23>>2] = $22;
 } else {
  $20 = HEAP32[177288>>2]|0;
  $21 = ((($3)) + 540|0);
  HEAP32[$21>>2] = $20;
 }
 $24 = ((($3)) + 545|0);
 $25 = HEAP8[$24>>0]|0;
 $26 = $25&1;
 $27 = ((($3)) + 540|0);
 $28 = HEAP32[$27>>2]|0;
 if ($26) {
  $30 = (($28) + 2)|0;
  HEAP32[$27>>2] = $30;
 } else {
  $29 = (($28) + 1)|0;
  HEAP32[$27>>2] = $29;
 }
 $31 = ((($3)) + 536|0);
 $32 = HEAP8[$31>>0]|0;
 $33 = $32&1;
 if ($33) {
  STACKTOP = sp;return;
 }
 $34 = ((($3)) + 537|0);
 HEAP8[$34>>0] = 0;
 __Z9Frame_IRQb(0);
 STACKTOP = sp;return;
}
function __Z11APUReadBytet($addr) {
 $addr = $addr|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $addr;
 $1 = $0;
 $2 = $1&65535;
 $3 = (__ZN6NesApu8Peek4015Ei(8,$2)|0);
 STACKTOP = sp;return ($3|0);
}
function __ZN6NesApu8Peek4015Ei($this,$addr) {
 $this = $this|0;
 $addr = $addr|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $data = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $addr;
 $2 = $0;
 $data = 0;
 $3 = ((($2)) + 24|0);
 $4 = (__ZN11CChannelSqr7EnabledEv($3)|0);
 if ($4) {
  $5 = $data;
  $6 = $5&255;
  $7 = $6 | 1;
  $8 = $7&255;
  $data = $8;
 }
 $9 = ((($2)) + 144|0);
 $10 = (__ZN11CChannelSqr7EnabledEv($9)|0);
 if ($10) {
  $11 = $data;
  $12 = $11&255;
  $13 = $12 | 2;
  $14 = $13&255;
  $data = $14;
 }
 $15 = ((($2)) + 264|0);
 $16 = (__ZN11CChannelTri7EnabledEv($15)|0);
 if ($16) {
  $17 = $data;
  $18 = $17&255;
  $19 = $18 | 4;
  $20 = $19&255;
  $data = $20;
 }
 $21 = ((($2)) + 352|0);
 $22 = (__ZN11CChannelNoi7EnabledEv($21)|0);
 if ($22) {
  $23 = $data;
  $24 = $23&255;
  $25 = $24 | 8;
  $26 = $25&255;
  $data = $26;
 }
 $27 = ((($2)) + 456|0);
 $28 = (__ZN11CChannelDpm7EnabledEv($27)|0);
 if ($28) {
  $29 = $data;
  $30 = $29&255;
  $31 = $30 | 16;
  $32 = $31&255;
  $data = $32;
 }
 $33 = ((($2)) + 537|0);
 $34 = HEAP8[$33>>0]|0;
 $35 = $34&1;
 if ($35) {
  $36 = $data;
  $37 = $36&255;
  $38 = $37 | 64;
  $39 = $38&255;
  $data = $39;
 }
 $40 = ((($2)) + 456|0);
 $41 = ((($40)) + 66|0);
 $42 = HEAP8[$41>>0]|0;
 $43 = $42&1;
 if (!($43)) {
  $48 = ((($2)) + 537|0);
  HEAP8[$48>>0] = 0;
  __Z9Frame_IRQb(0);
  $49 = $data;
  STACKTOP = sp;return ($49|0);
 }
 $44 = $data;
 $45 = $44&255;
 $46 = $45 | 128;
 $47 = $46&255;
 $data = $47;
 $48 = ((($2)) + 537|0);
 HEAP8[$48>>0] = 0;
 __Z9Frame_IRQb(0);
 $49 = $data;
 STACKTOP = sp;return ($49|0);
}
function __Z10APUExecutem($cpucc) {
 $cpucc = $cpucc|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $cpucc;
 __ZN6NesApu7ExecuteEv(8);
 STACKTOP = sp;return;
}
function __ZN6NesApu7ExecuteEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0.0;
 var $63 = 0, $64 = 0, $65 = 0.0, $66 = 0.0, $67 = 0, $68 = 0.0, $69 = 0, $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0, $73 = 0.0, $8 = 0, $9 = 0, $isClockingLength = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 540|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + -1)|0;
 HEAP32[$2>>2] = $4;
 $5 = ((($1)) + 545|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = $6&1;
 $8 = $7 ^ 1;
 $9 = ((($1)) + 545|0);
 $10 = $8&1;
 HEAP8[$9>>0] = $10;
 $isClockingLength = 0;
 $11 = ((($1)) + 540|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)==(0);
 do {
  if ($13) {
   $14 = ((($1)) + 538|0);
   $15 = HEAP8[$14>>0]|0;
   $16 = $15&1;
   $17 = ((($1)) + 544|0);
   $18 = HEAP8[$17>>0]|0;
   $19 = $18&255;
   if ($16) {
    switch ($19|0) {
    case 2: case 0:  {
     __ZN6NesApu9ClockQuadEv($1);
     __ZN6NesApu9ClockHalfEv($1);
     $isClockingLength = 1;
     break;
    }
    case 3: case 1:  {
     __ZN6NesApu9ClockQuadEv($1);
     break;
    }
    default: {
    }
    }
    $45 = ((($1)) + 544|0);
    $46 = HEAP8[$45>>0]|0;
    $47 = (($46) + 1)<<24>>24;
    HEAP8[$45>>0] = $47;
    $48 = ((($1)) + 544|0);
    $49 = HEAP8[$48>>0]|0;
    $50 = $49&255;
    $51 = (177320 + ($50<<2)|0);
    $52 = HEAP32[$51>>2]|0;
    $53 = ((($1)) + 540|0);
    HEAP32[$53>>2] = $52;
    $54 = ((($1)) + 544|0);
    $55 = HEAP8[$54>>0]|0;
    $56 = $55&255;
    $57 = ($56|0)==(4);
    if (!($57)) {
     break;
    }
    $58 = ((($1)) + 544|0);
    HEAP8[$58>>0] = 0;
    break;
   }
   switch ($19|0) {
   case 2: case 0:  {
    __ZN6NesApu9ClockQuadEv($1);
    break;
   }
   case 1:  {
    __ZN6NesApu9ClockQuadEv($1);
    __ZN6NesApu9ClockHalfEv($1);
    $isClockingLength = 1;
    break;
   }
   case 5: case 3:  {
    $20 = ((($1)) + 536|0);
    $21 = HEAP8[$20>>0]|0;
    $22 = $21&1;
    if ($22) {
     $23 = ((($1)) + 537|0);
     HEAP8[$23>>0] = 1;
    }
    break;
   }
   case 4:  {
    $24 = ((($1)) + 536|0);
    $25 = HEAP8[$24>>0]|0;
    $26 = $25&1;
    if ($26) {
     $27 = ((($1)) + 537|0);
     HEAP8[$27>>0] = 1;
    }
    __ZN6NesApu9ClockQuadEv($1);
    __ZN6NesApu9ClockHalfEv($1);
    $isClockingLength = 1;
    break;
   }
   case 6:  {
    $28 = ((($1)) + 537|0);
    $29 = HEAP8[$28>>0]|0;
    $30 = $29&1;
    if ($30) {
     __Z9Frame_IRQb(1);
    }
    break;
   }
   default: {
   }
   }
   $31 = ((($1)) + 544|0);
   $32 = HEAP8[$31>>0]|0;
   $33 = (($32) + 1)<<24>>24;
   HEAP8[$31>>0] = $33;
   $34 = ((($1)) + 544|0);
   $35 = HEAP8[$34>>0]|0;
   $36 = $35&255;
   $37 = (177288 + ($36<<2)|0);
   $38 = HEAP32[$37>>2]|0;
   $39 = ((($1)) + 540|0);
   HEAP32[$39>>2] = $38;
   $40 = ((($1)) + 544|0);
   $41 = HEAP8[$40>>0]|0;
   $42 = $41&255;
   $43 = ($42|0)==(7);
   if ($43) {
    $44 = ((($1)) + 544|0);
    HEAP8[$44>>0] = 0;
   }
  }
 } while(0);
 $59 = $isClockingLength;
 $60 = $59&1;
 __ZN6NesApu18ClockChannelsCycleEb($1,$60);
 $61 = ((($1)) + 16|0);
 $62 = +HEAPF32[$61>>2];
 $63 = $62 > 0.0;
 if ($63) {
  $64 = ((($1)) + 16|0);
  $65 = +HEAPF32[$64>>2];
  $66 = $65 + -1.0;
  HEAPF32[$64>>2] = $66;
  STACKTOP = sp;return;
 } else {
  $67 = ((($1)) + 8|0);
  $68 = +HEAPF32[$67>>2];
  $69 = ((($1)) + 16|0);
  $70 = +HEAPF32[$69>>2];
  $71 = $70 + $68;
  HEAPF32[$69>>2] = $71;
  $72 = ((($1)) + 8|0);
  $73 = +HEAPF32[$72>>2];
  __ZN6NesApu9AddSampleEf($1,$73);
  STACKTOP = sp;return;
 }
}
function __ZN11CChannelSqrC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN13NesApuChannelC2Ev($1);
 $2 = ((($1)) + 36|0);
 HEAP8[$2>>0] = 1;
 $3 = ((($1)) + 104|0);
 HEAP8[$3>>0] = 1;
 $4 = ((($1)) + 96|0);
 HEAPF32[$4>>2] = 1.0;
 $5 = ((($1)) + 104|0);
 HEAP8[$5>>0] = 0;
 $6 = ((($1)) + 112|0);
 HEAP8[$6>>0] = 0;
 $7 = ((($1)) + 108|0);
 HEAP32[$7>>2] = 0;
 STACKTOP = sp;return;
}
function __ZN11CChannelTriC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN13NesApuChannelC2Ev($1);
 $2 = ((($1)) + 36|0);
 HEAP8[$2>>0] = 1;
 $3 = ((($1)) + 76|0);
 HEAP8[$3>>0] = 1;
 $4 = ((($1)) + 68|0);
 HEAPF32[$4>>2] = 1.0;
 $5 = ((($1)) + 76|0);
 HEAP8[$5>>0] = 0;
 $6 = ((($1)) + 80|0);
 HEAP32[$6>>2] = 0;
 $7 = ((($1)) + 84|0);
 HEAP8[$7>>0] = 0;
 STACKTOP = sp;return;
}
function __ZN11CChannelNoiC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN13NesApuChannelC2Ev($1);
 $2 = ((($1)) + 36|0);
 HEAP8[$2>>0] = 1;
 $3 = ((($1)) + 88|0);
 HEAP8[$3>>0] = 1;
 $4 = ((($1)) + 72|0);
 HEAP32[$4>>2] = 8;
 $5 = ((($1)) + 76|0);
 HEAP32[$5>>2] = 1;
 $6 = HEAP32[696>>2]|0;
 $7 = (+($6|0));
 $8 = ((($1)) + 80|0);
 HEAPF32[$8>>2] = $7;
 $9 = ((($1)) + 88|0);
 HEAP8[$9>>0] = 0;
 $10 = ((($1)) + 92|0);
 HEAP32[$10>>2] = 0;
 $11 = ((($1)) + 96|0);
 HEAP8[$11>>0] = 0;
 STACKTOP = sp;return;
}
function __ZN11CChannelDpmC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN13NesApuChannelC2Ev($1);
 $2 = ((($1)) + 33|0);
 HEAP8[$2>>0] = 0;
 $3 = ((($1)) + 34|0);
 HEAP8[$3>>0] = 0;
 $4 = ((($1)) + 36|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($1)) + 40|0);
 HEAP32[$5>>2] = 0;
 $6 = ((($1)) + 44|0);
 HEAP32[$6>>2] = 0;
 $7 = ((($1)) + 48|0);
 HEAP32[$7>>2] = 0;
 $8 = ((($1)) + 52|0);
 HEAP32[$8>>2] = 0;
 $9 = ((($1)) + 56|0);
 HEAP32[$9>>2] = 0;
 $10 = ((($1)) + 60|0);
 HEAP32[$10>>2] = 0;
 $11 = ((($1)) + 64|0);
 HEAP8[$11>>0] = 0;
 $12 = ((($1)) + 65|0);
 HEAP8[$12>>0] = 0;
 $13 = ((($1)) + 68|0);
 HEAP32[$13>>2] = 0;
 $14 = ((($1)) + 72|0);
 HEAP32[$14>>2] = 1;
 STACKTOP = sp;return;
}
function __ZN13NesApuChannelC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 32|0);
 HEAP8[$2>>0] = 1;
 STACKTOP = sp;return;
}
function __ZN6NesApu9AddSampleEf($this,$sampleRate) {
 $this = $this|0;
 $sampleRate = +$sampleRate;
 var $0 = 0, $1 = 0.0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0.0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0.0, $52 = 0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0, $58 = 0.0, $59 = 0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0.0, $9 = 0, $output = 0.0, $sqrSample = 0, $tndSample = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $sampleRate;
 $2 = $0;
 $tndSample = 0;
 $sqrSample = 0;
 $3 = ((($2)) + 24|0);
 $4 = ((($3)) + 32|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = $5&1;
 if ($6) {
  $7 = ((($2)) + 24|0);
  $8 = $1;
  $9 = (__ZN11CChannelSqr12RenderSampleEf($7,$8)|0);
  $10 = $sqrSample;
  $11 = (($10) + ($9))|0;
  $sqrSample = $11;
 }
 $12 = ((($2)) + 144|0);
 $13 = ((($12)) + 32|0);
 $14 = HEAP8[$13>>0]|0;
 $15 = $14&1;
 if ($15) {
  $16 = ((($2)) + 144|0);
  $17 = $1;
  $18 = (__ZN11CChannelSqr12RenderSampleEf($16,$17)|0);
  $19 = $sqrSample;
  $20 = (($19) + ($18))|0;
  $sqrSample = $20;
 }
 $21 = ((($2)) + 264|0);
 $22 = ((($21)) + 32|0);
 $23 = HEAP8[$22>>0]|0;
 $24 = $23&1;
 if ($24) {
  $25 = ((($2)) + 264|0);
  $26 = $1;
  $27 = (__ZN11CChannelTri12RenderSampleEf($25,$26)|0);
  $28 = ($27*3)|0;
  $29 = $tndSample;
  $30 = (($29) + ($28))|0;
  $tndSample = $30;
 }
 $31 = ((($2)) + 352|0);
 $32 = ((($31)) + 32|0);
 $33 = HEAP8[$32>>0]|0;
 $34 = $33&1;
 if ($34) {
  $35 = ((($2)) + 352|0);
  $36 = $1;
  $37 = (__ZN11CChannelNoi12RenderSampleEf($35,$36)|0);
  $38 = $37<<1;
  $39 = $tndSample;
  $40 = (($39) + ($38))|0;
  $tndSample = $40;
 }
 $41 = ((($2)) + 456|0);
 $42 = ((($41)) + 32|0);
 $43 = HEAP8[$42>>0]|0;
 $44 = $43&1;
 if ($44) {
  $45 = ((($2)) + 456|0);
  $46 = (__ZN11CChannelDpm12RenderSampleEv($45)|0);
  $47 = $46;
  $48 = $tndSample;
  $49 = (($48) + ($47))|0;
  $tndSample = $49;
 }
 $50 = $sqrSample;
 $51 = (+($50|0));
 $52 = $tndSample;
 $53 = (+($52|0));
 $54 = (+__ZN11NesApuMixer10MixSamplesEff($51,$53));
 $55 = $54 * 65536.0;
 $output = $55;
 $56 = $output;
 $57 = $56 > 65536.0;
 if ($57) {
  $output = 65536.0;
 }
 $58 = $output;
 $59 = $58 < 0.0;
 if (!($59)) {
  $60 = $output;
  $61 = $60 - 32768.0;
  $62 = (~~(($61)));
  $63 = ((($2)) + 4|0);
  $64 = HEAP32[$63>>2]|0;
  $65 = (($64) + 1)|0;
  HEAP32[$63>>2] = $65;
  $66 = (($64|0) % 44100)&-1;
  $67 = (760 + ($66<<2)|0);
  HEAP32[$67>>2] = $62;
  STACKTOP = sp;return;
 }
 $output = 0.0;
 $60 = $output;
 $61 = $60 - 32768.0;
 $62 = (~~(($61)));
 $63 = ((($2)) + 4|0);
 $64 = HEAP32[$63>>2]|0;
 $65 = (($64) + 1)|0;
 HEAP32[$63>>2] = $65;
 $66 = (($64|0) % 44100)&-1;
 $67 = (760 + ($66<<2)|0);
 HEAP32[$67>>2] = $62;
 STACKTOP = sp;return;
}
function __ZN11CChannelSqr12RenderSampleEf($this,$rate) {
 $this = $this|0;
 $rate = +$rate;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0, $2 = 0.0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0.0, $34 = 0.0, $35 = 0, $36 = 0.0, $37 = 0.0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0, $57 = 0.0, $58 = 0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0, $62 = 0.0;
 var $63 = 0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0, $68 = 0, $7 = 0, $8 = 0.0, $9 = 0.0, $form = 0, $sum = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $rate;
 $3 = $1;
 $4 = ((($3)) + 64|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = $5&1;
 if (!($6)) {
  $0 = 0;
  $68 = $0;
  STACKTOP = sp;return ($68|0);
 }
 $7 = ((($3)) + 100|0);
 $8 = +HEAPF32[$7>>2];
 $sum = $8;
 $9 = $2;
 $10 = ((($3)) + 100|0);
 $11 = +HEAPF32[$10>>2];
 $12 = $11 - $9;
 HEAPF32[$10>>2] = $12;
 $13 = ((($3)) + 67|0);
 $14 = HEAP8[$13>>0]|0;
 $15 = $14&255;
 $16 = (177160 + ($15<<5)|0);
 $form = $16;
 $17 = ((($3)) + 100|0);
 $18 = +HEAPF32[$17>>2];
 $19 = $18 >= 0.0;
 $20 = ((($3)) + 44|0);
 $21 = (__ZN14NesApuEnvelope5SoundEv($20)|0);
 $22 = ((($3)) + 68|0);
 $23 = HEAP8[$22>>0]|0;
 $24 = $23&255;
 $25 = $form;
 $26 = (($25) + ($24<<2)|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = $21 & $27;
 if ($19) {
  $0 = $28;
  $68 = $0;
  STACKTOP = sp;return ($68|0);
 }
 $29 = (+($28|0));
 $30 = $sum;
 $31 = $30 * $29;
 $sum = $31;
 while(1) {
  $32 = ((($3)) + 100|0);
  $33 = +HEAPF32[$32>>2];
  $34 = -$33;
  $35 = ((($3)) + 96|0);
  $36 = +HEAPF32[$35>>2];
  $37 = (+__Z8Math_Minff($34,$36));
  $38 = ((($3)) + 44|0);
  $39 = (__ZN14NesApuEnvelope5SoundEv($38)|0);
  $40 = ((($3)) + 68|0);
  $41 = HEAP8[$40>>0]|0;
  $42 = $41&255;
  $43 = (($42) - 1)|0;
  $44 = $43 & 7;
  $45 = $44&255;
  $46 = ((($3)) + 68|0);
  HEAP8[$46>>0] = $45;
  $47 = $45&255;
  $48 = $form;
  $49 = (($48) + ($47<<2)|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = $39 & $50;
  $52 = (+($51|0));
  $53 = $37 * $52;
  $54 = $sum;
  $55 = $54 + $53;
  $sum = $55;
  $56 = ((($3)) + 96|0);
  $57 = +HEAPF32[$56>>2];
  $58 = ((($3)) + 100|0);
  $59 = +HEAPF32[$58>>2];
  $60 = $59 + $57;
  HEAPF32[$58>>2] = $60;
  $61 = ((($3)) + 100|0);
  $62 = +HEAPF32[$61>>2];
  $63 = $62 < 0.0;
  if (!($63)) {
   break;
  }
 }
 $64 = $sum;
 $65 = $2;
 $66 = $64 / $65;
 $67 = (~~(($66)));
 $0 = $67;
 $68 = $0;
 STACKTOP = sp;return ($68|0);
}
function __ZN11CChannelTri12RenderSampleEf($this,$rate) {
 $this = $this|0;
 $rate = +$rate;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0.0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0.0, $26 = 0.0;
 var $27 = 0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0;
 var $45 = 0.0, $46 = 0, $47 = 0.0, $48 = 0.0, $49 = 0, $5 = 0, $50 = 0.0, $51 = 0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $7 = 0;
 var $8 = 0.0, $9 = 0.0, $sum = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $rate;
 $3 = $1;
 $4 = ((($3)) + 44|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = $5&1;
 if (!($6)) {
  $56 = ((($3)) + 60|0);
  $57 = HEAP32[$56>>2]|0;
  $58 = (433152 + ($57)|0);
  $59 = HEAP8[$58>>0]|0;
  $60 = $59&255;
  $0 = $60;
  $61 = $0;
  STACKTOP = sp;return ($61|0);
 }
 $7 = ((($3)) + 72|0);
 $8 = +HEAPF32[$7>>2];
 $sum = $8;
 $9 = $2;
 $10 = ((($3)) + 72|0);
 $11 = +HEAPF32[$10>>2];
 $12 = $11 - $9;
 HEAPF32[$10>>2] = $12;
 $13 = ((($3)) + 72|0);
 $14 = +HEAPF32[$13>>2];
 $15 = $14 >= 0.0;
 $16 = ((($3)) + 60|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = (433152 + ($17)|0);
 $19 = HEAP8[$18>>0]|0;
 $20 = $19&255;
 if ($15) {
  $0 = $20;
  $61 = $0;
  STACKTOP = sp;return ($61|0);
 }
 $21 = (+($20|0));
 $22 = $sum;
 $23 = $22 * $21;
 $sum = $23;
 while(1) {
  $24 = ((($3)) + 72|0);
  $25 = +HEAPF32[$24>>2];
  $26 = -$25;
  $27 = ((($3)) + 68|0);
  $28 = +HEAPF32[$27>>2];
  $29 = (+__Z8Math_Minff($26,$28));
  $30 = ((($3)) + 60|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = (($31) + 1)|0;
  $33 = $32 & 31;
  $34 = $33&255;
  $35 = $34&255;
  $36 = ((($3)) + 60|0);
  HEAP32[$36>>2] = $35;
  $37 = (433152 + ($35)|0);
  $38 = HEAP8[$37>>0]|0;
  $39 = $38&255;
  $40 = (+($39|0));
  $41 = $29 * $40;
  $42 = $sum;
  $43 = $42 + $41;
  $sum = $43;
  $44 = ((($3)) + 68|0);
  $45 = +HEAPF32[$44>>2];
  $46 = ((($3)) + 72|0);
  $47 = +HEAPF32[$46>>2];
  $48 = $47 + $45;
  HEAPF32[$46>>2] = $48;
  $49 = ((($3)) + 72|0);
  $50 = +HEAPF32[$49>>2];
  $51 = $50 < 0.0;
  if (!($51)) {
   break;
  }
 }
 $52 = $sum;
 $53 = $2;
 $54 = $52 / $53;
 $55 = (~~(($54)));
 $0 = $55;
 $61 = $0;
 STACKTOP = sp;return ($61|0);
}
function __ZN11CChannelNoi12RenderSampleEf($this,$rate) {
 $this = $this|0;
 $rate = +$rate;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0.0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0.0, $44 = 0.0;
 var $45 = 0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0.0, $50 = 0, $51 = 0.0, $52 = 0, $53 = 0.0, $54 = 0.0, $55 = 0, $56 = 0.0, $57 = 0, $58 = 0.0, $59 = 0, $6 = 0.0, $60 = 0, $61 = 0.0, $62 = 0.0;
 var $63 = 0.0, $64 = 0.0, $65 = 0, $66 = 0, $67 = 0.0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0.0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0.0, $86 = 0, $87 = 0.0, $88 = 0.0, $89 = 0, $9 = 0.0, $sum = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $rate;
 $3 = $1;
 $4 = ((($3)) + 84|0);
 $5 = +HEAPF32[$4>>2];
 $sum = $5;
 $6 = $2;
 $7 = ((($3)) + 84|0);
 $8 = +HEAPF32[$7>>2];
 $9 = $8 - $6;
 HEAPF32[$7>>2] = $9;
 $10 = ((($3)) + 64|0);
 $11 = HEAP8[$10>>0]|0;
 $12 = $11&1;
 L1: do {
  if ($12) {
   $13 = ((($3)) + 84|0);
   $14 = +HEAPF32[$13>>2];
   $15 = $14 >= 0.0;
   $16 = ((($3)) + 76|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = $17 & 1;
   if ($15) {
    $19 = ($18|0)==(0);
    if (!($19)) {
     break;
    }
    $20 = ((($3)) + 44|0);
    $21 = (__ZN14NesApuEnvelope5SoundEv($20)|0);
    $0 = $21;
    $89 = $0;
    STACKTOP = sp;return ($89|0);
   }
   $22 = ($18|0)!=(0);
   if ($22) {
    $sum = 0.0;
   }
   while(1) {
    $23 = ((($3)) + 76|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = $24 >> 1;
    $26 = ((($3)) + 76|0);
    $27 = HEAP32[$26>>2]|0;
    $28 = $27 << 14;
    $29 = ((($3)) + 76|0);
    $30 = HEAP32[$29>>2]|0;
    $31 = ((($3)) + 72|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = $30 << $32;
    $34 = $28 ^ $33;
    $35 = $34 & 16384;
    $36 = $25 | $35;
    $37 = ((($3)) + 76|0);
    HEAP32[$37>>2] = $36;
    $38 = ((($3)) + 76|0);
    $39 = HEAP32[$38>>2]|0;
    $40 = $39 & 1;
    $41 = ($40|0)==(0);
    if ($41) {
     $42 = ((($3)) + 84|0);
     $43 = +HEAPF32[$42>>2];
     $44 = -$43;
     $45 = ((($3)) + 80|0);
     $46 = +HEAPF32[$45>>2];
     $47 = (+__Z8Math_Minff($44,$46));
     $48 = $sum;
     $49 = $48 + $47;
     $sum = $49;
    }
    $50 = ((($3)) + 80|0);
    $51 = +HEAPF32[$50>>2];
    $52 = ((($3)) + 84|0);
    $53 = +HEAPF32[$52>>2];
    $54 = $53 + $51;
    HEAPF32[$52>>2] = $54;
    $55 = ((($3)) + 84|0);
    $56 = +HEAPF32[$55>>2];
    $57 = $56 < 0.0;
    if (!($57)) {
     break;
    }
   }
   $58 = $sum;
   $59 = ((($3)) + 44|0);
   $60 = (__ZN14NesApuEnvelope5SoundEv($59)|0);
   $61 = (+($60|0));
   $62 = $58 * $61;
   $63 = $2;
   $64 = $62 / $63;
   $65 = (~~(($64)));
   $0 = $65;
   $89 = $0;
   STACKTOP = sp;return ($89|0);
  } else {
   while(1) {
    $66 = ((($3)) + 84|0);
    $67 = +HEAPF32[$66>>2];
    $68 = $67 < 0.0;
    if (!($68)) {
     break L1;
    }
    $69 = ((($3)) + 76|0);
    $70 = HEAP32[$69>>2]|0;
    $71 = $70 >> 1;
    $72 = ((($3)) + 76|0);
    $73 = HEAP32[$72>>2]|0;
    $74 = $73 << 14;
    $75 = ((($3)) + 76|0);
    $76 = HEAP32[$75>>2]|0;
    $77 = ((($3)) + 72|0);
    $78 = HEAP32[$77>>2]|0;
    $79 = $76 << $78;
    $80 = $74 ^ $79;
    $81 = $80 & 16384;
    $82 = $71 | $81;
    $83 = ((($3)) + 76|0);
    HEAP32[$83>>2] = $82;
    $84 = ((($3)) + 80|0);
    $85 = +HEAPF32[$84>>2];
    $86 = ((($3)) + 84|0);
    $87 = +HEAPF32[$86>>2];
    $88 = $87 + $85;
    HEAPF32[$86>>2] = $88;
   }
  }
 } while(0);
 $0 = 0;
 $89 = $0;
 STACKTOP = sp;return ($89|0);
}
function __ZN11CChannelDpm12RenderSampleEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 60|0);
 $3 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function __ZN11NesApuMixer10MixSamplesEff($sqrSample,$tndSample) {
 $sqrSample = +$sqrSample;
 $tndSample = +$tndSample;
 var $0 = 0.0, $1 = 0.0, $10 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $sqrSample;
 $1 = $tndSample;
 $2 = $0;
 $3 = 8128.0 / $2;
 $4 = $3 + 100.0;
 $5 = 95.519996643066406 / $4;
 $6 = $1;
 $7 = 24329.0 / $6;
 $8 = $7 + 100.0;
 $9 = 163.66999816894531 / $8;
 $10 = $5 + $9;
 STACKTOP = sp;return (+$10);
}
function __ZN14NesApuEnvelope5SoundEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $1;
 $3 = HEAP8[$2>>0]|0;
 $4 = $3&1;
 if ($4) {
  $5 = ((($2)) + 16|0);
  $6 = HEAP32[$5>>2]|0;
  $0 = $6;
  $9 = $0;
  STACKTOP = sp;return ($9|0);
 } else {
  $7 = ((($2)) + 4|0);
  $8 = HEAP32[$7>>2]|0;
  $0 = $8;
  $9 = $0;
  STACKTOP = sp;return ($9|0);
 }
 return (0)|0;
}
function __Z8Math_Minff($a,$b) {
 $a = +$a;
 $b = +$b;
 var $0 = 0.0, $1 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $a;
 $1 = $b;
 $2 = $0;
 $3 = $1;
 $4 = $2 < $3;
 $5 = $0;
 $6 = $1;
 $7 = $4 ? $5 : $6;
 STACKTOP = sp;return (+$7);
}
function __ZN14NesApuEnvelope5SoundEi($this,$value) {
 $this = $this|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $value;
 $2 = $0;
 $3 = $1;
 $4 = ((($2)) + 8|0);
 HEAP32[$4>>2] = $3;
 $5 = HEAP8[$2>>0]|0;
 $6 = $5&1;
 if ($6) {
  $7 = ((($2)) + 8|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = $8&255;
  $10 = $9&255;
  $11 = ((($2)) + 16|0);
  HEAP32[$11>>2] = $10;
  STACKTOP = sp;return;
 } else {
  $12 = ((($2)) + 4|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ((($2)) + 16|0);
  HEAP32[$14>>2] = $13;
  STACKTOP = sp;return;
 }
}
function __ZN11CChannelSqr15UpdateFrequencyEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 92|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)>=(8);
 if ($4) {
  $5 = ((($1)) + 92|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ((($1)) + 88|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ((($1)) + 92|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ((($1)) + 84|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = $10 >> $12;
  $14 = $8 & $13;
  $15 = (($6) + ($14))|0;
  $16 = ($15|0)<=(2047);
  if ($16) {
   $17 = ((($1)) + 92|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = (($18) + 1)|0;
   $20 = $19 << 1;
   $21 = (+($20|0));
   $22 = ((($1)) + 96|0);
   HEAPF32[$22>>2] = $21;
   $23 = ((($1)) + 66|0);
   HEAP8[$23>>0] = 1;
   $25 = (__ZN11CChannelSqr9CanOutputEv($1)|0);
   $26 = ((($1)) + 64|0);
   $27 = $25&1;
   HEAP8[$26>>0] = $27;
   STACKTOP = sp;return;
  }
 }
 $24 = ((($1)) + 66|0);
 HEAP8[$24>>0] = 0;
 $25 = (__ZN11CChannelSqr9CanOutputEv($1)|0);
 $26 = ((($1)) + 64|0);
 $27 = $25&1;
 HEAP8[$26>>0] = $27;
 STACKTOP = sp;return;
}
function __ZN11CChannelSqr9CanOutputEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 36|0);
 $3 = ((($2)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)!=(0);
 if ($5) {
  $6 = ((($1)) + 44|0);
  $7 = (__ZN14NesApuEnvelope5SoundEv($6)|0);
  $8 = ($7|0)!=(0);
  if ($8) {
   $9 = ((($1)) + 66|0);
   $10 = HEAP8[$9>>0]|0;
   $11 = $10&1;
   $12 = $11;
  } else {
   $12 = 0;
  }
 } else {
  $12 = 0;
 }
 STACKTOP = sp;return ($12|0);
}
function __ZN11CChannelTri9CanOutputEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 36|0);
 $3 = ((($2)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)!=(0);
 if ($5) {
  $6 = ((($1)) + 52|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)!=(0);
  if ($8) {
   $9 = ((($1)) + 64|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = ($10|0)>=(3);
   $12 = $11;
  } else {
   $12 = 0;
  }
 } else {
  $12 = 0;
 }
 STACKTOP = sp;return ($12|0);
}
function __ZN11CChannelNoi9CanOutputEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 36|0);
 $3 = ((($2)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)!=(0);
 if (!($5)) {
  $9 = 0;
  STACKTOP = sp;return ($9|0);
 }
 $6 = ((($1)) + 44|0);
 $7 = (__ZN14NesApuEnvelope5SoundEv($6)|0);
 $8 = ($7|0)!=(0);
 $9 = $8;
 STACKTOP = sp;return ($9|0);
}
function __ZN11CChannelSqr7EnabledEb($this,$value) {
 $this = $this|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $2 = $value&1;
 $1 = $2;
 $3 = $0;
 $4 = $1;
 $5 = $4&1;
 $6 = $5 ? -1 : 0;
 $7 = ((($3)) + 72|0);
 HEAP32[$7>>2] = $6;
 $8 = ((($3)) + 72|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($3)) + 36|0);
 $11 = ((($10)) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $12 & $9;
 HEAP32[$11>>2] = $13;
 $14 = (__ZN11CChannelSqr9CanOutputEv($3)|0);
 $15 = ((($3)) + 64|0);
 $16 = $14&1;
 HEAP8[$15>>0] = $16;
 STACKTOP = sp;return;
}
function __ZN11CChannelTri7EnabledEb($this,$value) {
 $this = $this|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $2 = $value&1;
 $1 = $2;
 $3 = $0;
 $4 = $1;
 $5 = $4&1;
 $6 = $5 ? -1 : 0;
 $7 = ((($3)) + 48|0);
 HEAP32[$7>>2] = $6;
 $8 = ((($3)) + 48|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($3)) + 36|0);
 $11 = ((($10)) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $12 & $9;
 HEAP32[$11>>2] = $13;
 STACKTOP = sp;return;
}
function __ZN11CChannelNoi7EnabledEb($this,$value) {
 $this = $this|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $2 = $value&1;
 $1 = $2;
 $3 = $0;
 $4 = $1;
 $5 = $4&1;
 $6 = $5 ? -1 : 0;
 $7 = ((($3)) + 68|0);
 HEAP32[$7>>2] = $6;
 $8 = ((($3)) + 68|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($3)) + 36|0);
 $11 = ((($10)) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $12 & $9;
 HEAP32[$11>>2] = $13;
 $14 = (__ZN11CChannelNoi9CanOutputEv($3)|0);
 $15 = ((($3)) + 64|0);
 $16 = $14&1;
 HEAP8[$15>>0] = $16;
 STACKTOP = sp;return;
}
function __ZN11CChannelDpm7EnabledEb($this,$value) {
 $this = $this|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $2 = $value&1;
 $1 = $2;
 $3 = $0;
 $4 = $1;
 $5 = $4&1;
 $6 = ((($3)) + 33|0);
 $7 = $5&1;
 HEAP8[$6>>0] = $7;
 $8 = $1;
 $9 = $8&1;
 $10 = ((($3)) + 52|0);
 if ($9) {
  $11 = HEAP32[$10>>2]|0;
  $12 = ($11|0)==(0);
  if ($12) {
   $13 = ((($3)) + 56|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = ((($3)) + 52|0);
   HEAP32[$15>>2] = $14;
   $16 = ((($3)) + 44|0);
   HEAP32[$16>>2] = 7;
   $17 = ((($3)) + 40|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = ((($3)) + 36|0);
   HEAP32[$19>>2] = $18;
  }
 } else {
  HEAP32[$10>>2] = 0;
 }
 $20 = ((($3)) + 66|0);
 HEAP8[$20>>0] = 0;
 __Z9Delta_IRQb(0);
 STACKTOP = sp;return;
}
function __ZN11CChannelSqr7EnabledEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 36|0);
 $3 = ((($2)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)!=(0);
 STACKTOP = sp;return ($5|0);
}
function __ZN11CChannelTri7EnabledEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 36|0);
 $3 = ((($2)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)!=(0);
 STACKTOP = sp;return ($5|0);
}
function __ZN11CChannelNoi7EnabledEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 36|0);
 $3 = ((($2)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)!=(0);
 STACKTOP = sp;return ($5|0);
}
function __ZN11CChannelDpm7EnabledEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 52|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)>(0);
 STACKTOP = sp;return ($4|0);
}
function __ZN6NesApu9ClockQuadEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 24|0);
 __ZN11CChannelSqr9ClockQuadEv($2);
 $3 = ((($1)) + 144|0);
 __ZN11CChannelSqr9ClockQuadEv($3);
 $4 = ((($1)) + 352|0);
 __ZN11CChannelNoi9ClockQuadEv($4);
 $5 = ((($1)) + 264|0);
 __ZN11CChannelTri9ClockQuadEv($5);
 STACKTOP = sp;return;
}
function __ZN6NesApu9ClockHalfEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 24|0);
 __ZN11CChannelSqr11UpdateSweepEi($2,1);
 $3 = ((($1)) + 144|0);
 __ZN11CChannelSqr11UpdateSweepEi($3,0);
 $4 = ((($1)) + 24|0);
 __ZN11CChannelSqr9ClockHalfEv($4);
 $5 = ((($1)) + 144|0);
 __ZN11CChannelSqr9ClockHalfEv($5);
 $6 = ((($1)) + 352|0);
 __ZN11CChannelNoi9ClockHalfEv($6);
 $7 = ((($1)) + 264|0);
 __ZN11CChannelTri9ClockHalfEv($7);
 STACKTOP = sp;return;
}
function __ZN6NesApu18ClockChannelsCycleEb($this,$isClockingLength) {
 $this = $this|0;
 $isClockingLength = $isClockingLength|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $2 = $isClockingLength&1;
 $1 = $2;
 $3 = $0;
 $4 = ((($3)) + 24|0);
 $5 = $1;
 $6 = $5&1;
 __ZN11CChannelSqr10ClockCycleEb($4,$6);
 $7 = ((($3)) + 144|0);
 $8 = $1;
 $9 = $8&1;
 __ZN11CChannelSqr10ClockCycleEb($7,$9);
 $10 = ((($3)) + 352|0);
 $11 = $1;
 $12 = $11&1;
 __ZN11CChannelNoi10ClockCycleEb($10,$12);
 $13 = ((($3)) + 264|0);
 $14 = $1;
 $15 = $14&1;
 __ZN11CChannelTri10ClockCycleEb($13,$15);
 $16 = ((($3)) + 456|0);
 $17 = $1;
 $18 = $17&1;
 __ZN11CChannelDpm10ClockCycleEb($16,$18);
 STACKTOP = sp;return;
}
function __ZN11CChannelSqr9ClockQuadEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 44|0);
 __ZN14NesApuEnvelope5ClockEv($2);
 $3 = (__ZN11CChannelSqr9CanOutputEv($1)|0);
 $4 = ((($1)) + 64|0);
 $5 = $3&1;
 HEAP8[$4>>0] = $5;
 STACKTOP = sp;return;
}
function __ZN11CChannelNoi9ClockQuadEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 44|0);
 __ZN14NesApuEnvelope5ClockEv($2);
 $3 = (__ZN11CChannelNoi9CanOutputEv($1)|0);
 $4 = ((($1)) + 64|0);
 $5 = $3&1;
 HEAP8[$4>>0] = $5;
 STACKTOP = sp;return;
}
function __ZN11CChannelTri9ClockQuadEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 45|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = $3&1;
 if ($4) {
  $5 = ((($1)) + 56|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ((($1)) + 52|0);
  HEAP32[$7>>2] = $6;
 } else {
  $8 = ((($1)) + 52|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($9|0)!=(0);
  if ($10) {
   $11 = ((($1)) + 52|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = (($12) + -1)|0;
   HEAP32[$11>>2] = $13;
   $14 = (__ZN11CChannelTri9CanOutputEv($1)|0);
   $15 = ((($1)) + 44|0);
   $16 = $14&1;
   HEAP8[$15>>0] = $16;
  }
 }
 $17 = ((($1)) + 46|0);
 $18 = HEAP8[$17>>0]|0;
 $19 = $18&1;
 $20 = $19&1;
 $21 = ((($1)) + 45|0);
 $22 = HEAP8[$21>>0]|0;
 $23 = $22&1;
 $24 = $23&1;
 $25 = $24 & $20;
 $26 = ($25|0)!=(0);
 $27 = $26&1;
 HEAP8[$21>>0] = $27;
 STACKTOP = sp;return;
}
function __ZN14NesApuEnvelope5ClockEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 2|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = $3&1;
 if ($4) {
  $5 = ((($1)) + 2|0);
  HEAP8[$5>>0] = 0;
  $6 = ((($1)) + 8|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ((($1)) + 12|0);
  HEAP32[$8>>2] = $7;
  $9 = ((($1)) + 4|0);
  HEAP32[$9>>2] = 15;
  STACKTOP = sp;return;
 }
 $10 = ((($1)) + 12|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)!=(0);
 if ($12) {
  $13 = ((($1)) + 12|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = (($14) + -1)|0;
  HEAP32[$13>>2] = $15;
  STACKTOP = sp;return;
 }
 $16 = ((($1)) + 8|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ((($1)) + 12|0);
 HEAP32[$18>>2] = $17;
 $19 = ((($1)) + 1|0);
 $20 = HEAP8[$19>>0]|0;
 $21 = $20&1;
 if (!($21)) {
  $22 = ((($1)) + 4|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = ($23|0)!=(0);
  if (!($24)) {
   STACKTOP = sp;return;
  }
 }
 $25 = ((($1)) + 4|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = (($26) - 1)|0;
 $28 = $27 & 15;
 $29 = ((($1)) + 4|0);
 HEAP32[$29>>2] = $28;
 STACKTOP = sp;return;
}
function __ZN11CChannelSqr11UpdateSweepEi($this,$complement) {
 $this = $this|0;
 $complement = $complement|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $shifted = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $complement;
 $2 = $0;
 $3 = ((($2)) + 80|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)!=(0);
 do {
  if ($5) {
   $6 = ((($2)) + 76|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = (($7) + -1)|0;
   HEAP32[$6>>2] = $8;
   $9 = ($8|0)==(0);
   if ($9) {
    $10 = ((($2)) + 80|0);
    $11 = HEAP32[$10>>2]|0;
    $12 = ((($2)) + 76|0);
    HEAP32[$12>>2] = $11;
    $13 = ((($2)) + 92|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = ($14|0)>=(8);
    if ($15) {
     $16 = ((($2)) + 92|0);
     $17 = HEAP32[$16>>2]|0;
     $18 = ((($2)) + 84|0);
     $19 = HEAP32[$18>>2]|0;
     $20 = $17 >> $19;
     $shifted = $20;
     $21 = ((($2)) + 88|0);
     $22 = HEAP32[$21>>2]|0;
     $23 = ($22|0)==(0);
     if ($23) {
      $24 = $shifted;
      $25 = $1;
      $26 = (($24) + ($25))|0;
      $27 = ((($2)) + 92|0);
      $28 = HEAP32[$27>>2]|0;
      $29 = (($28) - ($26))|0;
      HEAP32[$27>>2] = $29;
      __ZN11CChannelSqr15UpdateFrequencyEv($2);
      break;
     }
     $30 = ((($2)) + 92|0);
     $31 = HEAP32[$30>>2]|0;
     $32 = $shifted;
     $33 = (($31) + ($32))|0;
     $34 = ($33|0)<=(2047);
     if ($34) {
      $35 = $shifted;
      $36 = ((($2)) + 92|0);
      $37 = HEAP32[$36>>2]|0;
      $38 = (($37) + ($35))|0;
      HEAP32[$36>>2] = $38;
      __ZN11CChannelSqr15UpdateFrequencyEv($2);
     }
    }
   }
  }
 } while(0);
 $39 = ((($2)) + 65|0);
 $40 = HEAP8[$39>>0]|0;
 $41 = $40&1;
 if (!($41)) {
  STACKTOP = sp;return;
 }
 $42 = ((($2)) + 65|0);
 HEAP8[$42>>0] = 0;
 $43 = ((($2)) + 80|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = ((($2)) + 76|0);
 HEAP32[$45>>2] = $44;
 STACKTOP = sp;return;
}
function __ZN11CChannelSqr9ClockHalfEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 36|0);
 __ZN14NesApuDuration5ClockEv($2);
 $3 = (__ZN11CChannelSqr9CanOutputEv($1)|0);
 $4 = ((($1)) + 64|0);
 $5 = $3&1;
 HEAP8[$4>>0] = $5;
 STACKTOP = sp;return;
}
function __ZN11CChannelNoi9ClockHalfEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 36|0);
 __ZN14NesApuDuration5ClockEv($2);
 $3 = (__ZN11CChannelNoi9CanOutputEv($1)|0);
 $4 = ((($1)) + 64|0);
 $5 = $3&1;
 HEAP8[$4>>0] = $5;
 STACKTOP = sp;return;
}
function __ZN11CChannelTri9ClockHalfEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 36|0);
 __ZN14NesApuDuration5ClockEv($2);
 $3 = (__ZN11CChannelTri9CanOutputEv($1)|0);
 $4 = ((($1)) + 44|0);
 $5 = $3&1;
 HEAP8[$4>>0] = $5;
 STACKTOP = sp;return;
}
function __ZN14NesApuDuration5ClockEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = HEAP8[$1>>0]|0;
 $3 = $2&1;
 if ($3) {
  $4 = ((($1)) + 4|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ($5|0)!=(0);
  if ($6) {
   $7 = ((($1)) + 4|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = (($8) + -1)|0;
   HEAP32[$7>>2] = $9;
  }
 }
 STACKTOP = sp;return;
}
function __ZN11CChannelSqr10ClockCycleEb($this,$isClockingLength) {
 $this = $this|0;
 $isClockingLength = $isClockingLength|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $2 = $isClockingLength&1;
 $1 = $2;
 $3 = $0;
 $4 = ((($3)) + 36|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = $5&1;
 $7 = $6&1;
 $8 = ((($3)) + 104|0);
 $9 = HEAP8[$8>>0]|0;
 $10 = $9&1;
 $11 = $10&1;
 $12 = ($7|0)!=($11|0);
 if ($12) {
  $13 = ((($3)) + 104|0);
  $14 = HEAP8[$13>>0]|0;
  $15 = $14&1;
  $16 = ((($3)) + 36|0);
  $17 = $15&1;
  HEAP8[$16>>0] = $17;
 }
 $18 = $1;
 $19 = $18&1;
 if ($19) {
  $20 = ((($3)) + 36|0);
  $21 = ((($20)) + 4|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = ($22|0)>(0);
  if ($23) {
   $24 = ((($3)) + 112|0);
   HEAP8[$24>>0] = 0;
  }
 }
 $25 = ((($3)) + 112|0);
 $26 = HEAP8[$25>>0]|0;
 $27 = $26&1;
 if (!($27)) {
  STACKTOP = sp;return;
 }
 $28 = ((($3)) + 108|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = ((($3)) + 36|0);
 $31 = ((($30)) + 4|0);
 HEAP32[$31>>2] = $29;
 $32 = ((($3)) + 112|0);
 HEAP8[$32>>0] = 0;
 STACKTOP = sp;return;
}
function __ZN11CChannelNoi10ClockCycleEb($this,$isClockingLength) {
 $this = $this|0;
 $isClockingLength = $isClockingLength|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $2 = $isClockingLength&1;
 $1 = $2;
 $3 = $0;
 $4 = ((($3)) + 36|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = $5&1;
 $7 = $6&1;
 $8 = ((($3)) + 88|0);
 $9 = HEAP8[$8>>0]|0;
 $10 = $9&1;
 $11 = $10&1;
 $12 = ($7|0)!=($11|0);
 if ($12) {
  $13 = ((($3)) + 88|0);
  $14 = HEAP8[$13>>0]|0;
  $15 = $14&1;
  $16 = ((($3)) + 36|0);
  $17 = $15&1;
  HEAP8[$16>>0] = $17;
 }
 $18 = $1;
 $19 = $18&1;
 if ($19) {
  $20 = ((($3)) + 36|0);
  $21 = ((($20)) + 4|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = ($22|0)>(0);
  if ($23) {
   $24 = ((($3)) + 96|0);
   HEAP8[$24>>0] = 0;
  }
 }
 $25 = ((($3)) + 96|0);
 $26 = HEAP8[$25>>0]|0;
 $27 = $26&1;
 if (!($27)) {
  STACKTOP = sp;return;
 }
 $28 = ((($3)) + 92|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = ((($3)) + 36|0);
 $31 = ((($30)) + 4|0);
 HEAP32[$31>>2] = $29;
 $32 = ((($3)) + 96|0);
 HEAP8[$32>>0] = 0;
 STACKTOP = sp;return;
}
function __ZN11CChannelTri10ClockCycleEb($this,$isClockingLength) {
 $this = $this|0;
 $isClockingLength = $isClockingLength|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $2 = $isClockingLength&1;
 $1 = $2;
 $3 = $0;
 $4 = ((($3)) + 36|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = $5&1;
 $7 = $6&1;
 $8 = ((($3)) + 76|0);
 $9 = HEAP8[$8>>0]|0;
 $10 = $9&1;
 $11 = $10&1;
 $12 = ($7|0)!=($11|0);
 if ($12) {
  $13 = ((($3)) + 76|0);
  $14 = HEAP8[$13>>0]|0;
  $15 = $14&1;
  $16 = ((($3)) + 36|0);
  $17 = $15&1;
  HEAP8[$16>>0] = $17;
 }
 $18 = $1;
 $19 = $18&1;
 if ($19) {
  $20 = ((($3)) + 36|0);
  $21 = ((($20)) + 4|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = ($22|0)>(0);
  if ($23) {
   $24 = ((($3)) + 84|0);
   HEAP8[$24>>0] = 0;
  }
 }
 $25 = ((($3)) + 84|0);
 $26 = HEAP8[$25>>0]|0;
 $27 = $26&1;
 if (!($27)) {
  STACKTOP = sp;return;
 }
 $28 = ((($3)) + 80|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = ((($3)) + 36|0);
 $31 = ((($30)) + 4|0);
 HEAP32[$31>>2] = $29;
 $32 = ((($3)) + 84|0);
 HEAP8[$32>>0] = 0;
 STACKTOP = sp;return;
}
function __ZN11CChannelDpm10ClockCycleEb($this,$isClockingLength) {
 $this = $this|0;
 $isClockingLength = $isClockingLength|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $2 = $isClockingLength&1;
 $1 = $2;
 $3 = $0;
 $4 = ((($3)) + 72|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + -1)|0;
 HEAP32[$4>>2] = $6;
 $7 = ($6|0)==(0);
 if (!($7)) {
  STACKTOP = sp;return;
 }
 $8 = ((($3)) + 68|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (177340 + ($9<<2)|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($3)) + 72|0);
 HEAP32[$12>>2] = $11;
 $13 = ((($3)) + 44|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)==(7);
 do {
  if ($15) {
   $16 = ((($3)) + 52|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = ($17|0)>(0);
   if (!($18)) {
    $59 = ((($3)) + 33|0);
    HEAP8[$59>>0] = 0;
    break;
   }
   $19 = ((($3)) + 44|0);
   HEAP32[$19>>2] = 0;
   $20 = ((($3)) + 36|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = $21&65535;
   $23 = (__Z8ReadBytet($22)|0);
   $24 = $23&255;
   $25 = ((($3)) + 48|0);
   HEAP32[$25>>2] = $24;
   $26 = ((($3)) + 36|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = (($27) + 1)|0;
   HEAP32[$26>>2] = $28;
   $29 = ($28|0)==(65536);
   if ($29) {
    $30 = ((($3)) + 36|0);
    HEAP32[$30>>2] = 32768;
   }
   $31 = ((($3)) + 52|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = (($32) + -1)|0;
   HEAP32[$31>>2] = $33;
   $34 = ((($3)) + 52|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = ($35|0)==(1);
   if ($36) {
    $37 = ((($3)) + 34|0);
    $38 = HEAP8[$37>>0]|0;
    $39 = $38&1;
    if (!($39)) {
     $40 = ((($3)) + 65|0);
     $41 = HEAP8[$40>>0]|0;
     $42 = $41&1;
     if ($42) {
      $43 = ((($3)) + 52|0);
      $44 = HEAP32[$43>>2]|0;
      $45 = (($44) + -1)|0;
      HEAP32[$43>>2] = $45;
      __Z9Delta_IRQb(1);
      $46 = ((($3)) + 66|0);
      HEAP8[$46>>0] = 1;
     }
    }
   }
   $47 = ((($3)) + 52|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = ($48|0)==(0);
   if ($49) {
    $50 = ((($3)) + 34|0);
    $51 = HEAP8[$50>>0]|0;
    $52 = $51&1;
    if ($52) {
     $53 = ((($3)) + 40|0);
     $54 = HEAP32[$53>>2]|0;
     $55 = ((($3)) + 36|0);
     HEAP32[$55>>2] = $54;
     $56 = ((($3)) + 56|0);
     $57 = HEAP32[$56>>2]|0;
     $58 = ((($3)) + 52|0);
     HEAP32[$58>>2] = $57;
    }
   }
  } else {
   $60 = ((($3)) + 44|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = (($61) + 1)|0;
   HEAP32[$60>>2] = $62;
   $63 = ((($3)) + 48|0);
   $64 = HEAP32[$63>>2]|0;
   $65 = $64 >> 1;
   HEAP32[$63>>2] = $65;
  }
 } while(0);
 $66 = ((($3)) + 33|0);
 $67 = HEAP8[$66>>0]|0;
 $68 = $67&1;
 if (!($68)) {
  STACKTOP = sp;return;
 }
 $69 = ((($3)) + 48|0);
 $70 = HEAP32[$69>>2]|0;
 $71 = $70 & 1;
 $72 = ($71|0)!=(0);
 $73 = ((($3)) + 60|0);
 $74 = HEAP32[$73>>2]|0;
 if ($72) {
  $75 = ($74|0)<(126);
  if (!($75)) {
   STACKTOP = sp;return;
  }
  $76 = ((($3)) + 60|0);
  $77 = HEAP32[$76>>2]|0;
  $78 = (($77) + 2)|0;
  HEAP32[$76>>2] = $78;
  STACKTOP = sp;return;
 } else {
  $79 = ($74|0)>(1);
  if (!($79)) {
   STACKTOP = sp;return;
  }
  $80 = ((($3)) + 60|0);
  $81 = HEAP32[$80>>2]|0;
  $82 = (($81) - 2)|0;
  HEAP32[$80>>2] = $82;
  STACKTOP = sp;return;
 }
}
function __GLOBAL__sub_I_apu_cpp() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___cxx_global_var_init();
 return;
}
function __Z10mapper_IRQb($asserted) {
 $asserted = $asserted|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $asserted&1;
 $0 = $1;
 $2 = $0;
 $3 = $2&1;
 __ZL7cpu_IRQ7IsrTypeb(4,$3);
 STACKTOP = sp;return;
}
function __Z9Delta_IRQb($asserted) {
 $asserted = $asserted|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $asserted&1;
 $0 = $1;
 $2 = $0;
 $3 = $2&1;
 __ZL7cpu_IRQ7IsrTypeb(2,$3);
 STACKTOP = sp;return;
}
function __Z9Frame_IRQb($asserted) {
 $asserted = $asserted|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $asserted&1;
 $0 = $1;
 $2 = $0;
 $3 = $2&1;
 __ZL7cpu_IRQ7IsrTypeb(1,$3);
 STACKTOP = sp;return;
}
function __Z7cpu_NMIb($asserted) {
 $asserted = $asserted|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $asserted&1;
 $0 = $1;
 $2 = $0;
 $3 = $2&1;
 $4 = $3&1;
 HEAP8[433218>>0] = $4;
 STACKTOP = sp;return;
}
function __Z8CPUResetv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[177404>>0] = 0;
 HEAP8[(177405)>>0] = 0;
 HEAP8[(177406)>>0] = 0;
 HEAP8[(177407)>>0] = -3;
 HEAP8[(177408)>>0] = 52;
 $0 = (__ZL10_FetchWordt(-4)|0);
 HEAP16[(177410)>>1] = $0;
 HEAP32[(177412)>>2] = 0;
 HEAP8[433216>>0] = 0;
 HEAP8[433217>>0] = 0;
 HEAP8[433218>>0] = 0;
 HEAP32[177424>>2] = 0;
 HEAP16[431024>>1] = 0;
 return;
}
function __Z10CPUExecutev() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0;
 var $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0;
 var $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0;
 var $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0;
 var $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0;
 var $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0;
 var $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0;
 var $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0;
 var $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0;
 var $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0;
 var $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0;
 var $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0;
 var $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0;
 var $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0;
 var $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0;
 var $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0;
 var $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0;
 var $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0;
 var $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0;
 var $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0;
 var $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0;
 var $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0;
 var $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0;
 var $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0;
 var $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0;
 var $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0;
 var $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0;
 var $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0;
 var $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0;
 var $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0;
 var $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0;
 var $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0;
 var $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0;
 var $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0;
 var $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0;
 var $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0;
 var $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0;
 var $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0;
 var $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0;
 var $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0;
 var $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0;
 var $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0;
 var $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0;
 var $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0;
 var $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0;
 var $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0;
 var $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0;
 var $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0;
 var $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0;
 var $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0;
 var $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $addr = 0, $addr1 = 0, $addr2 = 0, $addr3 = 0, $addr4 = 0, $code = 0, $cpu = 0, $data = 0, $data5 = 0, $data6 = 0, $data7 = 0, $data8 = 0, $mode = 0;
 var $token = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = HEAP16[431024>>1]|0;
 $1 = $0&65535;
 HEAP32[(177412)>>2] = $1;
 HEAP16[431024>>1] = 0;
 $2 = (__ZL11IS_SET_FLAGP7CPU6502h(177404,4)|0);
 $3 = ($2<<24>>24)!=(0);
 $4 = HEAP32[177424>>2]|0;
 $5 = ($4|0)!=(0);
 $6 = $3 ? 0 : $5;
 $7 = $6&1;
 HEAP8[433219>>0] = $7;
 $8 = HEAP16[(177410)>>1]|0;
 $9 = (($8) + 1)<<16>>16;
 HEAP16[(177410)>>1] = $9;
 $10 = (__ZL10_FetchBytet($8)|0);
 $code = $10;
 $11 = $code;
 $12 = $11&255;
 $13 = (177428 + ($12<<2)|0);
 $14 = HEAP32[$13>>2]|0;
 $token = $14;
 $15 = $code;
 $16 = $15&255;
 $17 = (178452 + ($16<<2)|0);
 $18 = HEAP32[$17>>2]|0;
 $mode = $18;
 HEAP8[(177420)>>0] = 0;
 HEAP16[(177418)>>1] = 0;
 HEAP8[(177416)>>0] = 0;
 $19 = $code;
 $20 = $19&255;
 $21 = (433220 + ($20)|0);
 $22 = HEAP8[$21>>0]|0;
 HEAP8[(177421)>>0] = $22;
 $cpu = 177404;
 $23 = $mode;
 do {
  switch ($23|0) {
  case 13:  {
   $183 = $cpu;
   $184 = ((($183)) + 6|0);
   $185 = HEAP16[$184>>1]|0;
   $186 = (($185) + 1)<<16>>16;
   HEAP16[$184>>1] = $186;
   $187 = $cpu;
   $188 = ((($187)) + 14|0);
   HEAP16[$188>>1] = $185;
   break;
  }
  case 12:  {
   $160 = $cpu;
   $161 = ((($160)) + 6|0);
   $162 = HEAP16[$161>>1]|0;
   $163 = (($162) + 1)<<16>>16;
   HEAP16[$161>>1] = $163;
   $164 = (__ZL10_FetchBytet($162)|0);
   $165 = $164&255;
   $addr4 = $165;
   $166 = $addr4;
   $167 = (__ZL9_ReadWordt($166)|0);
   $addr4 = $167;
   $168 = $addr4;
   $169 = $168&65535;
   $170 = $cpu;
   $171 = ((($170)) + 2|0);
   $172 = HEAP8[$171>>0]|0;
   $173 = $172&255;
   $174 = (($169) + ($173))|0;
   $175 = $174&65535;
   $176 = $cpu;
   $177 = ((($176)) + 14|0);
   HEAP16[$177>>1] = $175;
   $178 = $cpu;
   $179 = $addr4;
   $180 = $cpu;
   $181 = ((($180)) + 2|0);
   $182 = HEAP8[$181>>0]|0;
   __ZL9CrossPageP7CPU6502th($178,$179,$182);
   break;
  }
  case 2:  {
   $24 = $cpu;
   $25 = ((($24)) + 16|0);
   HEAP8[$25>>0] = 1;
   break;
  }
  case 3:  {
   $26 = $cpu;
   $27 = ((($26)) + 6|0);
   $28 = HEAP16[$27>>1]|0;
   $29 = (($28) + 1)<<16>>16;
   HEAP16[$27>>1] = $29;
   $30 = $cpu;
   $31 = ((($30)) + 14|0);
   HEAP16[$31>>1] = $28;
   break;
  }
  case 4:  {
   $32 = $cpu;
   $33 = ((($32)) + 6|0);
   $34 = HEAP16[$33>>1]|0;
   $35 = (($34) + 1)<<16>>16;
   HEAP16[$33>>1] = $35;
   $36 = (__ZL10_FetchBytet($34)|0);
   $37 = $36&255;
   $38 = $cpu;
   $39 = ((($38)) + 14|0);
   HEAP16[$39>>1] = $37;
   break;
  }
  case 5:  {
   $40 = $cpu;
   $41 = ((($40)) + 6|0);
   $42 = HEAP16[$41>>1]|0;
   $43 = (($42) + 1)<<16>>16;
   HEAP16[$41>>1] = $43;
   $44 = (__ZL10_FetchBytet($42)|0);
   $45 = $44&255;
   $46 = $cpu;
   $47 = ((($46)) + 1|0);
   $48 = HEAP8[$47>>0]|0;
   $49 = $48&255;
   $50 = (($45) + ($49))|0;
   $51 = $50&65535;
   $52 = $cpu;
   $53 = ((($52)) + 14|0);
   HEAP16[$53>>1] = $51;
   break;
  }
  case 6:  {
   $54 = $cpu;
   $55 = ((($54)) + 6|0);
   $56 = HEAP16[$55>>1]|0;
   $57 = (($56) + 1)<<16>>16;
   HEAP16[$55>>1] = $57;
   $58 = (__ZL10_FetchBytet($56)|0);
   $59 = $58&255;
   $60 = $cpu;
   $61 = ((($60)) + 2|0);
   $62 = HEAP8[$61>>0]|0;
   $63 = $62&255;
   $64 = (($59) + ($63))|0;
   $65 = $64&65535;
   $66 = $cpu;
   $67 = ((($66)) + 14|0);
   HEAP16[$67>>1] = $65;
   break;
  }
  case 7:  {
   $68 = $cpu;
   $69 = ((($68)) + 6|0);
   $70 = HEAP16[$69>>1]|0;
   $71 = (__ZL10_FetchWordt($70)|0);
   $72 = $cpu;
   $73 = ((($72)) + 14|0);
   HEAP16[$73>>1] = $71;
   $74 = $cpu;
   $75 = ((($74)) + 6|0);
   $76 = HEAP16[$75>>1]|0;
   $77 = $76&65535;
   $78 = (($77) + 2)|0;
   $79 = $78&65535;
   HEAP16[$75>>1] = $79;
   break;
  }
  case 8:  {
   $80 = $cpu;
   $81 = ((($80)) + 6|0);
   $82 = HEAP16[$81>>1]|0;
   $83 = (__ZL10_FetchWordt($82)|0);
   $addr = $83;
   $84 = $addr;
   $85 = $84&65535;
   $86 = $cpu;
   $87 = ((($86)) + 1|0);
   $88 = HEAP8[$87>>0]|0;
   $89 = $88&255;
   $90 = (($85) + ($89))|0;
   $91 = $90&65535;
   $92 = $cpu;
   $93 = ((($92)) + 14|0);
   HEAP16[$93>>1] = $91;
   $94 = $cpu;
   $95 = ((($94)) + 6|0);
   $96 = HEAP16[$95>>1]|0;
   $97 = $96&65535;
   $98 = (($97) + 2)|0;
   $99 = $98&65535;
   HEAP16[$95>>1] = $99;
   $100 = $cpu;
   $101 = $addr;
   $102 = $cpu;
   $103 = ((($102)) + 1|0);
   $104 = HEAP8[$103>>0]|0;
   __ZL9CrossPageP7CPU6502th($100,$101,$104);
   break;
  }
  case 9:  {
   $105 = $cpu;
   $106 = ((($105)) + 6|0);
   $107 = HEAP16[$106>>1]|0;
   $108 = (__ZL10_FetchWordt($107)|0);
   $addr1 = $108;
   $109 = $addr1;
   $110 = $109&65535;
   $111 = $cpu;
   $112 = ((($111)) + 2|0);
   $113 = HEAP8[$112>>0]|0;
   $114 = $113&255;
   $115 = (($110) + ($114))|0;
   $116 = $115&65535;
   $117 = $cpu;
   $118 = ((($117)) + 14|0);
   HEAP16[$118>>1] = $116;
   $119 = $cpu;
   $120 = ((($119)) + 6|0);
   $121 = HEAP16[$120>>1]|0;
   $122 = $121&65535;
   $123 = (($122) + 2)|0;
   $124 = $123&65535;
   HEAP16[$120>>1] = $124;
   $125 = $cpu;
   $126 = $addr1;
   $127 = $cpu;
   $128 = ((($127)) + 2|0);
   $129 = HEAP8[$128>>0]|0;
   __ZL9CrossPageP7CPU6502th($125,$126,$129);
   break;
  }
  case 10:  {
   $130 = $cpu;
   $131 = ((($130)) + 6|0);
   $132 = HEAP16[$131>>1]|0;
   $133 = (__ZL10_FetchWordt($132)|0);
   $addr2 = $133;
   $134 = $addr2;
   $135 = (__ZL10_FetchWordt($134)|0);
   $136 = $cpu;
   $137 = ((($136)) + 14|0);
   HEAP16[$137>>1] = $135;
   $138 = $cpu;
   $139 = ((($138)) + 6|0);
   $140 = HEAP16[$139>>1]|0;
   $141 = $140&65535;
   $142 = (($141) + 2)|0;
   $143 = $142&65535;
   HEAP16[$139>>1] = $143;
   break;
  }
  case 11:  {
   $144 = $cpu;
   $145 = ((($144)) + 6|0);
   $146 = HEAP16[$145>>1]|0;
   $147 = (($146) + 1)<<16>>16;
   HEAP16[$145>>1] = $147;
   $148 = (__ZL10_FetchBytet($146)|0);
   $149 = $148&255;
   $150 = $cpu;
   $151 = ((($150)) + 1|0);
   $152 = HEAP8[$151>>0]|0;
   $153 = $152&255;
   $154 = (($149) + ($153))|0;
   $155 = $154&65535;
   $addr3 = $155;
   $156 = $addr3;
   $157 = (__ZL9_ReadWordt($156)|0);
   $158 = $cpu;
   $159 = ((($158)) + 14|0);
   HEAP16[$159>>1] = $157;
   break;
  }
  default: {
  }
  }
 } while(0);
 $189 = $token;
 L15: do {
  switch ($189|0) {
  case 56:  {
   $1004 = $cpu;
   $1005 = ((($1004)) + 2|0);
   $1006 = HEAP8[$1005>>0]|0;
   $1007 = $cpu;
   HEAP8[$1007>>0] = $1006;
   $1008 = $cpu;
   $1009 = $cpu;
   $1010 = HEAP8[$1009>>0]|0;
   __ZL11SET_ZN_FLAGP7CPU6502h($1008,$1010);
   break;
  }
  case 1:  {
   $190 = $cpu;
   $191 = ((($190)) + 14|0);
   $192 = HEAP16[$191>>1]|0;
   $193 = (__Z8ReadBytet($192)|0);
   $194 = $cpu;
   $195 = ((($194)) + 12|0);
   HEAP8[$195>>0] = $193;
   $196 = $cpu;
   $197 = ((($196)) + 12|0);
   $198 = HEAP8[$197>>0]|0;
   $199 = $198&255;
   $200 = $cpu;
   $201 = HEAP8[$200>>0]|0;
   $202 = $201&255;
   $203 = (($199) + ($202))|0;
   $204 = $cpu;
   $205 = (__ZL11IS_SET_FLAGP7CPU6502h($204,1)|0);
   $206 = $205&255;
   $207 = (($203) + ($206))|0;
   $208 = $207&65535;
   $data = $208;
   $209 = $cpu;
   $210 = $data;
   $211 = $210&65535;
   $212 = ($211|0)>(255);
   $213 = $212&1;
   __ZL8TST_FLAGP7CPU6502hh($209,$213,1);
   $214 = $cpu;
   $215 = $cpu;
   $216 = HEAP8[$215>>0]|0;
   $217 = $216&255;
   $218 = $cpu;
   $219 = ((($218)) + 12|0);
   $220 = HEAP8[$219>>0]|0;
   $221 = $220&255;
   $222 = $217 ^ $221;
   $223 = $222 ^ -1;
   $224 = $cpu;
   $225 = HEAP8[$224>>0]|0;
   $226 = $225&255;
   $227 = $data;
   $228 = $227&65535;
   $229 = $226 ^ $228;
   $230 = $223 & $229;
   $231 = $230 & 128;
   $232 = $231&255;
   __ZL8TST_FLAGP7CPU6502hh($214,$232,64);
   $233 = $data;
   $234 = $233&65535;
   $235 = $234 & 255;
   $236 = $235&255;
   $237 = $cpu;
   HEAP8[$237>>0] = $236;
   $238 = $cpu;
   $239 = $cpu;
   $240 = HEAP8[$239>>0]|0;
   __ZL11SET_ZN_FLAGP7CPU6502h($238,$240);
   break;
  }
  case 2:  {
   $241 = $cpu;
   $242 = ((($241)) + 14|0);
   $243 = HEAP16[$242>>1]|0;
   $244 = (__Z8ReadBytet($243)|0);
   $245 = $cpu;
   $246 = ((($245)) + 12|0);
   HEAP8[$246>>0] = $244;
   $247 = $cpu;
   $248 = ((($247)) + 12|0);
   $249 = HEAP8[$248>>0]|0;
   $250 = $249&255;
   $251 = $cpu;
   $252 = HEAP8[$251>>0]|0;
   $253 = $252&255;
   $254 = $253 & $250;
   $255 = $254&255;
   HEAP8[$251>>0] = $255;
   $256 = $cpu;
   $257 = $cpu;
   $258 = HEAP8[$257>>0]|0;
   __ZL11SET_ZN_FLAGP7CPU6502h($256,$258);
   break;
  }
  case 3:  {
   $259 = $cpu;
   $260 = ((($259)) + 16|0);
   $261 = HEAP8[$260>>0]|0;
   $262 = ($261<<24>>24)!=(0);
   $263 = $cpu;
   if ($262) {
    $264 = $cpu;
    $265 = HEAP8[$264>>0]|0;
    $266 = $265&255;
    $267 = $266 & 128;
    $268 = $267&255;
    __ZL8TST_FLAGP7CPU6502hh($263,$268,1);
    $269 = $cpu;
    $270 = HEAP8[$269>>0]|0;
    $271 = $270&255;
    $272 = $271 << 1;
    $273 = $272&255;
    HEAP8[$269>>0] = $273;
    $274 = $cpu;
    $275 = $cpu;
    $276 = HEAP8[$275>>0]|0;
    __ZL11SET_ZN_FLAGP7CPU6502h($274,$276);
    break L15;
   } else {
    $277 = ((($263)) + 14|0);
    $278 = HEAP16[$277>>1]|0;
    $279 = (__Z8ReadBytet($278)|0);
    $280 = $cpu;
    $281 = ((($280)) + 12|0);
    HEAP8[$281>>0] = $279;
    $282 = $cpu;
    $283 = $cpu;
    $284 = ((($283)) + 12|0);
    $285 = HEAP8[$284>>0]|0;
    $286 = $285&255;
    $287 = $286 & 128;
    $288 = $287&255;
    __ZL8TST_FLAGP7CPU6502hh($282,$288,1);
    $289 = $cpu;
    $290 = ((($289)) + 12|0);
    $291 = HEAP8[$290>>0]|0;
    $292 = $291&255;
    $293 = $292 << 1;
    $294 = $293&255;
    HEAP8[$290>>0] = $294;
    $295 = $cpu;
    $296 = $cpu;
    $297 = ((($296)) + 12|0);
    $298 = HEAP8[$297>>0]|0;
    __ZL11SET_ZN_FLAGP7CPU6502h($295,$298);
    $299 = $cpu;
    $300 = ((($299)) + 14|0);
    $301 = HEAP16[$300>>1]|0;
    $302 = $cpu;
    $303 = ((($302)) + 12|0);
    $304 = HEAP8[$303>>0]|0;
    __ZL10_WriteByteth($301,$304);
    break L15;
   }
   break;
  }
  case 4:  {
   $305 = $cpu;
   $306 = $cpu;
   $307 = (__ZL11IS_SET_FLAGP7CPU6502h($306,1)|0);
   $308 = ($307<<24>>24)!=(0);
   $309 = $308 ^ 1;
   $310 = $309&1;
   __ZL8REL_JUMPP7CPU6502h($305,$310);
   break;
  }
  case 5:  {
   $311 = $cpu;
   $312 = $cpu;
   $313 = (__ZL11IS_SET_FLAGP7CPU6502h($312,1)|0);
   __ZL8REL_JUMPP7CPU6502h($311,$313);
   break;
  }
  case 6:  {
   $314 = $cpu;
   $315 = $cpu;
   $316 = (__ZL11IS_SET_FLAGP7CPU6502h($315,2)|0);
   __ZL8REL_JUMPP7CPU6502h($314,$316);
   break;
  }
  case 7:  {
   $317 = $cpu;
   $318 = ((($317)) + 14|0);
   $319 = HEAP16[$318>>1]|0;
   $320 = (__Z8ReadBytet($319)|0);
   $321 = $cpu;
   $322 = ((($321)) + 12|0);
   HEAP8[$322>>0] = $320;
   $323 = $cpu;
   $324 = $cpu;
   $325 = ((($324)) + 12|0);
   $326 = HEAP8[$325>>0]|0;
   $327 = $326&255;
   $328 = $cpu;
   $329 = HEAP8[$328>>0]|0;
   $330 = $329&255;
   $331 = $327 & $330;
   $332 = ($331|0)==(0);
   $333 = $332&1;
   __ZL8TST_FLAGP7CPU6502hh($323,$333,2);
   $334 = $cpu;
   $335 = $cpu;
   $336 = ((($335)) + 12|0);
   $337 = HEAP8[$336>>0]|0;
   $338 = $337&255;
   $339 = $338 & 128;
   $340 = $339&255;
   __ZL8TST_FLAGP7CPU6502hh($334,$340,-128);
   $341 = $cpu;
   $342 = $cpu;
   $343 = ((($342)) + 12|0);
   $344 = HEAP8[$343>>0]|0;
   $345 = $344&255;
   $346 = $345 & 64;
   $347 = $346&255;
   __ZL8TST_FLAGP7CPU6502hh($341,$347,64);
   break;
  }
  case 8:  {
   $348 = $cpu;
   $349 = $cpu;
   $350 = (__ZL11IS_SET_FLAGP7CPU6502h($349,-128)|0);
   __ZL8REL_JUMPP7CPU6502h($348,$350);
   break;
  }
  case 9:  {
   $351 = $cpu;
   $352 = $cpu;
   $353 = (__ZL11IS_SET_FLAGP7CPU6502h($352,2)|0);
   $354 = ($353<<24>>24)!=(0);
   $355 = $354 ^ 1;
   $356 = $355&1;
   __ZL8REL_JUMPP7CPU6502h($351,$356);
   break;
  }
  case 10:  {
   $357 = $cpu;
   $358 = $cpu;
   $359 = (__ZL11IS_SET_FLAGP7CPU6502h($358,-128)|0);
   $360 = ($359<<24>>24)!=(0);
   $361 = $360 ^ 1;
   $362 = $361&1;
   __ZL8REL_JUMPP7CPU6502h($357,$362);
   break;
  }
  case 11:  {
   $363 = $cpu;
   $364 = ((($363)) + 6|0);
   $365 = HEAP16[$364>>1]|0;
   $366 = (($365) + 1)<<16>>16;
   HEAP16[$364>>1] = $366;
   $367 = $cpu;
   $368 = $cpu;
   $369 = ((($368)) + 6|0);
   $370 = HEAP16[$369>>1]|0;
   $371 = $370&65535;
   $372 = $371 >> 8;
   $373 = $372&255;
   __ZL4PUSHP7CPU6502h($367,$373);
   $374 = $cpu;
   $375 = $cpu;
   $376 = ((($375)) + 6|0);
   $377 = HEAP16[$376>>1]|0;
   $378 = $377&65535;
   $379 = $378 & 255;
   $380 = $379&255;
   __ZL4PUSHP7CPU6502h($374,$380);
   $381 = $cpu;
   __ZL8SET_FLAGP7CPU6502h($381,16);
   $382 = $cpu;
   $383 = $cpu;
   $384 = ((($383)) + 4|0);
   $385 = HEAP8[$384>>0]|0;
   __ZL4PUSHP7CPU6502h($382,$385);
   $386 = $cpu;
   __ZL8SET_FLAGP7CPU6502h($386,4);
   $387 = (__ZL10_FetchWordt(-2)|0);
   $388 = $cpu;
   $389 = ((($388)) + 6|0);
   HEAP16[$389>>1] = $387;
   break;
  }
  case 12:  {
   $390 = $cpu;
   $391 = $cpu;
   $392 = (__ZL11IS_SET_FLAGP7CPU6502h($391,64)|0);
   $393 = ($392<<24>>24)!=(0);
   $394 = $393 ^ 1;
   $395 = $394&1;
   __ZL8REL_JUMPP7CPU6502h($390,$395);
   break;
  }
  case 13:  {
   $396 = $cpu;
   $397 = $cpu;
   $398 = (__ZL11IS_SET_FLAGP7CPU6502h($397,64)|0);
   __ZL8REL_JUMPP7CPU6502h($396,$398);
   break;
  }
  case 14:  {
   $399 = $cpu;
   __ZL8CLR_FLAGP7CPU6502h($399,1);
   break;
  }
  case 15:  {
   $400 = $cpu;
   __ZL8CLR_FLAGP7CPU6502h($400,8);
   break;
  }
  case 16:  {
   $401 = $cpu;
   __ZL8CLR_FLAGP7CPU6502h($401,4);
   break;
  }
  case 17:  {
   $402 = $cpu;
   __ZL8CLR_FLAGP7CPU6502h($402,64);
   break;
  }
  case 18:  {
   $403 = $cpu;
   $404 = ((($403)) + 14|0);
   $405 = HEAP16[$404>>1]|0;
   $406 = (__Z8ReadBytet($405)|0);
   $407 = $cpu;
   $408 = ((($407)) + 12|0);
   HEAP8[$408>>0] = $406;
   $409 = $cpu;
   $410 = HEAP8[$409>>0]|0;
   $411 = $410&255;
   $412 = $411&65535;
   $413 = $cpu;
   $414 = ((($413)) + 12|0);
   $415 = HEAP8[$414>>0]|0;
   $416 = $415&255;
   $417 = $416&65535;
   $418 = (($412) - ($417))|0;
   $419 = $418&65535;
   $data5 = $419;
   $420 = $cpu;
   $421 = $data5;
   $422 = $421&65535;
   $423 = $422 & 32768;
   $424 = ($423|0)==(0);
   $425 = $424&1;
   __ZL8TST_FLAGP7CPU6502hh($420,$425,1);
   $426 = $cpu;
   $427 = $data5;
   $428 = $427&65535;
   $429 = $428 & 255;
   $430 = $429&255;
   __ZL11SET_ZN_FLAGP7CPU6502h($426,$430);
   break;
  }
  case 19:  {
   $431 = $cpu;
   $432 = ((($431)) + 14|0);
   $433 = HEAP16[$432>>1]|0;
   $434 = (__Z8ReadBytet($433)|0);
   $435 = $cpu;
   $436 = ((($435)) + 12|0);
   HEAP8[$436>>0] = $434;
   $437 = $cpu;
   $438 = ((($437)) + 1|0);
   $439 = HEAP8[$438>>0]|0;
   $440 = $439&255;
   $441 = $440&65535;
   $442 = $cpu;
   $443 = ((($442)) + 12|0);
   $444 = HEAP8[$443>>0]|0;
   $445 = $444&255;
   $446 = $445&65535;
   $447 = (($441) - ($446))|0;
   $448 = $447&65535;
   $data6 = $448;
   $449 = $cpu;
   $450 = $data6;
   $451 = $450&65535;
   $452 = $451 & 32768;
   $453 = ($452|0)==(0);
   $454 = $453&1;
   __ZL8TST_FLAGP7CPU6502hh($449,$454,1);
   $455 = $cpu;
   $456 = $data6;
   $457 = $456&65535;
   $458 = $457 & 255;
   $459 = $458&255;
   __ZL11SET_ZN_FLAGP7CPU6502h($455,$459);
   break;
  }
  case 20:  {
   $460 = $cpu;
   $461 = ((($460)) + 14|0);
   $462 = HEAP16[$461>>1]|0;
   $463 = (__Z8ReadBytet($462)|0);
   $464 = $cpu;
   $465 = ((($464)) + 12|0);
   HEAP8[$465>>0] = $463;
   $466 = $cpu;
   $467 = ((($466)) + 2|0);
   $468 = HEAP8[$467>>0]|0;
   $469 = $468&255;
   $470 = $469&65535;
   $471 = $cpu;
   $472 = ((($471)) + 12|0);
   $473 = HEAP8[$472>>0]|0;
   $474 = $473&255;
   $475 = $474&65535;
   $476 = (($470) - ($475))|0;
   $477 = $476&65535;
   $data7 = $477;
   $478 = $cpu;
   $479 = $data7;
   $480 = $479&65535;
   $481 = $480 & 32768;
   $482 = ($481|0)==(0);
   $483 = $482&1;
   __ZL8TST_FLAGP7CPU6502hh($478,$483,1);
   $484 = $cpu;
   $485 = $data7;
   $486 = $485&65535;
   $487 = $486 & 255;
   $488 = $487&255;
   __ZL11SET_ZN_FLAGP7CPU6502h($484,$488);
   break;
  }
  case 21:  {
   $489 = $cpu;
   $490 = ((($489)) + 14|0);
   $491 = HEAP16[$490>>1]|0;
   $492 = (__Z8ReadBytet($491)|0);
   $493 = $cpu;
   $494 = ((($493)) + 12|0);
   HEAP8[$494>>0] = $492;
   $495 = $cpu;
   $496 = ((($495)) + 12|0);
   $497 = HEAP8[$496>>0]|0;
   $498 = (($497) + -1)<<24>>24;
   HEAP8[$496>>0] = $498;
   $499 = $cpu;
   $500 = $cpu;
   $501 = ((($500)) + 12|0);
   $502 = HEAP8[$501>>0]|0;
   __ZL11SET_ZN_FLAGP7CPU6502h($499,$502);
   $503 = $cpu;
   $504 = ((($503)) + 14|0);
   $505 = HEAP16[$504>>1]|0;
   $506 = $cpu;
   $507 = ((($506)) + 12|0);
   $508 = HEAP8[$507>>0]|0;
   __ZL10_WriteByteth($505,$508);
   break;
  }
  case 22:  {
   $509 = $cpu;
   $510 = ((($509)) + 1|0);
   $511 = HEAP8[$510>>0]|0;
   $512 = (($511) + -1)<<24>>24;
   HEAP8[$510>>0] = $512;
   $513 = $cpu;
   $514 = $cpu;
   $515 = ((($514)) + 1|0);
   $516 = HEAP8[$515>>0]|0;
   __ZL11SET_ZN_FLAGP7CPU6502h($513,$516);
   break;
  }
  case 23:  {
   $517 = $cpu;
   $518 = ((($517)) + 2|0);
   $519 = HEAP8[$518>>0]|0;
   $520 = (($519) + -1)<<24>>24;
   HEAP8[$518>>0] = $520;
   $521 = $cpu;
   $522 = $cpu;
   $523 = ((($522)) + 2|0);
   $524 = HEAP8[$523>>0]|0;
   __ZL11SET_ZN_FLAGP7CPU6502h($521,$524);
   break;
  }
  case 24:  {
   $525 = $cpu;
   $526 = ((($525)) + 14|0);
   $527 = HEAP16[$526>>1]|0;
   $528 = (__Z8ReadBytet($527)|0);
   $529 = $cpu;
   $530 = ((($529)) + 12|0);
   HEAP8[$530>>0] = $528;
   $531 = $cpu;
   $532 = ((($531)) + 12|0);
   $533 = HEAP8[$532>>0]|0;
   $534 = $533&255;
   $535 = $cpu;
   $536 = HEAP8[$535>>0]|0;
   $537 = $536&255;
   $538 = $537 ^ $534;
   $539 = $538&255;
   HEAP8[$535>>0] = $539;
   $540 = $cpu;
   $541 = $cpu;
   $542 = HEAP8[$541>>0]|0;
   __ZL11SET_ZN_FLAGP7CPU6502h($540,$542);
   break;
  }
  case 25:  {
   $543 = $cpu;
   $544 = ((($543)) + 14|0);
   $545 = HEAP16[$544>>1]|0;
   $546 = (__Z8ReadBytet($545)|0);
   $547 = $cpu;
   $548 = ((($547)) + 12|0);
   HEAP8[$548>>0] = $546;
   $549 = $cpu;
   $550 = ((($549)) + 12|0);
   $551 = HEAP8[$550>>0]|0;
   $552 = (($551) + 1)<<24>>24;
   HEAP8[$550>>0] = $552;
   $553 = $cpu;
   $554 = $cpu;
   $555 = ((($554)) + 12|0);
   $556 = HEAP8[$555>>0]|0;
   __ZL11SET_ZN_FLAGP7CPU6502h($553,$556);
   $557 = $cpu;
   $558 = ((($557)) + 14|0);
   $559 = HEAP16[$558>>1]|0;
   $560 = $cpu;
   $561 = ((($560)) + 12|0);
   $562 = HEAP8[$561>>0]|0;
   __ZL10_WriteByteth($559,$562);
   break;
  }
  case 26:  {
   $563 = $cpu;
   $564 = ((($563)) + 1|0);
   $565 = HEAP8[$564>>0]|0;
   $566 = (($565) + 1)<<24>>24;
   HEAP8[$564>>0] = $566;
   $567 = $cpu;
   $568 = $cpu;
   $569 = ((($568)) + 1|0);
   $570 = HEAP8[$569>>0]|0;
   __ZL11SET_ZN_FLAGP7CPU6502h($567,$570);
   break;
  }
  case 27:  {
   $571 = $cpu;
   $572 = ((($571)) + 2|0);
   $573 = HEAP8[$572>>0]|0;
   $574 = (($573) + 1)<<24>>24;
   HEAP8[$572>>0] = $574;
   $575 = $cpu;
   $576 = $cpu;
   $577 = ((($576)) + 2|0);
   $578 = HEAP8[$577>>0]|0;
   __ZL11SET_ZN_FLAGP7CPU6502h($575,$578);
   break;
  }
  case 28:  {
   $579 = $cpu;
   $580 = ((($579)) + 14|0);
   $581 = HEAP16[$580>>1]|0;
   $582 = $cpu;
   $583 = ((($582)) + 6|0);
   HEAP16[$583>>1] = $581;
   break;
  }
  case 29:  {
   $584 = $cpu;
   $585 = ((($584)) + 6|0);
   $586 = HEAP16[$585>>1]|0;
   $587 = (($586) + -1)<<16>>16;
   HEAP16[$585>>1] = $587;
   $588 = $cpu;
   $589 = $cpu;
   $590 = ((($589)) + 6|0);
   $591 = HEAP16[$590>>1]|0;
   $592 = $591&65535;
   $593 = $592 >> 8;
   $594 = $593&255;
   __ZL4PUSHP7CPU6502h($588,$594);
   $595 = $cpu;
   $596 = $cpu;
   $597 = ((($596)) + 6|0);
   $598 = HEAP16[$597>>1]|0;
   $599 = $598&65535;
   $600 = $599 & 255;
   $601 = $600&255;
   __ZL4PUSHP7CPU6502h($595,$601);
   $602 = $cpu;
   $603 = ((($602)) + 14|0);
   $604 = HEAP16[$603>>1]|0;
   $605 = $cpu;
   $606 = ((($605)) + 6|0);
   HEAP16[$606>>1] = $604;
   break;
  }
  case 30:  {
   $607 = $cpu;
   $608 = ((($607)) + 14|0);
   $609 = HEAP16[$608>>1]|0;
   $610 = (__Z8ReadBytet($609)|0);
   $611 = $cpu;
   HEAP8[$611>>0] = $610;
   $612 = $cpu;
   $613 = $cpu;
   $614 = HEAP8[$613>>0]|0;
   __ZL11SET_ZN_FLAGP7CPU6502h($612,$614);
   $615 = $cpu;
   $616 = HEAP8[$615>>0]|0;
   $617 = $cpu;
   $618 = ((($617)) + 12|0);
   HEAP8[$618>>0] = $616;
   $619 = $cpu;
   $620 = ((($619)) + 14|0);
   HEAP16[$620>>1] = 0;
   break;
  }
  case 31:  {
   $621 = $cpu;
   $622 = ((($621)) + 14|0);
   $623 = HEAP16[$622>>1]|0;
   $624 = (__Z8ReadBytet($623)|0);
   $625 = $cpu;
   $626 = ((($625)) + 1|0);
   HEAP8[$626>>0] = $624;
   $627 = $cpu;
   $628 = $cpu;
   $629 = ((($628)) + 1|0);
   $630 = HEAP8[$629>>0]|0;
   __ZL11SET_ZN_FLAGP7CPU6502h($627,$630);
   break;
  }
  case 32:  {
   $631 = $cpu;
   $632 = ((($631)) + 14|0);
   $633 = HEAP16[$632>>1]|0;
   $634 = (__Z8ReadBytet($633)|0);
   $635 = $cpu;
   $636 = ((($635)) + 2|0);
   HEAP8[$636>>0] = $634;
   $637 = $cpu;
   $638 = $cpu;
   $639 = ((($638)) + 2|0);
   $640 = HEAP8[$639>>0]|0;
   __ZL11SET_ZN_FLAGP7CPU6502h($637,$640);
   break;
  }
  case 33:  {
   $641 = $cpu;
   $642 = ((($641)) + 16|0);
   $643 = HEAP8[$642>>0]|0;
   $644 = ($643<<24>>24)!=(0);
   $645 = $cpu;
   if ($644) {
    $646 = $cpu;
    $647 = HEAP8[$646>>0]|0;
    $648 = $647&255;
    $649 = $648 & 1;
    $650 = $649&255;
    __ZL8TST_FLAGP7CPU6502hh($645,$650,1);
    $651 = $cpu;
    $652 = HEAP8[$651>>0]|0;
    $653 = $652&255;
    $654 = $653 >> 1;
    $655 = $654&255;
    HEAP8[$651>>0] = $655;
    $656 = $cpu;
    $657 = $cpu;
    $658 = HEAP8[$657>>0]|0;
    __ZL11SET_ZN_FLAGP7CPU6502h($656,$658);
    break L15;
   } else {
    $659 = ((($645)) + 14|0);
    $660 = HEAP16[$659>>1]|0;
    $661 = (__Z8ReadBytet($660)|0);
    $662 = $cpu;
    $663 = ((($662)) + 12|0);
    HEAP8[$663>>0] = $661;
    $664 = $cpu;
    $665 = $cpu;
    $666 = ((($665)) + 12|0);
    $667 = HEAP8[$666>>0]|0;
    $668 = $667&255;
    $669 = $668 & 1;
    $670 = $669&255;
    __ZL8TST_FLAGP7CPU6502hh($664,$670,1);
    $671 = $cpu;
    $672 = ((($671)) + 12|0);
    $673 = HEAP8[$672>>0]|0;
    $674 = $673&255;
    $675 = $674 >> 1;
    $676 = $675&255;
    HEAP8[$672>>0] = $676;
    $677 = $cpu;
    $678 = $cpu;
    $679 = ((($678)) + 12|0);
    $680 = HEAP8[$679>>0]|0;
    __ZL11SET_ZN_FLAGP7CPU6502h($677,$680);
    $681 = $cpu;
    $682 = ((($681)) + 14|0);
    $683 = HEAP16[$682>>1]|0;
    $684 = $cpu;
    $685 = ((($684)) + 12|0);
    $686 = HEAP8[$685>>0]|0;
    __ZL10_WriteByteth($683,$686);
    break L15;
   }
   break;
  }
  case 55:  {
   $999 = $cpu;
   $1000 = ((($999)) + 1|0);
   $1001 = HEAP8[$1000>>0]|0;
   $1002 = $cpu;
   $1003 = ((($1002)) + 3|0);
   HEAP8[$1003>>0] = $1001;
   break;
  }
  case 35:  {
   $687 = $cpu;
   $688 = ((($687)) + 14|0);
   $689 = HEAP16[$688>>1]|0;
   $690 = (__Z8ReadBytet($689)|0);
   $691 = $cpu;
   $692 = ((($691)) + 12|0);
   HEAP8[$692>>0] = $690;
   $693 = $cpu;
   $694 = ((($693)) + 12|0);
   $695 = HEAP8[$694>>0]|0;
   $696 = $695&255;
   $697 = $cpu;
   $698 = HEAP8[$697>>0]|0;
   $699 = $698&255;
   $700 = $699 | $696;
   $701 = $700&255;
   HEAP8[$697>>0] = $701;
   $702 = $cpu;
   $703 = $cpu;
   $704 = HEAP8[$703>>0]|0;
   __ZL11SET_ZN_FLAGP7CPU6502h($702,$704);
   break;
  }
  case 36:  {
   $705 = $cpu;
   $706 = $cpu;
   $707 = HEAP8[$706>>0]|0;
   __ZL4PUSHP7CPU6502h($705,$707);
   break;
  }
  case 37:  {
   $708 = $cpu;
   $709 = $cpu;
   $710 = ((($709)) + 4|0);
   $711 = HEAP8[$710>>0]|0;
   $712 = $711&255;
   $713 = $712 | 16;
   $714 = $713&255;
   __ZL4PUSHP7CPU6502h($708,$714);
   break;
  }
  case 38:  {
   $715 = $cpu;
   $716 = (__ZL3POPP7CPU6502($715)|0);
   $717 = $cpu;
   HEAP8[$717>>0] = $716;
   $718 = $cpu;
   $719 = $cpu;
   $720 = HEAP8[$719>>0]|0;
   __ZL11SET_ZN_FLAGP7CPU6502h($718,$720);
   break;
  }
  case 39:  {
   $721 = $cpu;
   $722 = (__ZL3POPP7CPU6502($721)|0);
   $723 = $722&255;
   $724 = $723 | 32;
   $725 = $724&255;
   $726 = $cpu;
   $727 = ((($726)) + 4|0);
   HEAP8[$727>>0] = $725;
   break;
  }
  case 40:  {
   $728 = $cpu;
   $729 = ((($728)) + 16|0);
   $730 = HEAP8[$729>>0]|0;
   $731 = ($730<<24>>24)!=(0);
   $732 = $cpu;
   if ($731) {
    $733 = (__ZL11IS_SET_FLAGP7CPU6502h($732,1)|0);
    $734 = ($733<<24>>24)!=(0);
    $735 = $cpu;
    $736 = $cpu;
    $737 = HEAP8[$736>>0]|0;
    $738 = $737&255;
    $739 = $738 & 128;
    $740 = $739&255;
    __ZL8TST_FLAGP7CPU6502hh($735,$740,1);
    $741 = $cpu;
    $742 = HEAP8[$741>>0]|0;
    $743 = $742&255;
    $744 = $743 << 1;
    if ($734) {
     $745 = $744 | 1;
     $746 = $745&255;
     $747 = $cpu;
     HEAP8[$747>>0] = $746;
    } else {
     $748 = $744&255;
     HEAP8[$741>>0] = $748;
    }
    $749 = $cpu;
    $750 = $cpu;
    $751 = HEAP8[$750>>0]|0;
    __ZL11SET_ZN_FLAGP7CPU6502h($749,$751);
    break L15;
   } else {
    $752 = ((($732)) + 14|0);
    $753 = HEAP16[$752>>1]|0;
    $754 = (__Z8ReadBytet($753)|0);
    $755 = $cpu;
    $756 = ((($755)) + 12|0);
    HEAP8[$756>>0] = $754;
    $757 = $cpu;
    $758 = (__ZL11IS_SET_FLAGP7CPU6502h($757,1)|0);
    $759 = ($758<<24>>24)!=(0);
    $760 = $cpu;
    $761 = $cpu;
    $762 = ((($761)) + 12|0);
    $763 = HEAP8[$762>>0]|0;
    $764 = $763&255;
    $765 = $764 & 128;
    $766 = $765&255;
    __ZL8TST_FLAGP7CPU6502hh($760,$766,1);
    $767 = $cpu;
    $768 = ((($767)) + 12|0);
    $769 = HEAP8[$768>>0]|0;
    $770 = $769&255;
    $771 = $770 << 1;
    if ($759) {
     $772 = $771 | 1;
     $773 = $772&255;
     $774 = $cpu;
     $775 = ((($774)) + 12|0);
     HEAP8[$775>>0] = $773;
    } else {
     $776 = $771&255;
     HEAP8[$768>>0] = $776;
    }
    $777 = $cpu;
    $778 = $cpu;
    $779 = ((($778)) + 12|0);
    $780 = HEAP8[$779>>0]|0;
    __ZL11SET_ZN_FLAGP7CPU6502h($777,$780);
    $781 = $cpu;
    $782 = ((($781)) + 14|0);
    $783 = HEAP16[$782>>1]|0;
    $784 = $cpu;
    $785 = ((($784)) + 12|0);
    $786 = HEAP8[$785>>0]|0;
    __ZL10_WriteByteth($783,$786);
    break L15;
   }
   break;
  }
  case 41:  {
   $787 = $cpu;
   $788 = ((($787)) + 16|0);
   $789 = HEAP8[$788>>0]|0;
   $790 = ($789<<24>>24)!=(0);
   $791 = $cpu;
   if ($790) {
    $792 = (__ZL11IS_SET_FLAGP7CPU6502h($791,1)|0);
    $793 = ($792<<24>>24)!=(0);
    $794 = $cpu;
    $795 = $cpu;
    $796 = HEAP8[$795>>0]|0;
    $797 = $796&255;
    $798 = $797 & 1;
    $799 = $798&255;
    __ZL8TST_FLAGP7CPU6502hh($794,$799,1);
    $800 = $cpu;
    $801 = HEAP8[$800>>0]|0;
    $802 = $801&255;
    $803 = $802 >> 1;
    if ($793) {
     $804 = $803 | 128;
     $805 = $804&255;
     $806 = $cpu;
     HEAP8[$806>>0] = $805;
    } else {
     $807 = $803&255;
     HEAP8[$800>>0] = $807;
    }
    $808 = $cpu;
    $809 = $cpu;
    $810 = HEAP8[$809>>0]|0;
    __ZL11SET_ZN_FLAGP7CPU6502h($808,$810);
    break L15;
   } else {
    $811 = ((($791)) + 14|0);
    $812 = HEAP16[$811>>1]|0;
    $813 = (__Z8ReadBytet($812)|0);
    $814 = $cpu;
    $815 = ((($814)) + 12|0);
    HEAP8[$815>>0] = $813;
    $816 = $cpu;
    $817 = (__ZL11IS_SET_FLAGP7CPU6502h($816,1)|0);
    $818 = ($817<<24>>24)!=(0);
    $819 = $cpu;
    $820 = $cpu;
    $821 = ((($820)) + 12|0);
    $822 = HEAP8[$821>>0]|0;
    $823 = $822&255;
    $824 = $823 & 1;
    $825 = $824&255;
    __ZL8TST_FLAGP7CPU6502hh($819,$825,1);
    $826 = $cpu;
    $827 = ((($826)) + 12|0);
    $828 = HEAP8[$827>>0]|0;
    $829 = $828&255;
    $830 = $829 >> 1;
    if ($818) {
     $831 = $830 | 128;
     $832 = $831&255;
     $833 = $cpu;
     $834 = ((($833)) + 12|0);
     HEAP8[$834>>0] = $832;
    } else {
     $835 = $830&255;
     HEAP8[$827>>0] = $835;
    }
    $836 = $cpu;
    $837 = $cpu;
    $838 = ((($837)) + 12|0);
    $839 = HEAP8[$838>>0]|0;
    __ZL11SET_ZN_FLAGP7CPU6502h($836,$839);
    $840 = $cpu;
    $841 = ((($840)) + 14|0);
    $842 = HEAP16[$841>>1]|0;
    $843 = $cpu;
    $844 = ((($843)) + 12|0);
    $845 = HEAP8[$844>>0]|0;
    __ZL10_WriteByteth($842,$845);
    break L15;
   }
   break;
  }
  case 42:  {
   $846 = $cpu;
   $847 = (__ZL3POPP7CPU6502($846)|0);
   $848 = $847&255;
   $849 = $848 | 32;
   $850 = $849&255;
   $851 = $cpu;
   $852 = ((($851)) + 4|0);
   HEAP8[$852>>0] = $850;
   $853 = $cpu;
   $854 = (__ZL3POPP7CPU6502($853)|0);
   $855 = $854&255;
   $856 = $cpu;
   $857 = ((($856)) + 6|0);
   HEAP16[$857>>1] = $855;
   $858 = $cpu;
   $859 = (__ZL3POPP7CPU6502($858)|0);
   $860 = $859&255;
   $861 = $860<<8;
   $862 = $cpu;
   $863 = ((($862)) + 6|0);
   $864 = HEAP16[$863>>1]|0;
   $865 = $864&65535;
   $866 = $865 | $861;
   $867 = $866&65535;
   HEAP16[$863>>1] = $867;
   $868 = $cpu;
   $869 = (__ZL11IS_SET_FLAGP7CPU6502h($868,4)|0);
   $870 = ($869<<24>>24)!=(0);
   $871 = HEAP32[177424>>2]|0;
   $872 = ($871|0)!=(0);
   $873 = $870 ? 0 : $872;
   $874 = $873&1;
   HEAP8[433219>>0] = $874;
   break;
  }
  case 43:  {
   $875 = $cpu;
   $876 = (__ZL3POPP7CPU6502($875)|0);
   $877 = $876&255;
   $878 = $cpu;
   $879 = ((($878)) + 6|0);
   HEAP16[$879>>1] = $877;
   $880 = $cpu;
   $881 = (__ZL3POPP7CPU6502($880)|0);
   $882 = $881&255;
   $883 = $882<<8;
   $884 = $cpu;
   $885 = ((($884)) + 6|0);
   $886 = HEAP16[$885>>1]|0;
   $887 = $886&65535;
   $888 = $887 | $883;
   $889 = $888&65535;
   HEAP16[$885>>1] = $889;
   $890 = $cpu;
   $891 = ((($890)) + 6|0);
   $892 = HEAP16[$891>>1]|0;
   $893 = (($892) + 1)<<16>>16;
   HEAP16[$891>>1] = $893;
   break;
  }
  case 44:  {
   $894 = $cpu;
   $895 = ((($894)) + 14|0);
   $896 = HEAP16[$895>>1]|0;
   $897 = (__Z8ReadBytet($896)|0);
   $898 = $cpu;
   $899 = ((($898)) + 12|0);
   HEAP8[$899>>0] = $897;
   $900 = $cpu;
   $901 = HEAP8[$900>>0]|0;
   $902 = $901&255;
   $903 = $cpu;
   $904 = ((($903)) + 12|0);
   $905 = HEAP8[$904>>0]|0;
   $906 = $905&255;
   $907 = (($902) - ($906))|0;
   $908 = $cpu;
   $909 = ((($908)) + 4|0);
   $910 = HEAP8[$909>>0]|0;
   $911 = $910&255;
   $912 = $911 ^ -1;
   $913 = $912 & 1;
   $914 = (($907) - ($913))|0;
   $915 = $914&65535;
   $data8 = $915;
   $916 = $cpu;
   $917 = $cpu;
   $918 = HEAP8[$917>>0]|0;
   $919 = $918&255;
   $920 = $cpu;
   $921 = ((($920)) + 12|0);
   $922 = HEAP8[$921>>0]|0;
   $923 = $922&255;
   $924 = $919 ^ $923;
   $925 = $cpu;
   $926 = HEAP8[$925>>0]|0;
   $927 = $926&255;
   $928 = $data8;
   $929 = $928&65535;
   $930 = $927 ^ $929;
   $931 = $924 & $930;
   $932 = $931 & 128;
   $933 = $932&255;
   __ZL8TST_FLAGP7CPU6502hh($916,$933,64);
   $934 = $cpu;
   $935 = $data8;
   $936 = $935&65535;
   $937 = ($936|0)<(256);
   $938 = $937&1;
   __ZL8TST_FLAGP7CPU6502hh($934,$938,1);
   $939 = $data8;
   $940 = $939&65535;
   $941 = $940 & 255;
   $942 = $941&255;
   $943 = $cpu;
   HEAP8[$943>>0] = $942;
   $944 = $cpu;
   $945 = $cpu;
   $946 = HEAP8[$945>>0]|0;
   __ZL11SET_ZN_FLAGP7CPU6502h($944,$946);
   break;
  }
  case 45:  {
   $947 = $cpu;
   __ZL8SET_FLAGP7CPU6502h($947,1);
   break;
  }
  case 46:  {
   $948 = $cpu;
   __ZL8SET_FLAGP7CPU6502h($948,8);
   break;
  }
  case 47:  {
   $949 = $cpu;
   __ZL8SET_FLAGP7CPU6502h($949,4);
   break;
  }
  case 48:  {
   $950 = $cpu;
   $951 = ((($950)) + 14|0);
   $952 = HEAP16[$951>>1]|0;
   $953 = $cpu;
   $954 = HEAP8[$953>>0]|0;
   __ZL10_WriteByteth($952,$954);
   break;
  }
  case 49:  {
   $955 = $cpu;
   $956 = ((($955)) + 14|0);
   $957 = HEAP16[$956>>1]|0;
   $958 = $cpu;
   $959 = ((($958)) + 1|0);
   $960 = HEAP8[$959>>0]|0;
   __ZL10_WriteByteth($957,$960);
   break;
  }
  case 50:  {
   $961 = $cpu;
   $962 = ((($961)) + 14|0);
   $963 = HEAP16[$962>>1]|0;
   $964 = $cpu;
   $965 = ((($964)) + 2|0);
   $966 = HEAP8[$965>>0]|0;
   __ZL10_WriteByteth($963,$966);
   break;
  }
  case 51:  {
   $967 = $cpu;
   $968 = HEAP8[$967>>0]|0;
   $969 = $cpu;
   $970 = ((($969)) + 1|0);
   HEAP8[$970>>0] = $968;
   $971 = $cpu;
   $972 = $cpu;
   $973 = ((($972)) + 1|0);
   $974 = HEAP8[$973>>0]|0;
   __ZL11SET_ZN_FLAGP7CPU6502h($971,$974);
   break;
  }
  case 52:  {
   $975 = $cpu;
   $976 = HEAP8[$975>>0]|0;
   $977 = $cpu;
   $978 = ((($977)) + 2|0);
   HEAP8[$978>>0] = $976;
   $979 = $cpu;
   $980 = $cpu;
   $981 = ((($980)) + 2|0);
   $982 = HEAP8[$981>>0]|0;
   __ZL11SET_ZN_FLAGP7CPU6502h($979,$982);
   break;
  }
  case 53:  {
   $983 = $cpu;
   $984 = ((($983)) + 3|0);
   $985 = HEAP8[$984>>0]|0;
   $986 = $cpu;
   $987 = ((($986)) + 1|0);
   HEAP8[$987>>0] = $985;
   $988 = $cpu;
   $989 = $cpu;
   $990 = ((($989)) + 1|0);
   $991 = HEAP8[$990>>0]|0;
   __ZL11SET_ZN_FLAGP7CPU6502h($988,$991);
   break;
  }
  case 54:  {
   $992 = $cpu;
   $993 = ((($992)) + 1|0);
   $994 = HEAP8[$993>>0]|0;
   $995 = $cpu;
   HEAP8[$995>>0] = $994;
   $996 = $cpu;
   $997 = $cpu;
   $998 = HEAP8[$997>>0]|0;
   __ZL11SET_ZN_FLAGP7CPU6502h($996,$998);
   break;
  }
  default: {
  }
  }
 } while(0);
 $1011 = $code;
 $1012 = $1011&255;
 $1013 = (433476 + ($1012)|0);
 $1014 = HEAP8[$1013>>0]|0;
 $1015 = $1014&255;
 $1016 = HEAP32[(177412)>>2]|0;
 $1017 = (($1016) + ($1015))|0;
 HEAP32[(177412)>>2] = $1017;
 $1018 = HEAP8[433218>>0]|0;
 $1019 = $1018&1;
 if ($1019) {
  HEAP8[433218>>0] = 0;
  HEAP8[433216>>0] = 0;
  __ZL4_NMIP7CPU6502(177404);
 } else {
  $1020 = HEAP8[433219>>0]|0;
  $1021 = $1020&1;
  if ($1021) {
   __ZL4_IRQP7CPU6502(177404);
  }
 }
 $1022 = HEAP8[433216>>0]|0;
 $1023 = $1022&1;
 if ($1023) {
  HEAP8[433216>>0] = 0;
  HEAP8[433218>>0] = 1;
 }
 $1024 = HEAP8[433217>>0]|0;
 $1025 = $1024&1;
 if (!($1025)) {
  $1026 = HEAP32[(177412)>>2]|0;
  STACKTOP = sp;return ($1026|0);
 }
 HEAP8[433217>>0] = 0;
 __Z10mapper_IRQb(1);
 $1026 = HEAP32[(177412)>>2]|0;
 STACKTOP = sp;return ($1026|0);
}
function __ZL7cpu_IRQ7IsrTypeb($type,$asserted) {
 $type = $type|0;
 $asserted = $asserted|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $type;
 $2 = $asserted&1;
 $1 = $2;
 $3 = $1;
 $4 = $3&1;
 $5 = $0;
 if ($4) {
  $6 = HEAP32[177424>>2]|0;
  $7 = $6 | $5;
  HEAP32[177424>>2] = $7;
  STACKTOP = sp;return;
 } else {
  $8 = $5 ^ -1;
  $9 = HEAP32[177424>>2]|0;
  $10 = $9 & $8;
  HEAP32[177424>>2] = $10;
  STACKTOP = sp;return;
 }
}
function __ZL10_FetchWordt($addr) {
 $addr = $addr|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $h = 0, $l = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $addr;
 $1 = $0;
 $2 = $1&65535;
 $3 = (($2) + 0)|0;
 $4 = $3&65535;
 $5 = (__Z8ReadBytet($4)|0);
 $6 = $5&255;
 $l = $6;
 $7 = $0;
 $8 = $7&65535;
 $9 = (($8) + 1)|0;
 $10 = $9&65535;
 $11 = (__Z8ReadBytet($10)|0);
 $12 = $11&255;
 $h = $12;
 $13 = $h;
 $14 = $13&65535;
 $15 = $14 << 8;
 $16 = $l;
 $17 = $16&65535;
 $18 = $15 | $17;
 $19 = $18&65535;
 STACKTOP = sp;return ($19|0);
}
function __ZL11IS_SET_FLAGP7CPU6502h($cpu,$flag) {
 $cpu = $cpu|0;
 $flag = $flag|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $cpu;
 $1 = $flag;
 $2 = $0;
 $3 = ((($2)) + 4|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = $4&255;
 $6 = $1;
 $7 = $6&255;
 $8 = $5 & $7;
 $9 = $8&255;
 STACKTOP = sp;return ($9|0);
}
function __ZL10_FetchBytet($addr) {
 $addr = $addr|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $addr;
 $1 = $0;
 $2 = (__Z8ReadBytet($1)|0);
 STACKTOP = sp;return ($2|0);
}
function __ZL9CrossPageP7CPU6502th($cpu,$addr,$reg) {
 $cpu = $cpu|0;
 $addr = $addr|0;
 $reg = $reg|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $low = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $cpu;
 $1 = $addr;
 $2 = $reg;
 $3 = $0;
 $4 = ((($3)) + 17|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = ($5<<24>>24)!=(0);
 if (!($6)) {
  STACKTOP = sp;return;
 }
 $7 = $1;
 $8 = $7&65535;
 $9 = $8 & 255;
 $10 = $2;
 $11 = $10&255;
 $12 = (($9) + ($11))|0;
 $13 = $12&255;
 $low = $13;
 $14 = $low;
 $15 = $14&255;
 $16 = $2;
 $17 = $16&255;
 $18 = ($15|0)<($17|0);
 if (!($18)) {
  STACKTOP = sp;return;
 }
 $19 = $0;
 $20 = ((($19)) + 8|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = (($21) + 1)|0;
 HEAP32[$20>>2] = $22;
 STACKTOP = sp;return;
}
function __ZL9_ReadWordt($addr) {
 $addr = $addr|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $h = 0, $l = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $addr;
 $1 = $0;
 $2 = $1&65535;
 $3 = (($2) + 0)|0;
 $4 = $3 & 255;
 $5 = $4&65535;
 $6 = (__Z8ReadBytet($5)|0);
 $7 = $6&255;
 $l = $7;
 $8 = $0;
 $9 = $8&65535;
 $10 = (($9) + 1)|0;
 $11 = $10 & 255;
 $12 = $11&65535;
 $13 = (__Z8ReadBytet($12)|0);
 $14 = $13&255;
 $h = $14;
 $15 = $h;
 $16 = $15&65535;
 $17 = $16 << 8;
 $18 = $l;
 $19 = $18&65535;
 $20 = $17 | $19;
 $21 = $20&65535;
 STACKTOP = sp;return ($21|0);
}
function __ZL8TST_FLAGP7CPU6502hh($cpu,$set,$flag) {
 $cpu = $cpu|0;
 $set = $set|0;
 $flag = $flag|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $cpu;
 $1 = $set;
 $2 = $flag;
 $3 = $0;
 $4 = $2;
 __ZL8CLR_FLAGP7CPU6502h($3,$4);
 $5 = $1;
 $6 = ($5<<24>>24)!=(0);
 if (!($6)) {
  STACKTOP = sp;return;
 }
 $7 = $0;
 $8 = $2;
 __ZL8SET_FLAGP7CPU6502h($7,$8);
 STACKTOP = sp;return;
}
function __ZL11SET_ZN_FLAGP7CPU6502h($cpu,$data) {
 $cpu = $cpu|0;
 $data = $data|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $cpu;
 $1 = $data;
 $2 = $0;
 __ZL8CLR_FLAGP7CPU6502h($2,-126);
 $3 = $1;
 $4 = $3&255;
 $5 = $4 & 255;
 $6 = ($5|0)==(0);
 if ($6) {
  $7 = $0;
  __ZL8SET_FLAGP7CPU6502h($7,2);
  STACKTOP = sp;return;
 }
 $8 = $1;
 $9 = $8&255;
 $10 = $9 & 128;
 $11 = ($10|0)!=(0);
 if (!($11)) {
  STACKTOP = sp;return;
 }
 $12 = $0;
 __ZL8SET_FLAGP7CPU6502h($12,-128);
 STACKTOP = sp;return;
}
function __ZL10_WriteByteth($addr,$data) {
 $addr = $addr|0;
 $data = $data|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $addr;
 $1 = $data;
 $2 = $0;
 $3 = $1;
 __Z9WriteByteth($2,$3);
 STACKTOP = sp;return;
}
function __ZL8REL_JUMPP7CPU6502h($cpu,$jump) {
 $cpu = $cpu|0;
 $jump = $jump|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $cpu;
 $1 = $jump;
 $2 = $1;
 $3 = ($2<<24>>24)!=(0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = $0;
 $5 = ((($4)) + 14|0);
 $6 = HEAP16[$5>>1]|0;
 $7 = (__Z8ReadBytet($6)|0);
 $8 = $0;
 $9 = ((($8)) + 12|0);
 HEAP8[$9>>0] = $7;
 $10 = $0;
 $11 = ((($10)) + 6|0);
 $12 = HEAP16[$11>>1]|0;
 $13 = $12&65535;
 $14 = $0;
 $15 = ((($14)) + 12|0);
 $16 = HEAP8[$15>>0]|0;
 $17 = $16 << 24 >> 24;
 $18 = (($13) + ($17))|0;
 $19 = $18&65535;
 $addr = $19;
 $20 = $addr;
 $21 = $20&65535;
 $22 = $21 & 65280;
 $23 = $0;
 $24 = ((($23)) + 6|0);
 $25 = HEAP16[$24>>1]|0;
 $26 = $25&65535;
 $27 = $26 & 65280;
 $28 = ($22|0)!=($27|0);
 $29 = $0;
 $30 = ((($29)) + 8|0);
 $31 = HEAP32[$30>>2]|0;
 if ($28) {
  $32 = (($31) + 2)|0;
  HEAP32[$30>>2] = $32;
 } else {
  $33 = (($31) + 1)|0;
  HEAP32[$30>>2] = $33;
 }
 $34 = $addr;
 $35 = $0;
 $36 = ((($35)) + 6|0);
 HEAP16[$36>>1] = $34;
 STACKTOP = sp;return;
}
function __ZL4PUSHP7CPU6502h($cpu,$data) {
 $cpu = $cpu|0;
 $data = $data|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $cpu;
 $1 = $data;
 $2 = $0;
 $3 = ((($2)) + 3|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = (($4) + -1)<<24>>24;
 HEAP8[$3>>0] = $5;
 $6 = $4&255;
 $7 = $6 & 255;
 $8 = $7&65535;
 $9 = $8&65535;
 $10 = (($9) + 256)|0;
 $11 = $10&65535;
 $12 = $1;
 __ZL10_WriteByteth($11,$12);
 STACKTOP = sp;return;
}
function __ZL8SET_FLAGP7CPU6502h($cpu,$flag) {
 $cpu = $cpu|0;
 $flag = $flag|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $cpu;
 $1 = $flag;
 $2 = $1;
 $3 = $2&255;
 $4 = $0;
 $5 = ((($4)) + 4|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = $6&255;
 $8 = $7 | $3;
 $9 = $8&255;
 HEAP8[$5>>0] = $9;
 STACKTOP = sp;return;
}
function __ZL8CLR_FLAGP7CPU6502h($cpu,$flag) {
 $cpu = $cpu|0;
 $flag = $flag|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $cpu;
 $1 = $flag;
 $2 = $1;
 $3 = $2&255;
 $4 = $3 ^ -1;
 $5 = $0;
 $6 = ((($5)) + 4|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = $7&255;
 $9 = $8 & $4;
 $10 = $9&255;
 HEAP8[$6>>0] = $10;
 STACKTOP = sp;return;
}
function __ZL3POPP7CPU6502($cpu) {
 $cpu = $cpu|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $cpu;
 $1 = $0;
 $2 = ((($1)) + 3|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = (($3) + 1)<<24>>24;
 HEAP8[$2>>0] = $4;
 $5 = $4&255;
 $6 = $5 & 255;
 $7 = $6&65535;
 $8 = $7&65535;
 $9 = (($8) + 256)|0;
 $10 = $9&65535;
 $11 = (__Z8ReadBytet($10)|0);
 STACKTOP = sp;return ($11|0);
}
function __ZL4_NMIP7CPU6502($cpu) {
 $cpu = $cpu|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $cpu;
 $1 = $0;
 $2 = $0;
 $3 = ((($2)) + 6|0);
 $4 = HEAP16[$3>>1]|0;
 $5 = $4&65535;
 $6 = $5 >> 8;
 $7 = $6&255;
 __ZL4PUSHP7CPU6502h($1,$7);
 $8 = $0;
 $9 = $0;
 $10 = ((($9)) + 6|0);
 $11 = HEAP16[$10>>1]|0;
 $12 = $11&65535;
 $13 = $12 & 255;
 $14 = $13&255;
 __ZL4PUSHP7CPU6502h($8,$14);
 $15 = $0;
 __ZL8CLR_FLAGP7CPU6502h($15,16);
 $16 = $0;
 $17 = $0;
 $18 = ((($17)) + 4|0);
 $19 = HEAP8[$18>>0]|0;
 $20 = $19&255;
 $21 = $20 & 239;
 $22 = $21&255;
 __ZL4PUSHP7CPU6502h($16,$22);
 $23 = $0;
 __ZL8SET_FLAGP7CPU6502h($23,4);
 $24 = (__ZL10_FetchWordt(-6)|0);
 $25 = $0;
 $26 = ((($25)) + 6|0);
 HEAP16[$26>>1] = $24;
 $27 = $0;
 $28 = ((($27)) + 8|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = (($29) + 7)|0;
 HEAP32[$28>>2] = $30;
 STACKTOP = sp;return;
}
function __ZL4_IRQP7CPU6502($cpu) {
 $cpu = $cpu|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $cpu;
 $1 = $0;
 $2 = $0;
 $3 = ((($2)) + 6|0);
 $4 = HEAP16[$3>>1]|0;
 $5 = $4&65535;
 $6 = $5 >> 8;
 $7 = $6&255;
 __ZL4PUSHP7CPU6502h($1,$7);
 $8 = $0;
 $9 = $0;
 $10 = ((($9)) + 6|0);
 $11 = HEAP16[$10>>1]|0;
 $12 = $11&65535;
 $13 = $12 & 255;
 $14 = $13&255;
 __ZL4PUSHP7CPU6502h($8,$14);
 $15 = $0;
 __ZL8CLR_FLAGP7CPU6502h($15,16);
 $16 = $0;
 $17 = $0;
 $18 = ((($17)) + 4|0);
 $19 = HEAP8[$18>>0]|0;
 $20 = $19&255;
 $21 = $20 & 239;
 $22 = $21&255;
 __ZL4PUSHP7CPU6502h($16,$22);
 $23 = $0;
 __ZL8SET_FLAGP7CPU6502h($23,4);
 $24 = (__ZL10_FetchWordt(-2)|0);
 $25 = $0;
 $26 = ((($25)) + 6|0);
 HEAP16[$26>>1] = $24;
 $27 = $0;
 $28 = ((($27)) + 8|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = (($29) + 7)|0;
 HEAP32[$28>>2] = $30;
 STACKTOP = sp;return;
}
function __Z11SetVRAMBankhhhh($bank0,$bank1,$bank2,$bank3) {
 $bank0 = $bank0|0;
 $bank1 = $bank1|0;
 $bank2 = $bank2|0;
 $bank3 = $bank3|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $bank0;
 $1 = $bank1;
 $2 = $bank2;
 $3 = $bank3;
 $4 = $0;
 $5 = $4&255;
 $6 = $5<<10;
 $7 = (433732 + ($6)|0);
 HEAP32[179476>>2] = $7;
 $8 = $1;
 $9 = $8&255;
 $10 = $9<<10;
 $11 = (433732 + ($10)|0);
 HEAP32[(179480)>>2] = $11;
 $12 = $2;
 $13 = $12&255;
 $14 = $13<<10;
 $15 = (433732 + ($14)|0);
 HEAP32[(179484)>>2] = $15;
 $16 = $3;
 $17 = $16&255;
 $18 = $17<<10;
 $19 = (433732 + ($18)|0);
 HEAP32[(179488)>>2] = $19;
 STACKTOP = sp;return;
}
function __Z22SetAddressLineUpdatingPv($addr) {
 $addr = $addr|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $addr;
 $1 = $0;
 HEAP32[179492>>2] = $1;
 STACKTOP = sp;return;
}
function __Z10_execute_0v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12PointBkgNamev();
 $0 = HEAP32[179496>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 return;
}
function __Z10_execute_1v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12FetchBkgNamev();
 $0 = HEAP32[179500>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 return;
}
function __Z10_execute_2v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12PointBkgAttrv();
 $0 = HEAP32[179496>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 return;
}
function __Z10_execute_3v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12FetchBkgAttrv();
 $0 = HEAP32[179500>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 __ZL6ClockXv();
 return;
}
function __Z10_execute_4v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12PointBkgBit0v();
 $0 = HEAP32[179496>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 return;
}
function __Z10_execute_5v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12FetchBkgBit0v();
 $0 = HEAP32[179500>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 return;
}
function __Z10_execute_6v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12PointBkgBit1v();
 $0 = HEAP32[179496>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 return;
}
function __Z10_execute_7v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12FetchBkgBit1v();
 $0 = HEAP32[179500>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 return;
}
function __Z10_execute_8v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12PointBkgNamev();
 $0 = HEAP32[179496>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 return;
}
function __Z10_execute_9v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12FetchBkgNamev();
 $0 = HEAP32[179500>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 return;
}
function __Z11_execute_10v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12PointBkgAttrv();
 $0 = HEAP32[179496>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 return;
}
function __Z11_execute_11v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12FetchBkgAttrv();
 $0 = HEAP32[179500>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 __ZL6ClockXv();
 return;
}
function __Z11_execute_12v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12PointBkgBit0v();
 $0 = HEAP32[179496>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 return;
}
function __Z11_execute_13v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12FetchBkgBit0v();
 $0 = HEAP32[179500>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 return;
}
function __Z11_execute_14v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12PointBkgBit1v();
 $0 = HEAP32[179496>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 return;
}
function __Z11_execute_15v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12FetchBkgBit1v();
 $0 = HEAP32[179500>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 return;
}
function __Z11_execute_16v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12PointBkgNamev();
 $0 = HEAP32[179496>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 return;
}
function __Z11_execute_17v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12FetchBkgNamev();
 $0 = HEAP32[179500>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 return;
}
function __Z11_execute_18v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12PointBkgAttrv();
 $0 = HEAP32[179496>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 return;
}
function __Z11_execute_19v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12FetchBkgAttrv();
 $0 = HEAP32[179500>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 __ZL6ClockXv();
 return;
}
function __Z11_execute_20v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12PointBkgBit0v();
 $0 = HEAP32[179496>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 return;
}
function __Z11_execute_21v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12FetchBkgBit0v();
 $0 = HEAP32[179500>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 return;
}
function __Z11_execute_22v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12PointBkgBit1v();
 $0 = HEAP32[179496>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 return;
}
function __Z11_execute_23v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12FetchBkgBit1v();
 $0 = HEAP32[179500>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 return;
}
function __Z11_execute_24v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12PointBkgNamev();
 $0 = HEAP32[179496>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 return;
}
function __Z11_execute_25v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12FetchBkgNamev();
 $0 = HEAP32[179500>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 return;
}
function __Z11_execute_26v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12PointBkgAttrv();
 $0 = HEAP32[179496>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 return;
}
function __Z11_execute_27v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12FetchBkgAttrv();
 $0 = HEAP32[179500>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 __ZL6ClockXv();
 return;
}
function __Z11_execute_28v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12PointBkgBit0v();
 $0 = HEAP32[179496>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 return;
}
function __Z11_execute_29v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12FetchBkgBit0v();
 $0 = HEAP32[179500>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 return;
}
function __Z11_execute_30v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12PointBkgBit1v();
 $0 = HEAP32[179496>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 return;
}
function __Z11_execute_31v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12FetchBkgBit1v();
 $0 = HEAP32[179500>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 return;
}
function __Z11_execute_32v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12PointBkgNamev();
 $0 = HEAP32[179496>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 return;
}
function __Z11_execute_33v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12FetchBkgNamev();
 $0 = HEAP32[179500>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 return;
}
function __Z11_execute_34v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12PointBkgAttrv();
 $0 = HEAP32[179496>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 return;
}
function __Z11_execute_35v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12FetchBkgAttrv();
 $0 = HEAP32[179500>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 __ZL6ClockXv();
 return;
}
function __Z11_execute_36v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12PointBkgBit0v();
 $0 = HEAP32[179496>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 return;
}
function __Z11_execute_37v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12FetchBkgBit0v();
 $0 = HEAP32[179500>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 return;
}
function __Z11_execute_38v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12PointBkgBit1v();
 $0 = HEAP32[179496>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 return;
}
function __Z11_execute_39v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12FetchBkgBit1v();
 $0 = HEAP32[179500>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 return;
}
function __Z11_execute_40v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12PointBkgNamev();
 $0 = HEAP32[179496>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 return;
}
function __Z11_execute_41v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12FetchBkgNamev();
 $0 = HEAP32[179500>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 return;
}
function __Z11_execute_42v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12PointBkgAttrv();
 $0 = HEAP32[179496>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 return;
}
function __Z11_execute_43v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12FetchBkgAttrv();
 $0 = HEAP32[179500>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 __ZL6ClockXv();
 return;
}
function __Z11_execute_44v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12PointBkgBit0v();
 $0 = HEAP32[179496>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 return;
}
function __Z11_execute_45v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12FetchBkgBit0v();
 $0 = HEAP32[179500>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 return;
}
function __Z11_execute_46v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12PointBkgBit1v();
 $0 = HEAP32[179496>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 return;
}
function __Z11_execute_47v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12FetchBkgBit1v();
 $0 = HEAP32[179500>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 return;
}
function __Z11_execute_48v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12PointBkgNamev();
 $0 = HEAP32[179496>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 return;
}
function __Z11_execute_49v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12FetchBkgNamev();
 $0 = HEAP32[179500>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 return;
}
function __Z11_execute_50v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12PointBkgAttrv();
 $0 = HEAP32[179496>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 return;
}
function __Z11_execute_51v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12FetchBkgAttrv();
 $0 = HEAP32[179500>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 __ZL6ClockXv();
 return;
}
function __Z11_execute_52v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12PointBkgBit0v();
 $0 = HEAP32[179496>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 return;
}
function __Z11_execute_53v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12FetchBkgBit0v();
 $0 = HEAP32[179500>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 return;
}
function __Z11_execute_54v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12PointBkgBit1v();
 $0 = HEAP32[179496>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 return;
}
function __Z11_execute_55v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12FetchBkgBit1v();
 $0 = HEAP32[179500>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 return;
}
function __Z11_execute_56v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12PointBkgNamev();
 $0 = HEAP32[179496>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 return;
}
function __Z11_execute_57v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12FetchBkgNamev();
 $0 = HEAP32[179500>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 return;
}
function __Z11_execute_58v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12PointBkgAttrv();
 $0 = HEAP32[179496>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 return;
}
function __Z11_execute_59v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12FetchBkgAttrv();
 $0 = HEAP32[179500>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 __ZL6ClockXv();
 return;
}
function __Z11_execute_60v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12PointBkgBit0v();
 $0 = HEAP32[179496>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 return;
}
function __Z11_execute_61v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12FetchBkgBit0v();
 $0 = HEAP32[179500>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 return;
}
function __Z11_execute_62v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12PointBkgBit1v();
 $0 = HEAP32[179496>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 return;
}
function __Z11_execute_63v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12FetchBkgBit1v();
 $0 = HEAP32[179500>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 __ZL15EvaluationBeginv();
 return;
}
function __Z11_execute_64v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12PointBkgNamev();
 $0 = HEAP32[179496>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 return;
}
function __Z11_execute_65v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12FetchBkgNamev();
 $0 = HEAP32[179500>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 return;
}
function __Z11_execute_66v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12PointBkgAttrv();
 $0 = HEAP32[179496>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 return;
}
function __Z11_execute_67v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12FetchBkgAttrv();
 $0 = HEAP32[179500>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 __ZL6ClockXv();
 return;
}
function __Z11_execute_68v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12PointBkgBit0v();
 $0 = HEAP32[179496>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 return;
}
function __Z11_execute_69v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12FetchBkgBit0v();
 $0 = HEAP32[179500>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 return;
}
function __Z11_execute_70v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12PointBkgBit1v();
 $0 = HEAP32[179496>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 return;
}
function __Z11_execute_71v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12FetchBkgBit1v();
 $0 = HEAP32[179500>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 return;
}
function __Z11_execute_72v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12PointBkgNamev();
 $0 = HEAP32[179496>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 return;
}
function __Z11_execute_73v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12FetchBkgNamev();
 $0 = HEAP32[179500>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 return;
}
function __Z11_execute_74v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12PointBkgAttrv();
 $0 = HEAP32[179496>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 return;
}
function __Z11_execute_75v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12FetchBkgAttrv();
 $0 = HEAP32[179500>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 __ZL6ClockXv();
 return;
}
function __Z11_execute_76v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12PointBkgBit0v();
 $0 = HEAP32[179496>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 return;
}
function __Z11_execute_77v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12FetchBkgBit0v();
 $0 = HEAP32[179500>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 return;
}
function __Z11_execute_78v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12PointBkgBit1v();
 $0 = HEAP32[179496>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 return;
}
function __Z11_execute_79v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12FetchBkgBit1v();
 $0 = HEAP32[179500>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 return;
}
function __Z11_execute_80v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12PointBkgNamev();
 $0 = HEAP32[179496>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 return;
}
function __Z11_execute_81v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12FetchBkgNamev();
 $0 = HEAP32[179500>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 return;
}
function __Z11_execute_82v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12PointBkgAttrv();
 $0 = HEAP32[179496>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 return;
}
function __Z11_execute_83v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12FetchBkgAttrv();
 $0 = HEAP32[179500>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 __ZL6ClockXv();
 return;
}
function __Z11_execute_84v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12PointBkgBit0v();
 $0 = HEAP32[179496>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 return;
}
function __Z11_execute_85v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12FetchBkgBit0v();
 $0 = HEAP32[179500>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 return;
}
function __Z11_execute_86v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12PointBkgBit1v();
 $0 = HEAP32[179496>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 return;
}
function __Z11_execute_87v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12FetchBkgBit1v();
 $0 = HEAP32[179500>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 return;
}
function __Z11_execute_88v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12PointBkgNamev();
 $0 = HEAP32[179496>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 return;
}
function __Z11_execute_89v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12FetchBkgNamev();
 $0 = HEAP32[179500>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 return;
}
function __Z11_execute_90v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12PointBkgAttrv();
 $0 = HEAP32[179496>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 return;
}
function __Z11_execute_91v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12FetchBkgAttrv();
 $0 = HEAP32[179500>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 __ZL6ClockXv();
 return;
}
function __Z11_execute_92v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12PointBkgBit0v();
 $0 = HEAP32[179496>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 return;
}
function __Z11_execute_93v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12FetchBkgBit0v();
 $0 = HEAP32[179500>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 return;
}
function __Z11_execute_94v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12PointBkgBit1v();
 $0 = HEAP32[179496>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 return;
}
function __Z11_execute_95v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12FetchBkgBit1v();
 $0 = HEAP32[179500>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 return;
}
function __Z11_execute_96v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12PointBkgNamev();
 $0 = HEAP32[179496>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 return;
}
function __Z11_execute_97v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12FetchBkgNamev();
 $0 = HEAP32[179500>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 return;
}
function __Z11_execute_98v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12PointBkgAttrv();
 $0 = HEAP32[179496>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 return;
}
function __Z11_execute_99v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12FetchBkgAttrv();
 $0 = HEAP32[179500>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 __ZL6ClockXv();
 return;
}
function __Z12_execute_100v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12PointBkgBit0v();
 $0 = HEAP32[179496>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 return;
}
function __Z12_execute_101v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12FetchBkgBit0v();
 $0 = HEAP32[179500>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 return;
}
function __Z12_execute_102v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12PointBkgBit1v();
 $0 = HEAP32[179496>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 return;
}
function __Z12_execute_103v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12FetchBkgBit1v();
 $0 = HEAP32[179500>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 return;
}
function __Z12_execute_104v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12PointBkgNamev();
 $0 = HEAP32[179496>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 return;
}
function __Z12_execute_105v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12FetchBkgNamev();
 $0 = HEAP32[179500>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 return;
}
function __Z12_execute_106v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12PointBkgAttrv();
 $0 = HEAP32[179496>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 return;
}
function __Z12_execute_107v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12FetchBkgAttrv();
 $0 = HEAP32[179500>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 __ZL6ClockXv();
 return;
}
function __Z12_execute_108v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12PointBkgBit0v();
 $0 = HEAP32[179496>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 return;
}
function __Z12_execute_109v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12FetchBkgBit0v();
 $0 = HEAP32[179500>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 return;
}
function __Z12_execute_110v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12PointBkgBit1v();
 $0 = HEAP32[179496>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 return;
}
function __Z12_execute_111v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12FetchBkgBit1v();
 $0 = HEAP32[179500>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 return;
}
function __Z12_execute_112v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12PointBkgNamev();
 $0 = HEAP32[179496>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 return;
}
function __Z12_execute_113v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12FetchBkgNamev();
 $0 = HEAP32[179500>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 return;
}
function __Z12_execute_114v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12PointBkgAttrv();
 $0 = HEAP32[179496>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 return;
}
function __Z12_execute_115v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12FetchBkgAttrv();
 $0 = HEAP32[179500>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 __ZL6ClockXv();
 return;
}
function __Z12_execute_116v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12PointBkgBit0v();
 $0 = HEAP32[179496>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 return;
}
function __Z12_execute_117v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12FetchBkgBit0v();
 $0 = HEAP32[179500>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 return;
}
function __Z12_execute_118v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12PointBkgBit1v();
 $0 = HEAP32[179496>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 return;
}
function __Z12_execute_119v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12FetchBkgBit1v();
 $0 = HEAP32[179500>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 return;
}
function __Z12_execute_120v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12PointBkgNamev();
 $0 = HEAP32[179496>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 return;
}
function __Z12_execute_121v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12FetchBkgNamev();
 $0 = HEAP32[179500>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 return;
}
function __Z12_execute_122v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12PointBkgAttrv();
 $0 = HEAP32[179496>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 return;
}
function __Z12_execute_123v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12FetchBkgAttrv();
 $0 = HEAP32[179500>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 __ZL6ClockXv();
 return;
}
function __Z12_execute_124v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12PointBkgBit0v();
 $0 = HEAP32[179496>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 return;
}
function __Z12_execute_125v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12FetchBkgBit0v();
 $0 = HEAP32[179500>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 return;
}
function __Z12_execute_126v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12PointBkgBit1v();
 $0 = HEAP32[179496>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 return;
}
function __Z12_execute_127v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12FetchBkgBit1v();
 $0 = HEAP32[179500>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 return;
}
function __Z12_execute_128v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12PointBkgNamev();
 $0 = HEAP32[179496>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 return;
}
function __Z12_execute_129v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12FetchBkgNamev();
 $0 = HEAP32[179500>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 return;
}
function __Z12_execute_130v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12PointBkgAttrv();
 $0 = HEAP32[179496>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 return;
}
function __Z12_execute_131v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12FetchBkgAttrv();
 $0 = HEAP32[179500>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 __ZL6ClockXv();
 return;
}
function __Z12_execute_132v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12PointBkgBit0v();
 $0 = HEAP32[179496>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 return;
}
function __Z12_execute_133v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12FetchBkgBit0v();
 $0 = HEAP32[179500>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 return;
}
function __Z12_execute_134v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12PointBkgBit1v();
 $0 = HEAP32[179496>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 return;
}
function __Z12_execute_135v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12FetchBkgBit1v();
 $0 = HEAP32[179500>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 return;
}
function __Z12_execute_136v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12PointBkgNamev();
 $0 = HEAP32[179496>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 return;
}
function __Z12_execute_137v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12FetchBkgNamev();
 $0 = HEAP32[179500>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 return;
}
function __Z12_execute_138v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12PointBkgAttrv();
 $0 = HEAP32[179496>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 return;
}
function __Z12_execute_139v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12FetchBkgAttrv();
 $0 = HEAP32[179500>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 __ZL6ClockXv();
 return;
}
function __Z12_execute_140v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12PointBkgBit0v();
 $0 = HEAP32[179496>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 return;
}
function __Z12_execute_141v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12FetchBkgBit0v();
 $0 = HEAP32[179500>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 return;
}
function __Z12_execute_142v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12PointBkgBit1v();
 $0 = HEAP32[179496>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 return;
}
function __Z12_execute_143v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12FetchBkgBit1v();
 $0 = HEAP32[179500>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 return;
}
function __Z12_execute_144v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12PointBkgNamev();
 $0 = HEAP32[179496>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 return;
}
function __Z12_execute_145v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12FetchBkgNamev();
 $0 = HEAP32[179500>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 return;
}
function __Z12_execute_146v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12PointBkgAttrv();
 $0 = HEAP32[179496>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 return;
}
function __Z12_execute_147v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12FetchBkgAttrv();
 $0 = HEAP32[179500>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 __ZL6ClockXv();
 return;
}
function __Z12_execute_148v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12PointBkgBit0v();
 $0 = HEAP32[179496>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 return;
}
function __Z12_execute_149v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12FetchBkgBit0v();
 $0 = HEAP32[179500>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 return;
}
function __Z12_execute_150v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12PointBkgBit1v();
 $0 = HEAP32[179496>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 return;
}
function __Z12_execute_151v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12FetchBkgBit1v();
 $0 = HEAP32[179500>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 return;
}
function __Z12_execute_152v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12PointBkgNamev();
 $0 = HEAP32[179496>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 return;
}
function __Z12_execute_153v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12FetchBkgNamev();
 $0 = HEAP32[179500>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 return;
}
function __Z12_execute_154v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12PointBkgAttrv();
 $0 = HEAP32[179496>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 return;
}
function __Z12_execute_155v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12FetchBkgAttrv();
 $0 = HEAP32[179500>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 __ZL6ClockXv();
 return;
}
function __Z12_execute_156v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12PointBkgBit0v();
 $0 = HEAP32[179496>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 return;
}
function __Z12_execute_157v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12FetchBkgBit0v();
 $0 = HEAP32[179500>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 return;
}
function __Z12_execute_158v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12PointBkgBit1v();
 $0 = HEAP32[179496>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 return;
}
function __Z12_execute_159v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12FetchBkgBit1v();
 $0 = HEAP32[179500>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 return;
}
function __Z12_execute_160v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12PointBkgNamev();
 $0 = HEAP32[179496>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 return;
}
function __Z12_execute_161v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12FetchBkgNamev();
 $0 = HEAP32[179500>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 return;
}
function __Z12_execute_162v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12PointBkgAttrv();
 $0 = HEAP32[179496>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 return;
}
function __Z12_execute_163v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12FetchBkgAttrv();
 $0 = HEAP32[179500>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 __ZL6ClockXv();
 return;
}
function __Z12_execute_164v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12PointBkgBit0v();
 $0 = HEAP32[179496>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 return;
}
function __Z12_execute_165v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12FetchBkgBit0v();
 $0 = HEAP32[179500>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 return;
}
function __Z12_execute_166v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12PointBkgBit1v();
 $0 = HEAP32[179496>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 return;
}
function __Z12_execute_167v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12FetchBkgBit1v();
 $0 = HEAP32[179500>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 return;
}
function __Z12_execute_168v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12PointBkgNamev();
 $0 = HEAP32[179496>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 return;
}
function __Z12_execute_169v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12FetchBkgNamev();
 $0 = HEAP32[179500>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 return;
}
function __Z12_execute_170v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12PointBkgAttrv();
 $0 = HEAP32[179496>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 return;
}
function __Z12_execute_171v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12FetchBkgAttrv();
 $0 = HEAP32[179500>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 __ZL6ClockXv();
 return;
}
function __Z12_execute_172v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12PointBkgBit0v();
 $0 = HEAP32[179496>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 return;
}
function __Z12_execute_173v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12FetchBkgBit0v();
 $0 = HEAP32[179500>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 return;
}
function __Z12_execute_174v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12PointBkgBit1v();
 $0 = HEAP32[179496>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 return;
}
function __Z12_execute_175v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12FetchBkgBit1v();
 $0 = HEAP32[179500>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 return;
}
function __Z12_execute_176v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12PointBkgNamev();
 $0 = HEAP32[179496>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 return;
}
function __Z12_execute_177v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12FetchBkgNamev();
 $0 = HEAP32[179500>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 return;
}
function __Z12_execute_178v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12PointBkgAttrv();
 $0 = HEAP32[179496>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 return;
}
function __Z12_execute_179v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12FetchBkgAttrv();
 $0 = HEAP32[179500>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 __ZL6ClockXv();
 return;
}
function __Z12_execute_180v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12PointBkgBit0v();
 $0 = HEAP32[179496>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 return;
}
function __Z12_execute_181v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12FetchBkgBit0v();
 $0 = HEAP32[179500>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 return;
}
function __Z12_execute_182v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12PointBkgBit1v();
 $0 = HEAP32[179496>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 return;
}
function __Z12_execute_183v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12FetchBkgBit1v();
 $0 = HEAP32[179500>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 return;
}
function __Z12_execute_184v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12PointBkgNamev();
 $0 = HEAP32[179496>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 return;
}
function __Z12_execute_185v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12FetchBkgNamev();
 $0 = HEAP32[179500>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 return;
}
function __Z12_execute_186v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12PointBkgAttrv();
 $0 = HEAP32[179496>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 return;
}
function __Z12_execute_187v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12FetchBkgAttrv();
 $0 = HEAP32[179500>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 __ZL6ClockXv();
 return;
}
function __Z12_execute_188v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12PointBkgBit0v();
 $0 = HEAP32[179496>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 return;
}
function __Z12_execute_189v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12FetchBkgBit0v();
 $0 = HEAP32[179500>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 return;
}
function __Z12_execute_190v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12PointBkgBit1v();
 $0 = HEAP32[179496>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 return;
}
function __Z12_execute_191v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12FetchBkgBit1v();
 $0 = HEAP32[179500>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 return;
}
function __Z12_execute_192v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12PointBkgNamev();
 $0 = HEAP32[179496>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 return;
}
function __Z12_execute_193v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12FetchBkgNamev();
 $0 = HEAP32[179500>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 return;
}
function __Z12_execute_194v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12PointBkgAttrv();
 $0 = HEAP32[179496>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 return;
}
function __Z12_execute_195v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12FetchBkgAttrv();
 $0 = HEAP32[179500>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 __ZL6ClockXv();
 return;
}
function __Z12_execute_196v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12PointBkgBit0v();
 $0 = HEAP32[179496>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 return;
}
function __Z12_execute_197v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12FetchBkgBit0v();
 $0 = HEAP32[179500>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 return;
}
function __Z12_execute_198v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12PointBkgBit1v();
 $0 = HEAP32[179496>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 return;
}
function __Z12_execute_199v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12FetchBkgBit1v();
 $0 = HEAP32[179500>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 return;
}
function __Z12_execute_200v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12PointBkgNamev();
 $0 = HEAP32[179496>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 return;
}
function __Z12_execute_201v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12FetchBkgNamev();
 $0 = HEAP32[179500>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 return;
}
function __Z12_execute_202v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12PointBkgAttrv();
 $0 = HEAP32[179496>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 return;
}
function __Z12_execute_203v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12FetchBkgAttrv();
 $0 = HEAP32[179500>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 __ZL6ClockXv();
 return;
}
function __Z12_execute_204v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12PointBkgBit0v();
 $0 = HEAP32[179496>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 return;
}
function __Z12_execute_205v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12FetchBkgBit0v();
 $0 = HEAP32[179500>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 return;
}
function __Z12_execute_206v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12PointBkgBit1v();
 $0 = HEAP32[179496>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 return;
}
function __Z12_execute_207v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12FetchBkgBit1v();
 $0 = HEAP32[179500>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 return;
}
function __Z12_execute_208v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12PointBkgNamev();
 $0 = HEAP32[179496>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 return;
}
function __Z12_execute_209v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12FetchBkgNamev();
 $0 = HEAP32[179500>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 return;
}
function __Z12_execute_210v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12PointBkgAttrv();
 $0 = HEAP32[179496>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 return;
}
function __Z12_execute_211v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12FetchBkgAttrv();
 $0 = HEAP32[179500>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 __ZL6ClockXv();
 return;
}
function __Z12_execute_212v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12PointBkgBit0v();
 $0 = HEAP32[179496>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 return;
}
function __Z12_execute_213v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12FetchBkgBit0v();
 $0 = HEAP32[179500>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 return;
}
function __Z12_execute_214v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12PointBkgBit1v();
 $0 = HEAP32[179496>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 return;
}
function __Z12_execute_215v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12FetchBkgBit1v();
 $0 = HEAP32[179500>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 return;
}
function __Z12_execute_216v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12PointBkgNamev();
 $0 = HEAP32[179496>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 return;
}
function __Z12_execute_217v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12FetchBkgNamev();
 $0 = HEAP32[179500>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 return;
}
function __Z12_execute_218v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12PointBkgAttrv();
 $0 = HEAP32[179496>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 return;
}
function __Z12_execute_219v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12FetchBkgAttrv();
 $0 = HEAP32[179500>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 __ZL6ClockXv();
 return;
}
function __Z12_execute_220v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12PointBkgBit0v();
 $0 = HEAP32[179496>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 return;
}
function __Z12_execute_221v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12FetchBkgBit0v();
 $0 = HEAP32[179500>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 return;
}
function __Z12_execute_222v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12PointBkgBit1v();
 $0 = HEAP32[179496>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 return;
}
function __Z12_execute_223v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12FetchBkgBit1v();
 $0 = HEAP32[179500>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 return;
}
function __Z12_execute_224v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12PointBkgNamev();
 $0 = HEAP32[179496>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 return;
}
function __Z12_execute_225v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12FetchBkgNamev();
 $0 = HEAP32[179500>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 return;
}
function __Z12_execute_226v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12PointBkgAttrv();
 $0 = HEAP32[179496>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 return;
}
function __Z12_execute_227v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12FetchBkgAttrv();
 $0 = HEAP32[179500>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 __ZL6ClockXv();
 return;
}
function __Z12_execute_228v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12PointBkgBit0v();
 $0 = HEAP32[179496>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 return;
}
function __Z12_execute_229v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12FetchBkgBit0v();
 $0 = HEAP32[179500>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 return;
}
function __Z12_execute_230v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12PointBkgBit1v();
 $0 = HEAP32[179496>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 return;
}
function __Z12_execute_231v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12FetchBkgBit1v();
 $0 = HEAP32[179500>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 return;
}
function __Z12_execute_232v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12PointBkgNamev();
 $0 = HEAP32[179496>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 return;
}
function __Z12_execute_233v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12FetchBkgNamev();
 $0 = HEAP32[179500>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 return;
}
function __Z12_execute_234v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12PointBkgAttrv();
 $0 = HEAP32[179496>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 return;
}
function __Z12_execute_235v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12FetchBkgAttrv();
 $0 = HEAP32[179500>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 __ZL6ClockXv();
 return;
}
function __Z12_execute_236v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12PointBkgBit0v();
 $0 = HEAP32[179496>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 return;
}
function __Z12_execute_237v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12FetchBkgBit0v();
 $0 = HEAP32[179500>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 return;
}
function __Z12_execute_238v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12PointBkgBit1v();
 $0 = HEAP32[179496>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 return;
}
function __Z12_execute_239v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12FetchBkgBit1v();
 $0 = HEAP32[179500>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 return;
}
function __Z12_execute_240v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12PointBkgNamev();
 $0 = HEAP32[179496>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 return;
}
function __Z12_execute_241v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12FetchBkgNamev();
 $0 = HEAP32[179500>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 return;
}
function __Z12_execute_242v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12PointBkgAttrv();
 $0 = HEAP32[179496>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 return;
}
function __Z12_execute_243v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12FetchBkgAttrv();
 $0 = HEAP32[179500>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 __ZL6ClockXv();
 return;
}
function __Z12_execute_244v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12PointBkgBit0v();
 $0 = HEAP32[179496>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 return;
}
function __Z12_execute_245v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12FetchBkgBit0v();
 $0 = HEAP32[179500>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 return;
}
function __Z12_execute_246v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12PointBkgBit1v();
 $0 = HEAP32[179496>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 return;
}
function __Z12_execute_247v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12FetchBkgBit1v();
 $0 = HEAP32[179500>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 return;
}
function __Z12_execute_248v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12PointBkgNamev();
 $0 = HEAP32[179496>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 return;
}
function __Z12_execute_249v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12FetchBkgNamev();
 $0 = HEAP32[179500>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 return;
}
function __Z12_execute_250v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12PointBkgAttrv();
 $0 = HEAP32[179496>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 return;
}
function __Z12_execute_251v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12FetchBkgAttrv();
 $0 = HEAP32[179500>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 __ZL6ClockYv();
 return;
}
function __Z12_execute_252v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12PointBkgBit0v();
 $0 = HEAP32[179496>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 return;
}
function __Z12_execute_253v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12FetchBkgBit0v();
 $0 = HEAP32[179500>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 return;
}
function __Z12_execute_254v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12PointBkgBit1v();
 $0 = HEAP32[179496>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 return;
}
function __Z12_execute_255v() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12FetchBkgBit1v();
 $0 = HEAP32[179500>>2]|0;
 FUNCTION_TABLE_v[$0 & 511]();
 __ZL11RenderPixelv();
 __ZL15EvaluationResetv();
 return;
}
function __Z12_execute_256v() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12PointBkgNamev();
 return;
}
function __Z12_execute_257v() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12FetchBkgNamev();
 __ZL6ResetXv();
 return;
}
function __Z12_execute_258v() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12PointBkgNamev();
 return;
}
function __Z12_execute_259v() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12FetchBkgNamev();
 return;
}
function __Z12_execute_260v() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12PointObjBit0h(0);
 return;
}
function __Z12_execute_261v() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12FetchObjBit0h(0);
 return;
}
function __Z12_execute_262v() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12PointObjBit1h(0);
 return;
}
function __Z12_execute_263v() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12FetchObjBit1h(0);
 return;
}
function __Z12_execute_264v() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12PointBkgNamev();
 return;
}
function __Z12_execute_265v() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12FetchBkgNamev();
 return;
}
function __Z12_execute_266v() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12PointBkgNamev();
 return;
}
function __Z12_execute_267v() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12FetchBkgNamev();
 return;
}
function __Z12_execute_268v() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12PointObjBit0h(1);
 return;
}
function __Z12_execute_269v() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12FetchObjBit0h(1);
 return;
}
function __Z12_execute_270v() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12PointObjBit1h(1);
 return;
}
function __Z12_execute_271v() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12FetchObjBit1h(1);
 return;
}
function __Z12_execute_272v() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12PointBkgNamev();
 return;
}
function __Z12_execute_273v() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12FetchBkgNamev();
 return;
}
function __Z12_execute_274v() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12PointBkgNamev();
 return;
}
function __Z12_execute_275v() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12FetchBkgNamev();
 return;
}
function __Z12_execute_276v() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12PointObjBit0h(2);
 return;
}
function __Z12_execute_277v() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12FetchObjBit0h(2);
 return;
}
function __Z12_execute_278v() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12PointObjBit1h(2);
 return;
}
function __Z12_execute_279v() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12FetchObjBit1h(2);
 return;
}
function __Z12_execute_280v() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12PointBkgNamev();
 return;
}
function __Z12_execute_281v() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12FetchBkgNamev();
 return;
}
function __Z12_execute_282v() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12PointBkgNamev();
 return;
}
function __Z12_execute_283v() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12FetchBkgNamev();
 return;
}
function __Z12_execute_284v() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12PointObjBit0h(3);
 return;
}
function __Z12_execute_285v() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12FetchObjBit0h(3);
 return;
}
function __Z12_execute_286v() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12PointObjBit1h(3);
 return;
}
function __Z12_execute_287v() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12FetchObjBit1h(3);
 return;
}
function __Z12_execute_288v() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12PointBkgNamev();
 return;
}
function __Z12_execute_289v() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12FetchBkgNamev();
 return;
}
function __Z12_execute_290v() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12PointBkgNamev();
 return;
}
function __Z12_execute_291v() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12FetchBkgNamev();
 return;
}
function __Z12_execute_292v() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12PointObjBit0h(4);
 return;
}
function __Z12_execute_293v() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12FetchObjBit0h(4);
 return;
}
function __Z12_execute_294v() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12PointObjBit1h(4);
 return;
}
function __Z12_execute_295v() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12FetchObjBit1h(4);
 return;
}
function __Z12_execute_296v() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12PointBkgNamev();
 return;
}
function __Z12_execute_297v() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12FetchBkgNamev();
 return;
}
function __Z12_execute_298v() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12PointBkgNamev();
 return;
}
function __Z12_execute_299v() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12FetchBkgNamev();
 return;
}
function __Z12_execute_300v() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12PointObjBit0h(5);
 return;
}
function __Z12_execute_301v() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12FetchObjBit0h(5);
 return;
}
function __Z12_execute_302v() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12PointObjBit1h(5);
 return;
}
function __Z12_execute_303v() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12FetchObjBit1h(5);
 return;
}
function __Z12_execute_304v() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12PointBkgNamev();
 __ZL6ResetYv();
 return;
}
function __Z12_execute_305v() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12FetchBkgNamev();
 return;
}
function __Z12_execute_306v() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12PointBkgNamev();
 return;
}
function __Z12_execute_307v() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12FetchBkgNamev();
 return;
}
function __Z12_execute_308v() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12PointObjBit0h(6);
 return;
}
function __Z12_execute_309v() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12FetchObjBit0h(6);
 return;
}
function __Z12_execute_310v() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12PointObjBit1h(6);
 return;
}
function __Z12_execute_311v() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12FetchObjBit1h(6);
 return;
}
function __Z12_execute_312v() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12PointBkgNamev();
 return;
}
function __Z12_execute_313v() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12FetchBkgNamev();
 return;
}
function __Z12_execute_314v() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12PointBkgNamev();
 return;
}
function __Z12_execute_315v() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12FetchBkgNamev();
 return;
}
function __Z12_execute_316v() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12PointObjBit0h(7);
 return;
}
function __Z12_execute_317v() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12FetchObjBit0h(7);
 return;
}
function __Z12_execute_318v() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12PointObjBit1h(7);
 return;
}
function __Z12_execute_319v() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12FetchObjBit1h(7);
 return;
}
function __Z12_execute_320v() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12PointBkgNamev();
 return;
}
function __Z12_execute_321v() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12FetchBkgNamev();
 return;
}
function __Z12_execute_322v() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12PointBkgAttrv();
 return;
}
function __Z12_execute_323v() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12FetchBkgAttrv();
 __ZL6ClockXv();
 return;
}
function __Z12_execute_324v() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12PointBkgBit0v();
 return;
}
function __Z12_execute_325v() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12FetchBkgBit0v();
 return;
}
function __Z12_execute_326v() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12PointBkgBit1v();
 return;
}
function __Z12_execute_327v() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12FetchBkgBit1v();
 return;
}
function __Z12_execute_328v() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12PointBkgNamev();
 return;
}
function __Z12_execute_329v() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12FetchBkgNamev();
 return;
}
function __Z12_execute_330v() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12PointBkgAttrv();
 return;
}
function __Z12_execute_331v() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12FetchBkgAttrv();
 __ZL6ClockXv();
 return;
}
function __Z12_execute_332v() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12PointBkgBit0v();
 return;
}
function __Z12_execute_333v() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12FetchBkgBit0v();
 return;
}
function __Z12_execute_334v() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12PointBkgBit1v();
 return;
}
function __Z12_execute_335v() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZL12FetchBkgBit1v();
 return;
}
function __Z9SpriteDMAh($data) {
 $data = $data|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $addr = 0, $i = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $data;
 $1 = $0;
 $2 = $1&255;
 $3 = $2 << 8;
 $4 = $3 & 65535;
 $5 = $4&65535;
 $addr = $5;
 $i = 0;
 while(1) {
  $6 = $i;
  $7 = $6&65535;
  $8 = ($7|0)<(256);
  if (!($8)) {
   break;
  }
  $9 = $addr;
  $10 = (($9) + 1)<<16>>16;
  $addr = $10;
  $11 = (__Z8ReadBytet($9)|0);
  __ZL8Poke2004th(8196,$11);
  $12 = $i;
  $13 = (($12) + 1)<<16>>16;
  $i = $13;
 }
 $14 = HEAP16[431024>>1]|0;
 $15 = $14&65535;
 $16 = (($15) + 513)|0;
 $17 = $16&65535;
 HEAP16[431024>>1] = $17;
 STACKTOP = sp;return;
}
function __Z11PPUReadBytet($addr) {
 $addr = $addr|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $addr;
 $2 = $1;
 $3 = $2&65535;
 $4 = ($3|0)==(8194);
 $5 = $1;
 do {
  if ($4) {
   $6 = (__ZL8Peek2002t($5)|0);
   $0 = $6;
  } else {
   $7 = $5&65535;
   $8 = ($7|0)==(8196);
   $9 = $1;
   if ($8) {
    $10 = (__ZL8Peek2004t($9)|0);
    $0 = $10;
    break;
   }
   $11 = $9&65535;
   $12 = ($11|0)==(8199);
   if ($12) {
    $13 = $1;
    $14 = (__ZL8Peek2007t($13)|0);
    $0 = $14;
    break;
   } else {
    $0 = 0;
    break;
   }
  }
 } while(0);
 $15 = $0;
 STACKTOP = sp;return ($15|0);
}
function __Z12PPUWriteByteth($addr,$data) {
 $addr = $addr|0;
 $data = $data|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $addr;
 $1 = $data;
 $2 = $0;
 $3 = $2&65535;
 switch ($3|0) {
 case 8192:  {
  $4 = $0;
  $5 = $1;
  __ZL8Poke2000th($4,$5);
  break;
 }
 case 8193:  {
  $6 = $0;
  $7 = $1;
  __ZL8Poke2001th($6,$7);
  break;
 }
 case 8195:  {
  $8 = $0;
  $9 = $1;
  __ZL8Poke2003th($8,$9);
  break;
 }
 case 8196:  {
  $10 = $0;
  $11 = $1;
  __ZL8Poke2004th($10,$11);
  break;
 }
 case 8197:  {
  $12 = $0;
  $13 = $1;
  __ZL8Poke2005th($12,$13);
  break;
 }
 case 8198:  {
  $14 = $0;
  $15 = $1;
  __ZL8Poke2006th($14,$15);
  break;
 }
 case 8199:  {
  $16 = $0;
  $17 = $1;
  __ZL8Poke2007th($16,$17);
  break;
 }
 default: {
 }
 }
 STACKTOP = sp;return;
}
function __Z10PPUExecutev() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZL7Executev();
 $0 = HEAP8[437828>>0]|0;
 $1 = $0&1;
 if (!($1)) {
  return;
 }
 HEAP8[437828>>0] = 0;
 __Z7PADSyncv();
 __Z4Flipv();
 __Z11APUEndFramev();
 return;
}
function __Z8PPUResetv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZL15EvaluationResetv();
 __ZL5resetv();
 return;
}
function __ZL12PointBkgNamev() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP16[431032>>1]|0;
 $1 = $0&65535;
 $2 = $1 & 4095;
 $3 = 8192 | $2;
 $4 = $3&65535;
 HEAP16[431026>>1] = $4;
 $5 = HEAP32[179492>>2]|0;
 $6 = HEAP16[431026>>1]|0;
 FUNCTION_TABLE_vi[$5 & 511]($6);
 return;
}
function __ZL11RenderPixelv() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $bkg = 0, $bkgPixel = 0, $objPixel = 0, $pixel = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = HEAP16[431040>>1]|0;
 $1 = $0 << 16 >> 16;
 $2 = ($1|0)==(-1);
 if ($2) {
  STACKTOP = sp;return;
 }
 $3 = (__ZL7PPUPeekt(16128)|0);
 $bkg = $3;
 $4 = HEAP16[431042>>1]|0;
 $5 = $4&65535;
 $6 = HEAP16[431040>>1]|0;
 $7 = $6 << 16 >> 16;
 $8 = $7 << 8;
 $9 = $5 | $8;
 $10 = $9&65535;
 $11 = $bkg;
 $12 = $11&255;
 $13 = (431044 + ($12<<1)|0);
 $14 = HEAP16[$13>>1]|0;
 __Z14SetIndexBuffertt($10,$14);
 $15 = HEAP8[437847>>0]|0;
 $16 = $15&1;
 if ($16) {
  $17 = HEAP16[431042>>1]|0;
  $18 = $17&65535;
  $19 = HEAP8[437843>>0]|0;
  $20 = $19&255;
  $21 = (($18) + ($20))|0;
  $22 = (432580 + ($21<<1)|0);
  $23 = HEAP16[$22>>1]|0;
  $24 = $23&65535;
  $26 = $24;
 } else {
  $26 = 0;
 }
 $25 = $26&65535;
 $bkgPixel = $25;
 $27 = HEAP8[437848>>0]|0;
 $28 = $27&1;
 if ($28) {
  $29 = HEAP16[431042>>1]|0;
  $30 = $29&65535;
  $31 = (432068 + ($30<<1)|0);
  $32 = HEAP16[$31>>1]|0;
  $33 = $32&65535;
  $35 = $33;
 } else {
  $35 = 0;
 }
 $34 = $35&65535;
 $objPixel = $34;
 $pixel = 0;
 $36 = HEAP16[431042>>1]|0;
 $37 = $36&65535;
 $38 = ($37|0)<(8);
 if ($38) {
  $39 = HEAP8[437834>>0]|0;
  $40 = $39&1;
  if ($40) {
   $bkgPixel = 0;
  }
 }
 $41 = HEAP16[431042>>1]|0;
 $42 = $41&65535;
 $43 = ($42|0)<(8);
 if ($43) {
  $44 = HEAP8[437835>>0]|0;
  $45 = $44&1;
  if ($45) {
   $objPixel = 0;
  }
 }
 $46 = $bkgPixel;
 $47 = $46&65535;
 $48 = $47 & 3;
 $49 = ($48|0)==(0);
 $50 = $objPixel;
 $51 = $50&65535;
 do {
  if ($49) {
   $52 = $51 & 16159;
   $53 = $52&65535;
   $pixel = $53;
  } else {
   $54 = $51 & 3;
   $55 = ($54|0)==(0);
   if ($55) {
    $56 = $bkgPixel;
    $pixel = $56;
    break;
   }
   $57 = $objPixel;
   $58 = $57&65535;
   $59 = $58 & 32768;
   $60 = ($59|0)!=(0);
   if ($60) {
    $61 = $objPixel;
    $62 = $61&65535;
    $63 = $62 & 16159;
    $64 = $63&65535;
    $pixel = $64;
   } else {
    $65 = $bkgPixel;
    $pixel = $65;
   }
   $66 = $objPixel;
   $67 = $66&65535;
   $68 = $67 & 16384;
   $69 = ($68|0)!=(0);
   if ($69) {
    $70 = HEAP16[431042>>1]|0;
    $71 = $70&65535;
    $72 = ($71|0)<(255);
    if ($72) {
     HEAP8[437837>>0] = 1;
    }
   }
  }
 } while(0);
 $73 = $pixel;
 $74 = $73&65535;
 $75 = $74 & 3;
 $76 = ($75|0)!=(0);
 if (!($76)) {
  STACKTOP = sp;return;
 }
 $77 = HEAP16[431042>>1]|0;
 $78 = $77&65535;
 $79 = HEAP16[431040>>1]|0;
 $80 = $79 << 16 >> 16;
 $81 = $80 << 8;
 $82 = $78 | $81;
 $83 = $82&65535;
 $84 = $pixel;
 $85 = (__ZL7PPUPeekt($84)|0);
 $86 = $85&255;
 $87 = HEAP8[437846>>0]|0;
 $88 = $87&255;
 $89 = $86 & $88;
 $90 = HEAP16[431038>>1]|0;
 $91 = $90&65535;
 $92 = $89 | $91;
 $93 = (431044 + ($92<<1)|0);
 $94 = HEAP16[$93>>1]|0;
 __Z14SetIndexBuffertt($83,$94);
 STACKTOP = sp;return;
}
function __ZL12FetchBkgNamev() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP16[431030>>1]|0;
 $1 = $0&65535;
 $2 = HEAP16[431026>>1]|0;
 $3 = (__ZL7PPUPeekt($2)|0);
 $4 = $3&255;
 $5 = $4 << 4;
 $6 = $1 | $5;
 $7 = HEAP16[431032>>1]|0;
 $8 = $7&65535;
 $9 = $8 >> 12;
 $10 = $9 & 7;
 $11 = $6 | $10;
 $12 = $11&65535;
 HEAP16[431028>>1] = $12;
 return;
}
function __ZL12PointBkgAttrv() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP16[431032>>1]|0;
 $1 = $0&65535;
 $2 = $1 & 3072;
 $3 = 9152 | $2;
 $4 = HEAP16[431032>>1]|0;
 $5 = $4&65535;
 $6 = $5 >> 4;
 $7 = $6 & 56;
 $8 = $3 | $7;
 $9 = HEAP16[431032>>1]|0;
 $10 = $9&65535;
 $11 = $10 >> 2;
 $12 = $11 & 7;
 $13 = $8 | $12;
 $14 = $13&65535;
 HEAP16[431026>>1] = $14;
 $15 = HEAP32[179492>>2]|0;
 $16 = HEAP16[431026>>1]|0;
 FUNCTION_TABLE_vi[$15 & 511]($16);
 return;
}
function __ZL12FetchBkgAttrv() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP16[431026>>1]|0;
 $1 = (__ZL7PPUPeekt($0)|0);
 $2 = $1&255;
 $3 = HEAP16[431032>>1]|0;
 $4 = $3&65535;
 $5 = $4 >> 4;
 $6 = $5 & 4;
 $7 = HEAP16[431032>>1]|0;
 $8 = $7&65535;
 $9 = $8 & 2;
 $10 = $6 | $9;
 $11 = $2 >> $10;
 $12 = $11&255;
 HEAP8[437829>>0] = $12;
 $13 = HEAP8[437829>>0]|0;
 $14 = $13&255;
 $15 = $14 << 2;
 $16 = $15 & 12;
 $17 = $16&255;
 HEAP8[437829>>0] = $17;
 return;
}
function __ZL6ClockXv() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP16[431032>>1]|0;
 $1 = $0&65535;
 $2 = $1 & 31;
 $3 = ($2|0)!=(31);
 $4 = HEAP16[431032>>1]|0;
 $5 = $4&65535;
 if ($3) {
  $6 = (($5) + 1)|0;
  $7 = $6&65535;
  HEAP16[431032>>1] = $7;
  return;
 } else {
  $8 = $5 ^ 1055;
  $9 = $8&65535;
  HEAP16[431032>>1] = $9;
  return;
 }
}
function __ZL12PointBkgBit0v() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP16[431028>>1]|0;
 $1 = $0&65535;
 $2 = $1&65535;
 HEAP16[431026>>1] = $2;
 $3 = HEAP32[179492>>2]|0;
 $4 = HEAP16[431026>>1]|0;
 FUNCTION_TABLE_vi[$3 & 511]($4);
 return;
}
function __ZL12FetchBkgBit0v() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP16[431026>>1]|0;
 $1 = (__ZL7PPUPeekt($0)|0);
 HEAP8[437830>>0] = $1;
 return;
}
function __ZL12PointBkgBit1v() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP16[431028>>1]|0;
 $1 = $0&65535;
 $2 = $1 | 8;
 $3 = $2&65535;
 HEAP16[431026>>1] = $3;
 $4 = HEAP32[179492>>2]|0;
 $5 = HEAP16[431026>>1]|0;
 FUNCTION_TABLE_vi[$4 & 511]($5);
 return;
}
function __ZL12FetchBkgBit1v() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP16[431026>>1]|0;
 $1 = (__ZL7PPUPeekt($0)|0);
 HEAP8[437831>>0] = $1;
 $2 = HEAP16[431042>>1]|0;
 $3 = $2&65535;
 switch ($3|0) {
 case 327:  {
  __ZL12MergeBkgBitst(0);
  return;
  break;
 }
 case 335:  {
  __ZL12MergeBkgBitst(8);
  return;
  break;
 }
 default: {
  $4 = HEAP16[431042>>1]|0;
  $5 = $4&65535;
  $6 = (($5) + 9)|0;
  $7 = $6&65535;
  __ZL12MergeBkgBitst($7);
  return;
 }
 }
}
function __ZL15EvaluationBeginv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[179496>>2] = 356;
 HEAP32[179500>>2] = 357;
 HEAP8[438438>>0] = 0;
 HEAP8[437849>>0] = 0;
 return;
}
function __ZL6ClockYv() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP16[431032>>1]|0;
 $1 = $0&65535;
 $2 = $1 & 28672;
 $3 = ($2|0)!=(28672);
 $4 = HEAP16[431032>>1]|0;
 $5 = $4&65535;
 if ($3) {
  $6 = (($5) + 4096)|0;
  $7 = $6&65535;
  HEAP16[431032>>1] = $7;
  return;
 }
 $8 = $5 ^ 28672;
 $9 = $8&65535;
 HEAP16[431032>>1] = $9;
 $10 = HEAP16[431032>>1]|0;
 $11 = $10&65535;
 $12 = $11 & 992;
 switch ($12|0) {
 case 928:  {
  $13 = HEAP16[431032>>1]|0;
  $14 = $13&65535;
  $15 = $14 ^ 2976;
  $16 = $15&65535;
  HEAP16[431032>>1] = $16;
  return;
  break;
 }
 case 992:  {
  $17 = HEAP16[431032>>1]|0;
  $18 = $17&65535;
  $19 = $18 ^ 992;
  $20 = $19&65535;
  HEAP16[431032>>1] = $20;
  return;
  break;
 }
 default: {
  $21 = HEAP16[431032>>1]|0;
  $22 = $21&65535;
  $23 = (($22) + 32)|0;
  $24 = $23&65535;
  HEAP16[431032>>1] = $24;
  return;
 }
 }
}
function __ZL15EvaluationResetv() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 HEAP32[179496>>2] = 358;
 HEAP32[179500>>2] = 359;
 HEAP8[438438>>0] = 0;
 HEAP8[437842>>0] = 0;
 HEAP8[437849>>0] = 0;
 $i = 0;
 while(1) {
  $0 = $i;
  $1 = $0&65535;
  $2 = ($1|0)<(256);
  if (!($2)) {
   break;
  }
  $3 = $i;
  $4 = $3&65535;
  $5 = (432068 + ($4<<1)|0);
  HEAP16[$5>>1] = 0;
  $6 = $i;
  $7 = (($6) + 1)<<16>>16;
  $i = $7;
 }
 STACKTOP = sp;return;
}
function __ZL6ResetXv() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP16[431032>>1]|0;
 $1 = $0&65535;
 $2 = $1 & 31712;
 $3 = HEAP16[431034>>1]|0;
 $4 = $3&65535;
 $5 = $4 & 1055;
 $6 = $2 | $5;
 $7 = $6&65535;
 HEAP16[431032>>1] = $7;
 return;
}
function __ZL12PointObjBit0h($obj) {
 $obj = $obj|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $8 = 0, $9 = 0, $comparator = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $obj;
 $1 = HEAP16[431040>>1]|0;
 $2 = $1 << 16 >> 16;
 $3 = $0;
 $4 = $3&255;
 $5 = (438142 + (($4*5)|0)|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = $6&255;
 $8 = (($2) - ($7))|0;
 $9 = $0;
 $10 = $9&255;
 $11 = (438142 + (($10*5)|0)|0);
 $12 = ((($11)) + 2|0);
 $13 = HEAP8[$12>>0]|0;
 $14 = $13&255;
 $15 = $14 & 128;
 $16 = ($15|0)!=(0);
 $17 = $16 ? 15 : 0;
 $18 = $8 ^ $17;
 $19 = $18&65535;
 $comparator = $19;
 $20 = HEAP8[437836>>0]|0;
 $21 = $20&1;
 if ($21) {
  $22 = $0;
  $23 = $22&255;
  $24 = (438142 + (($23*5)|0)|0);
  $25 = ((($24)) + 1|0);
  $26 = HEAP8[$25>>0]|0;
  $27 = $26&255;
  $28 = $27 << 12;
  $29 = $28 & 4096;
  $30 = $0;
  $31 = $30&255;
  $32 = (438142 + (($31*5)|0)|0);
  $33 = ((($32)) + 1|0);
  $34 = HEAP8[$33>>0]|0;
  $35 = $34&255;
  $36 = $35 << 4;
  $37 = $36 & 4064;
  $38 = $29 | $37;
  $39 = $comparator;
  $40 = $39&65535;
  $41 = $40 << 1;
  $42 = $41 & 16;
  $43 = $38 | $42;
  $44 = $comparator;
  $45 = $44&65535;
  $46 = $45 << 0;
  $47 = $46 & 7;
  $48 = $43 | $47;
  $49 = $48&65535;
  HEAP16[431028>>1] = $49;
  $67 = HEAP16[431028>>1]|0;
  $68 = $67&65535;
  $69 = $68&65535;
  HEAP16[431026>>1] = $69;
  $70 = HEAP32[179492>>2]|0;
  $71 = HEAP16[431026>>1]|0;
  FUNCTION_TABLE_vi[$70 & 511]($71);
  STACKTOP = sp;return;
 } else {
  $50 = HEAP16[431036>>1]|0;
  $51 = $50&65535;
  $52 = $0;
  $53 = $52&255;
  $54 = (438142 + (($53*5)|0)|0);
  $55 = ((($54)) + 1|0);
  $56 = HEAP8[$55>>0]|0;
  $57 = $56&255;
  $58 = $57 << 4;
  $59 = $58 & 4080;
  $60 = $51 | $59;
  $61 = $comparator;
  $62 = $61&65535;
  $63 = $62 << 0;
  $64 = $63 & 7;
  $65 = $60 | $64;
  $66 = $65&65535;
  HEAP16[431028>>1] = $66;
  $67 = HEAP16[431028>>1]|0;
  $68 = $67&65535;
  $69 = $68&65535;
  HEAP16[431026>>1] = $69;
  $70 = HEAP32[179492>>2]|0;
  $71 = HEAP16[431026>>1]|0;
  FUNCTION_TABLE_vi[$70 & 511]($71);
  STACKTOP = sp;return;
 }
}
function __ZL12FetchObjBit0h($obj) {
 $obj = $obj|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $obj;
 $1 = HEAP16[431026>>1]|0;
 $2 = (__ZL7PPUPeekt($1)|0);
 HEAP8[437830>>0] = $2;
 $3 = $0;
 $4 = $3&255;
 $5 = (438142 + (($4*5)|0)|0);
 $6 = ((($5)) + 2|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = $7&255;
 $9 = $8 & 64;
 $10 = ($9|0)!=(0);
 if (!($10)) {
  STACKTOP = sp;return;
 }
 $11 = HEAP8[437830>>0]|0;
 $12 = $11&255;
 $13 = (438182 + ($12)|0);
 $14 = HEAP8[$13>>0]|0;
 HEAP8[437830>>0] = $14;
 STACKTOP = sp;return;
}
function __ZL12PointObjBit1h($obj) {
 $obj = $obj|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $obj;
 $1 = HEAP16[431028>>1]|0;
 $2 = $1&65535;
 $3 = $2 | 8;
 $4 = $3&65535;
 HEAP16[431026>>1] = $4;
 $5 = HEAP32[179492>>2]|0;
 $6 = HEAP16[431026>>1]|0;
 FUNCTION_TABLE_vi[$5 & 511]($6);
 STACKTOP = sp;return;
}
function __ZL12FetchObjBit1h($obj) {
 $obj = $obj|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $obj;
 $1 = HEAP16[431026>>1]|0;
 $2 = (__ZL7PPUPeekt($1)|0);
 HEAP8[437831>>0] = $2;
 $3 = $0;
 $4 = $3&255;
 $5 = (438142 + (($4*5)|0)|0);
 $6 = ((($5)) + 2|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = $7&255;
 $9 = $8 & 64;
 $10 = ($9|0)!=(0);
 if ($10) {
  $11 = HEAP8[437831>>0]|0;
  $12 = $11&255;
  $13 = (438182 + ($12)|0);
  $14 = HEAP8[$13>>0]|0;
  HEAP8[437831>>0] = $14;
 }
 $15 = $0;
 $16 = $15&255;
 $17 = (438142 + (($16*5)|0)|0);
 $18 = ((($17)) + 2|0);
 $19 = HEAP8[$18>>0]|0;
 $20 = $19&255;
 $21 = $20 << 2;
 $22 = $21 & 12;
 $23 = $22&255;
 HEAP8[437829>>0] = $23;
 $24 = $0;
 $25 = $24&255;
 $26 = (438142 + (($25*5)|0)|0);
 $27 = ((($26)) + 3|0);
 $28 = HEAP8[$27>>0]|0;
 $29 = $28&255;
 $30 = $0;
 $31 = $30&255;
 $32 = (438142 + (($31*5)|0)|0);
 $33 = ((($32)) + 4|0);
 $34 = HEAP8[$33>>0]|0;
 $35 = $34&1;
 $36 = $0;
 $37 = $36&255;
 $38 = (438142 + (($37*5)|0)|0);
 $39 = ((($38)) + 2|0);
 $40 = HEAP8[$39>>0]|0;
 $41 = $40&255;
 $42 = $41 & 32;
 $43 = ($42|0)==(0);
 __ZL12MergeObjBitstbb($29,$35,$43);
 STACKTOP = sp;return;
}
function __ZL6ResetYv() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP16[431040>>1]|0;
 $1 = $0 << 16 >> 16;
 $2 = ($1|0)==(-1);
 if (!($2)) {
  return;
 }
 $3 = HEAP16[431034>>1]|0;
 HEAP16[431032>>1] = $3;
 return;
}
function __ZL8Poke2004th($addr,$data) {
 $addr = $addr|0;
 $data = $data|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $addr;
 $1 = $data;
 $2 = HEAP8[437842>>0]|0;
 $3 = $2&255;
 $4 = $3 & 3;
 $5 = ($4|0)==(2);
 $6 = $1;
 if ($5) {
  $7 = $6&255;
  $8 = $7 & 227;
  $9 = $8&255;
  $10 = HEAP8[437842>>0]|0;
  $11 = (($10) + 1)<<24>>24;
  HEAP8[437842>>0] = $11;
  $12 = $10&255;
  $13 = (437886 + ($12)|0);
  HEAP8[$13>>0] = $9;
  STACKTOP = sp;return;
 } else {
  $14 = HEAP8[437842>>0]|0;
  $15 = (($14) + 1)<<24>>24;
  HEAP8[437842>>0] = $15;
  $16 = $14&255;
  $17 = (437886 + ($16)|0);
  HEAP8[$17>>0] = $6;
  STACKTOP = sp;return;
 }
}
function __ZL8Peek2002t($addr) {
 $addr = $addr|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $status = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $addr;
 $1 = HEAP16[431040>>1]|0;
 $2 = $1 << 16 >> 16;
 $3 = ($2|0)==(240);
 if ($3) {
  $4 = HEAP16[431042>>1]|0;
  $5 = $4&65535;
  $6 = ($5|0)==(340);
  if ($6) {
   HEAP8[437850>>0] = 1;
   HEAP8[437851>>0] = 1;
  }
 }
 $7 = HEAP16[431040>>1]|0;
 $8 = $7 << 16 >> 16;
 $9 = ($8|0)==(241);
 if ($9) {
  $10 = HEAP16[431042>>1]|0;
  $11 = $10&65535;
  $12 = ($11|0)<(2);
  if ($12) {
   HEAP8[437851>>0] = 1;
  }
 }
 $status = 0;
 $13 = HEAP8[437840>>0]|0;
 $14 = $13&1;
 if ($14) {
  $15 = $status;
  $16 = $15&255;
  $17 = $16 | 128;
  $18 = $17&255;
  $status = $18;
 }
 $19 = HEAP8[437837>>0]|0;
 $20 = $19&1;
 if ($20) {
  $21 = $status;
  $22 = $21&255;
  $23 = $22 | 64;
  $24 = $23&255;
  $status = $24;
 }
 $25 = HEAP8[437845>>0]|0;
 $26 = $25&1;
 if (!($26)) {
  HEAP8[437840>>0] = 0;
  HEAP8[437833>>0] = 0;
  $31 = $status;
  STACKTOP = sp;return ($31|0);
 }
 $27 = $status;
 $28 = $27&255;
 $29 = $28 | 32;
 $30 = $29&255;
 $status = $30;
 HEAP8[437840>>0] = 0;
 HEAP8[437833>>0] = 0;
 $31 = $status;
 STACKTOP = sp;return ($31|0);
}
function __ZL8Peek2004t($addr) {
 $addr = $addr|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $addr;
 $1 = HEAP8[437842>>0]|0;
 $2 = $1&255;
 $3 = (437886 + ($2)|0);
 $4 = HEAP8[$3>>0]|0;
 STACKTOP = sp;return ($4|0);
}
function __ZL8Peek2007t($addr) {
 $addr = $addr|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $data = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $addr;
 $1 = HEAP16[431032>>1]|0;
 $2 = $1&65535;
 $3 = $2 & 16128;
 $4 = ($3|0)!=(16128);
 if ($4) {
  $5 = HEAP8[437841>>0]|0;
  $16 = $5;
 } else {
  $6 = HEAP16[431032>>1]|0;
  $7 = $6&65535;
  $8 = $7 & 16383;
  $9 = $8&65535;
  $10 = (__ZL7PalPeekt($9)|0);
  $11 = $10&255;
  $12 = HEAP8[437846>>0]|0;
  $13 = $12&255;
  $14 = $11 & $13;
  $15 = $14&255;
  $16 = $15;
 }
 $data = $16;
 $17 = HEAP16[431032>>1]|0;
 $18 = $17&65535;
 $19 = ($18|0)>=(8192);
 $20 = HEAP16[431032>>1]|0;
 if ($19) {
  $21 = (__ZL7NmtPeekt($20)|0);
  $23 = $21;
 } else {
  $22 = (__ZL7ChrPeekt($20)|0);
  $23 = $22;
 }
 HEAP8[437841>>0] = $23;
 $24 = HEAP16[431032>>1]|0;
 $25 = $24&65535;
 $26 = HEAP8[437844>>0]|0;
 $27 = $26&255;
 $28 = (($25) + ($27))|0;
 $29 = $28 & 32767;
 $30 = $29&65535;
 HEAP16[431032>>1] = $30;
 $31 = HEAP32[179492>>2]|0;
 $32 = HEAP16[431032>>1]|0;
 FUNCTION_TABLE_vi[$31 & 511]($32);
 $33 = $data;
 STACKTOP = sp;return ($33|0);
}
function __ZL8Poke2000th($addr,$data) {
 $addr = $addr|0;
 $data = $data|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $addr;
 $1 = $data;
 $2 = HEAP16[431034>>1]|0;
 $3 = $2&65535;
 $4 = $3 & 29695;
 $5 = $1;
 $6 = $5&255;
 $7 = $6 << 10;
 $8 = $7 & 3072;
 $9 = $4 | $8;
 $10 = $9&65535;
 HEAP16[431034>>1] = $10;
 $11 = $1;
 $12 = $11&255;
 $13 = $12 & 4;
 $14 = ($13|0)!=(0);
 $15 = $14 ? 32 : 1;
 $16 = $15&255;
 HEAP8[437844>>0] = $16;
 $17 = $1;
 $18 = $17&255;
 $19 = $18 & 8;
 $20 = ($19|0)!=(0);
 $21 = $20 ? 4096 : 0;
 $22 = $21&65535;
 HEAP16[431036>>1] = $22;
 $23 = $1;
 $24 = $23&255;
 $25 = $24 & 16;
 $26 = ($25|0)!=(0);
 $27 = $26 ? 4096 : 0;
 $28 = $27&65535;
 HEAP16[431030>>1] = $28;
 $29 = $1;
 $30 = $29&255;
 $31 = $30 & 32;
 $32 = ($31|0)!=(0);
 $33 = $32&1;
 HEAP8[437836>>0] = $33;
 $34 = $1;
 $35 = $34&255;
 $36 = $35 & 128;
 $37 = ($36|0)!=(0);
 $38 = $37&1;
 HEAP8[437839>>0] = $38;
 $39 = HEAP8[437839>>0]|0;
 $40 = $39&1;
 if ($40) {
  $41 = HEAP8[437852>>0]|0;
  $42 = $41&255;
  $43 = $42 & 128;
  $44 = ($43|0)==(0);
  if ($44) {
   $45 = HEAP8[437840>>0]|0;
   $46 = $45&1;
   if ($46) {
    HEAP8[433216>>0] = 1;
   }
  }
 }
 $47 = HEAP16[431040>>1]|0;
 $48 = $47 << 16 >> 16;
 $49 = ($48|0)==(241);
 if (!($49)) {
  $55 = $1;
  HEAP8[437852>>0] = $55;
  STACKTOP = sp;return;
 }
 $50 = HEAP16[431042>>1]|0;
 $51 = $50&65535;
 $52 = ($51|0)<(2);
 if (!($52)) {
  $55 = $1;
  HEAP8[437852>>0] = $55;
  STACKTOP = sp;return;
 }
 $53 = HEAP8[437839>>0]|0;
 $54 = $53&1;
 if ($54) {
  $55 = $1;
  HEAP8[437852>>0] = $55;
  STACKTOP = sp;return;
 }
 HEAP8[433216>>0] = 0;
 __Z7cpu_NMIb(0);
 $55 = $1;
 HEAP8[437852>>0] = $55;
 STACKTOP = sp;return;
}
function __ZL8Poke2001th($addr,$data) {
 $addr = $addr|0;
 $data = $data|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $addr;
 $1 = $data;
 $2 = $1;
 $3 = $2&255;
 $4 = $3 & 1;
 $5 = ($4|0)!=(0);
 $6 = $5 ? 48 : 63;
 $7 = $6&255;
 HEAP8[437846>>0] = $7;
 $8 = $1;
 $9 = $8&255;
 $10 = $9 & 2;
 $11 = ($10|0)==(0);
 $12 = $11&1;
 HEAP8[437834>>0] = $12;
 $13 = $1;
 $14 = $13&255;
 $15 = $14 & 4;
 $16 = ($15|0)==(0);
 $17 = $16&1;
 HEAP8[437835>>0] = $17;
 $18 = $1;
 $19 = $18&255;
 $20 = $19 & 8;
 $21 = ($20|0)!=(0);
 $22 = $21&1;
 HEAP8[437847>>0] = $22;
 $23 = $1;
 $24 = $23&255;
 $25 = $24 & 16;
 $26 = ($25|0)!=(0);
 $27 = $26&1;
 HEAP8[437848>>0] = $27;
 $28 = $1;
 $29 = $28&255;
 $30 = $29 & 224;
 $31 = $30 << 1;
 $32 = $31&65535;
 HEAP16[431038>>1] = $32;
 $33 = $1;
 HEAP8[437853>>0] = $33;
 STACKTOP = sp;return;
}
function __ZL8Poke2003th($addr,$data) {
 $addr = $addr|0;
 $data = $data|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $addr;
 $1 = $data;
 $2 = $1;
 HEAP8[437842>>0] = $2;
 STACKTOP = sp;return;
}
function __ZL8Poke2005th($addr,$data) {
 $addr = $addr|0;
 $data = $data|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $addr;
 $1 = $data;
 $2 = HEAP8[437833>>0]|0;
 $3 = $2&1;
 $4 = $3 ^ 1;
 $5 = $4&1;
 HEAP8[437833>>0] = $5;
 $6 = HEAP16[431034>>1]|0;
 $7 = $6&65535;
 if ($4) {
  $8 = $7 & 32736;
  $9 = $1;
  $10 = $9&255;
  $11 = $10 >> 3;
  $12 = $11 & 31;
  $13 = $8 | $12;
  $14 = $13&65535;
  HEAP16[431034>>1] = $14;
  $15 = $1;
  $16 = $15&255;
  $17 = $16 & 7;
  $18 = $17&255;
  HEAP8[437843>>0] = $18;
  STACKTOP = sp;return;
 } else {
  $19 = $7 & 3103;
  $20 = $1;
  $21 = $20&255;
  $22 = $21 << 12;
  $23 = $22 & 28672;
  $24 = $19 | $23;
  $25 = $1;
  $26 = $25&255;
  $27 = $26 << 2;
  $28 = $27 & 992;
  $29 = $24 | $28;
  $30 = $29&65535;
  HEAP16[431034>>1] = $30;
  STACKTOP = sp;return;
 }
}
function __ZL8Poke2006th($addr,$data) {
 $addr = $addr|0;
 $data = $data|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $addr;
 $1 = $data;
 $2 = HEAP8[437833>>0]|0;
 $3 = $2&1;
 $4 = $3 ^ 1;
 $5 = $4&1;
 HEAP8[437833>>0] = $5;
 $6 = HEAP16[431034>>1]|0;
 $7 = $6&65535;
 if ($4) {
  $8 = $7 & 255;
  $9 = $1;
  $10 = $9&255;
  $11 = $10 << 8;
  $12 = $11 & 16128;
  $13 = $8 | $12;
  $14 = $13&65535;
  HEAP16[431034>>1] = $14;
  STACKTOP = sp;return;
 } else {
  $15 = $7 & 32512;
  $16 = $1;
  $17 = $16&255;
  $18 = $17 << 0;
  $19 = $18 & 255;
  $20 = $15 | $19;
  $21 = $20&65535;
  HEAP16[431034>>1] = $21;
  $22 = HEAP16[431034>>1]|0;
  HEAP16[431032>>1] = $22;
  $23 = HEAP32[179492>>2]|0;
  $24 = HEAP16[431032>>1]|0;
  FUNCTION_TABLE_vi[$23 & 511]($24);
  STACKTOP = sp;return;
 }
}
function __ZL8Poke2007th($addr,$data) {
 $addr = $addr|0;
 $data = $data|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $addr;
 $1 = $data;
 $2 = HEAP16[431032>>1]|0;
 $3 = $2&65535;
 $4 = $3 & 16383;
 $5 = $4&65535;
 $6 = $1;
 __ZL7PPUPoketh($5,$6);
 $7 = HEAP16[431032>>1]|0;
 $8 = $7&65535;
 $9 = HEAP8[437844>>0]|0;
 $10 = $9&255;
 $11 = (($8) + ($10))|0;
 $12 = $11 & 32767;
 $13 = $12&65535;
 HEAP16[431032>>1] = $13;
 $14 = HEAP32[179492>>2]|0;
 $15 = HEAP16[431032>>1]|0;
 FUNCTION_TABLE_vi[$14 & 511]($15);
 STACKTOP = sp;return;
}
function __ZL7Executev() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $func = 0, $index = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = HEAP16[431040>>1]|0;
 $1 = $0 << 16 >> 16;
 $2 = ($1|0)<(240);
 do {
  if ($2) {
   $3 = HEAP8[437847>>0]|0;
   $4 = $3&1;
   if (!($4)) {
    $5 = HEAP8[437848>>0]|0;
    $6 = $5&1;
    if (!($6)) {
     $18 = HEAP16[431042>>1]|0;
     $19 = $18&65535;
     $20 = ($19|0)<(255);
     if (!($20)) {
      break;
     }
     $21 = HEAP16[431040>>1]|0;
     $22 = $21 << 16 >> 16;
     $23 = ($22|0)>=(0);
     if (!($23)) {
      break;
     }
     $index = 0;
     $24 = HEAP16[431032>>1]|0;
     $25 = $24&65535;
     $26 = $25 & 16128;
     $27 = ($26|0)==(16128);
     if ($27) {
      $28 = HEAP16[431032>>1]|0;
      $29 = $28&65535;
      $30 = $29 & 16383;
      $31 = $30&65535;
      $32 = (__ZL7PPUPeekt($31)|0);
      $33 = $32&255;
      $34 = HEAP8[437846>>0]|0;
      $35 = $34&255;
      $36 = $33 & $35;
      $37 = HEAP16[431038>>1]|0;
      $38 = $37&65535;
      $39 = $36 | $38;
      $40 = (431044 + ($39<<1)|0);
      $41 = HEAP16[$40>>1]|0;
      $index = $41;
     } else {
      $42 = (__ZL7PPUPeekt(16128)|0);
      $43 = $42&255;
      $44 = HEAP8[437846>>0]|0;
      $45 = $44&255;
      $46 = $43 & $45;
      $47 = HEAP16[431038>>1]|0;
      $48 = $47&65535;
      $49 = $46 | $48;
      $50 = (431044 + ($49<<1)|0);
      $51 = HEAP16[$50>>1]|0;
      $index = $51;
     }
     $52 = HEAP16[431042>>1]|0;
     $53 = $52&65535;
     $54 = HEAP16[431040>>1]|0;
     $55 = $54 << 16 >> 16;
     $56 = $55 << 8;
     $57 = $53 | $56;
     $58 = $57&65535;
     $59 = $index;
     __Z14SetIndexBuffertt($58,$59);
     break;
    }
   }
   $7 = HEAP16[431042>>1]|0;
   $8 = $7&65535;
   $9 = (-1)<($8|0);
   if ($9) {
    $10 = HEAP16[431042>>1]|0;
    $11 = $10&65535;
    $12 = ($11|0)<(336);
    if ($12) {
     $13 = HEAP16[431042>>1]|0;
     $14 = $13&65535;
     $15 = (179504 + ($14<<2)|0);
     $16 = HEAP32[$15>>2]|0;
     $func = $16;
     $17 = $func;
     FUNCTION_TABLE_v[$17 & 511]();
    }
   }
  }
 } while(0);
 __Z20MAPTickPPUCylceTimerv();
 $60 = HEAP16[431042>>1]|0;
 $61 = (($60) + 1)<<16>>16;
 HEAP16[431042>>1] = $61;
 $62 = HEAP16[431042>>1]|0;
 $63 = $62&65535;
 $64 = ($63|0)==(341);
 if ($64) {
  HEAP16[431042>>1] = 0;
  $65 = HEAP16[431040>>1]|0;
  $66 = (($65) + 1)<<16>>16;
  HEAP16[431040>>1] = $66;
  $67 = HEAP16[431040>>1]|0;
  $68 = $67 << 16 >> 16;
  $69 = ($68|0)==(241);
  do {
   if ($69) {
    $70 = HEAP8[437850>>0]|0;
    $71 = $70&1;
    if ($71) {
     HEAP8[437850>>0] = 0;
     break;
    } else {
     HEAP8[437840>>0] = 1;
     break;
    }
   }
  } while(0);
  $72 = HEAP16[431040>>1]|0;
  $73 = $72 << 16 >> 16;
  $74 = ($73|0)==(261);
  if ($74) {
   HEAP8[437837>>0] = 0;
   HEAP8[437840>>0] = 0;
   HEAP8[437845>>0] = 0;
   HEAP16[431040>>1] = -1;
   HEAP8[437828>>0] = 1;
  }
 }
 $75 = HEAP16[431040>>1]|0;
 $76 = $75 << 16 >> 16;
 $77 = ($76|0)==(241);
 do {
  if ($77) {
   $78 = HEAP16[431042>>1]|0;
   $79 = $78&65535;
   $80 = ($79|0)==(2);
   if ($80) {
    $81 = HEAP8[437851>>0]|0;
    $82 = $81&1;
    if ($82) {
     HEAP8[437851>>0] = 0;
     break;
    }
    $83 = HEAP8[437839>>0]|0;
    $84 = $83&1;
    if ($84) {
     __Z7cpu_NMIb(1);
    }
   }
  }
 } while(0);
 $85 = HEAP16[431040>>1]|0;
 $86 = $85 << 16 >> 16;
 $87 = ($86|0)==(-1);
 if (!($87)) {
  STACKTOP = sp;return;
 }
 $88 = HEAP16[431042>>1]|0;
 $89 = $88&65535;
 $90 = ($89|0)==(339);
 $91 = HEAP32[180848>>2]|0;
 $92 = ($91|0)==(1);
 $or$cond = $90 & $92;
 if (!($or$cond)) {
  STACKTOP = sp;return;
 }
 $93 = HEAP8[437838>>0]|0;
 $94 = $93&1;
 $95 = $94 ^ 1;
 $96 = $95&1;
 HEAP8[437838>>0] = $96;
 $97 = HEAP8[437838>>0]|0;
 $98 = $97&1;
 if ($98) {
  STACKTOP = sp;return;
 }
 $99 = HEAP8[437847>>0]|0;
 $100 = $99&1;
 if (!($100)) {
  STACKTOP = sp;return;
 }
 $101 = HEAP16[431042>>1]|0;
 $102 = (($101) + 1)<<16>>16;
 HEAP16[431042>>1] = $102;
 STACKTOP = sp;return;
}
function __ZL5resetv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP16[431026>>1] = 0;
 HEAP16[431028>>1] = 0;
 HEAP8[437829>>0] = 0;
 HEAP8[437830>>0] = 0;
 HEAP8[437831>>0] = 0;
 HEAP8[437832>>0] = 0;
 HEAP8[437833>>0] = 0;
 HEAP8[437834>>0] = 0;
 HEAP8[437835>>0] = 0;
 HEAP8[437836>>0] = 0;
 HEAP8[437837>>0] = 0;
 HEAP8[437838>>0] = 0;
 HEAP8[437839>>0] = 0;
 HEAP8[437840>>0] = 0;
 HEAP8[437841>>0] = 0;
 HEAP8[437842>>0] = 0;
 HEAP16[431030>>1] = 0;
 HEAP16[431032>>1] = 0;
 HEAP8[437843>>0] = 0;
 HEAP8[437844>>0] = 1;
 HEAP16[431034>>1] = 0;
 HEAP16[431036>>1] = 0;
 HEAP8[437845>>0] = 0;
 HEAP16[431038>>1] = 0;
 HEAP8[437846>>0] = 0;
 HEAP16[431040>>1] = -1;
 HEAP8[437847>>0] = 0;
 HEAP8[437848>>0] = 0;
 HEAP8[437828>>0] = 0;
 HEAP16[431042>>1] = 0;
 HEAP8[437849>>0] = 0;
 HEAP8[437850>>0] = 0;
 HEAP8[437851>>0] = 0;
 HEAP8[437852>>0] = 0;
 HEAP8[437853>>0] = 0;
 return;
}
function __ZL7PPUPeekt($addr) {
 $addr = $addr|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $addr;
 $2 = $1;
 $3 = $2&65535;
 $4 = ($3|0)<(8192);
 $5 = $1;
 do {
  if ($4) {
   $6 = (__ZL7ChrPeekt($5)|0);
   $0 = $6;
  } else {
   $7 = $5&65535;
   $8 = (8192)<=($7|0);
   if ($8) {
    $9 = $1;
    $10 = $9&65535;
    $11 = ($10|0)<=(12287);
    if ($11) {
     $12 = $1;
     $13 = (__ZL7NmtPeekt($12)|0);
     $0 = $13;
     break;
    }
   }
   $14 = $1;
   $15 = $14&65535;
   $16 = ($15|0)>=(16128);
   if ($16) {
    $17 = $1;
    $18 = (__ZL7PalPeekt($17)|0);
    $0 = $18;
    break;
   } else {
    $0 = 0;
    break;
   }
  }
 } while(0);
 $19 = $0;
 STACKTOP = sp;return ($19|0);
}
function __ZL7ChrPeekt($addr) {
 $addr = $addr|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $data = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $addr;
 $1 = $0;
 $2 = (__Z8VROMPeekt($1)|0);
 $data = $2;
 $3 = $0;
 __Z11MAPChrlatcht($3);
 $4 = $data;
 STACKTOP = sp;return ($4|0);
}
function __ZL7NmtPeekt($addr) {
 $addr = $addr|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $data = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $addr;
 $1 = $0;
 $2 = $1&65535;
 $3 = (($2) - 8192)|0;
 $4 = $3 & 1023;
 $5 = $0;
 $6 = $5&65535;
 $7 = (($6) - 8192)|0;
 $8 = $7 >> 10;
 $9 = $8 & 3;
 $10 = (179476 + ($9<<2)|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($11) + ($4)|0);
 $13 = HEAP8[$12>>0]|0;
 $data = $13;
 $14 = $data;
 STACKTOP = sp;return ($14|0);
}
function __ZL7PalPeekt($addr) {
 $addr = $addr|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $data = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $addr;
 $1 = $0;
 $2 = $1&65535;
 $3 = $2 & 16;
 $4 = ($3|0)!=(0);
 $5 = $0;
 $6 = $5&65535;
 $7 = $6 & 15;
 if ($4) {
  $8 = (437854 + ($7)|0);
  $9 = HEAP8[$8>>0]|0;
  $data = $9;
  $12 = $data;
  STACKTOP = sp;return ($12|0);
 } else {
  $10 = (437870 + ($7)|0);
  $11 = HEAP8[$10>>0]|0;
  $data = $11;
  $12 = $data;
  STACKTOP = sp;return ($12|0);
 }
 return (0)|0;
}
function __ZL7PPUPoketh($addr,$data) {
 $addr = $addr|0;
 $data = $data|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $addr;
 $1 = $data;
 $2 = $0;
 $3 = $2&65535;
 $4 = ($3|0)<(8192);
 $5 = $0;
 if ($4) {
  $6 = $1;
  __ZL7ChrPoketh($5,$6);
  STACKTOP = sp;return;
 }
 $7 = $5&65535;
 $8 = (8192)<=($7|0);
 if ($8) {
  $9 = $0;
  $10 = $9&65535;
  $11 = ($10|0)<=(12287);
  if ($11) {
   $12 = $0;
   $13 = $1;
   __ZL7NmtPoketh($12,$13);
   STACKTOP = sp;return;
  }
 }
 $14 = $0;
 $15 = $14&65535;
 $16 = ($15|0)>=(16128);
 if (!($16)) {
  STACKTOP = sp;return;
 }
 $17 = $0;
 $18 = $1;
 __ZL7PalPoketh($17,$18);
 STACKTOP = sp;return;
}
function __ZL7ChrPoketh($addr,$data) {
 $addr = $addr|0;
 $data = $data|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $addr;
 $1 = $data;
 $2 = $0;
 $3 = $1;
 __Z8VROMPoketh($2,$3);
 STACKTOP = sp;return;
}
function __ZL7NmtPoketh($addr,$data) {
 $addr = $addr|0;
 $data = $data|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $addr;
 $1 = $data;
 $2 = $1;
 $3 = $0;
 $4 = $3&65535;
 $5 = (($4) - 8192)|0;
 $6 = $5 & 1023;
 $7 = $0;
 $8 = $7&65535;
 $9 = (($8) - 8192)|0;
 $10 = $9 >> 10;
 $11 = $10 & 3;
 $12 = (179476 + ($11<<2)|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (($13) + ($6)|0);
 HEAP8[$14>>0] = $2;
 STACKTOP = sp;return;
}
function __ZL7PalPoketh($addr,$data) {
 $addr = $addr|0;
 $data = $data|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $addr;
 $1 = $data;
 $2 = $0;
 $3 = $2&65535;
 $4 = $3 & 15;
 $5 = ($4|0)==(0);
 if (!($5)) {
  $6 = $0;
  $7 = $6&65535;
  $8 = $7 & 15;
  $9 = ($8|0)==(4);
  if (!($9)) {
   $10 = $0;
   $11 = $10&65535;
   $12 = $11 & 15;
   $13 = ($12|0)==(8);
   if (!($13)) {
    $14 = $0;
    $15 = $14&65535;
    $16 = $15 & 15;
    $17 = ($16|0)==(12);
    if (!($17)) {
     $27 = $0;
     $28 = $27&65535;
     $29 = $28 & 16;
     $30 = ($29|0)!=(0);
     $31 = $1;
     $32 = $0;
     $33 = $32&65535;
     $34 = $33 & 15;
     if ($30) {
      $35 = (437854 + ($34)|0);
      HEAP8[$35>>0] = $31;
      STACKTOP = sp;return;
     } else {
      $36 = (437870 + ($34)|0);
      HEAP8[$36>>0] = $31;
      STACKTOP = sp;return;
     }
    }
   }
  }
 }
 $18 = $1;
 $19 = $0;
 $20 = $19&65535;
 $21 = $20 & 15;
 $22 = (437870 + ($21)|0);
 HEAP8[$22>>0] = $18;
 $23 = $0;
 $24 = $23&65535;
 $25 = $24 & 15;
 $26 = (437854 + ($25)|0);
 HEAP8[$26>>0] = $18;
 STACKTOP = sp;return;
}
function __ZL12MergeObjBitstbb($index,$object0,$infront) {
 $index = $index|0;
 $object0 = $object0|0;
 $infront = $infront|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $i = 0, $pixel = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $index;
 $3 = $object0&1;
 $1 = $3;
 $4 = $infront&1;
 $2 = $4;
 $5 = $0;
 $6 = $5&65535;
 $7 = ($6|0)==(255);
 if ($7) {
  STACKTOP = sp;return;
 }
 $i = 0;
 while(1) {
  $8 = $i;
  $9 = $8&65535;
  $10 = ($9|0)<(8);
  if (!($10)) {
   label = 9;
   break;
  }
  $11 = $0;
  $12 = $11&65535;
  $13 = ($12|0)>(255);
  if ($13) {
   label = 9;
   break;
  }
  $14 = HEAP8[437829>>0]|0;
  $15 = $14&255;
  $16 = 16144 | $15;
  $17 = HEAP8[437830>>0]|0;
  $18 = $17&255;
  $19 = $18 >> 7;
  $20 = $19 & 1;
  $21 = $16 | $20;
  $22 = HEAP8[437831>>0]|0;
  $23 = $22&255;
  $24 = $23 >> 6;
  $25 = $24 & 2;
  $26 = $21 | $25;
  $27 = $1;
  $28 = $27&1;
  $29 = $28 ? 16384 : 0;
  $30 = $26 | $29;
  $31 = $2;
  $32 = $31&1;
  $33 = $32 ? 32768 : 0;
  $34 = $30 | $33;
  $35 = $34&65535;
  $pixel = $35;
  $36 = $0;
  $37 = $36&65535;
  $38 = (432068 + ($37<<1)|0);
  $39 = HEAP16[$38>>1]|0;
  $40 = $39&65535;
  $41 = $40 & 3;
  $42 = ($41|0)==(0);
  if ($42) {
   $43 = $pixel;
   $44 = $43&65535;
   $45 = $44 & 3;
   $46 = ($45|0)!=(0);
   if ($46) {
    $47 = $pixel;
    $48 = $0;
    $49 = $48&65535;
    $50 = (432068 + ($49<<1)|0);
    HEAP16[$50>>1] = $47;
   }
  }
  $51 = HEAP8[437830>>0]|0;
  $52 = $51&255;
  $53 = $52 << 1;
  $54 = $53&255;
  HEAP8[437830>>0] = $54;
  $55 = HEAP8[437831>>0]|0;
  $56 = $55&255;
  $57 = $56 << 1;
  $58 = $57&255;
  HEAP8[437831>>0] = $58;
  $59 = $i;
  $60 = (($59) + 1)<<16>>16;
  $i = $60;
  $61 = $0;
  $62 = (($61) + 1)<<16>>16;
  $0 = $62;
 }
 if ((label|0) == 9) {
  STACKTOP = sp;return;
 }
}
function __ZL13EvaluateResetv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[437832>>0] = -1;
 return;
}
function __ZL14EvaluatePhase0v() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP16[431042>>1]|0;
 $1 = $0&65535;
 $2 = ($1|0)<=(64);
 if (!($2)) {
  return;
 }
 $3 = HEAP16[431042>>1]|0;
 $4 = $3&65535;
 $5 = $4 >> 1;
 $6 = $5 & 3;
 switch ($6|0) {
 case 0:  {
  $7 = HEAP16[431042>>1]|0;
  $8 = $7&65535;
  $9 = $8 >> 3;
  $10 = (438142 + (($9*5)|0)|0);
  HEAP8[$10>>0] = -1;
  return;
  break;
 }
 case 1:  {
  $11 = HEAP16[431042>>1]|0;
  $12 = $11&65535;
  $13 = $12 >> 3;
  $14 = (438142 + (($13*5)|0)|0);
  $15 = ((($14)) + 1|0);
  HEAP8[$15>>0] = -1;
  return;
  break;
 }
 case 2:  {
  $16 = HEAP16[431042>>1]|0;
  $17 = $16&65535;
  $18 = $17 >> 3;
  $19 = (438142 + (($18*5)|0)|0);
  $20 = ((($19)) + 2|0);
  HEAP8[$20>>0] = -1;
  return;
  break;
 }
 case 3:  {
  $21 = HEAP16[431042>>1]|0;
  $22 = $21&65535;
  $23 = $22 >> 3;
  $24 = (438142 + (($23*5)|0)|0);
  $25 = ((($24)) + 3|0);
  HEAP8[$25>>0] = -1;
  return;
  break;
 }
 default: {
  return;
 }
 }
}
function __ZL13EvaluateFetchv() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[437842>>0]|0;
 $1 = $0&255;
 $2 = (437886 + ($1)|0);
 $3 = HEAP8[$2>>0]|0;
 HEAP8[437832>>0] = $3;
 return;
}
function __ZL14EvaluatePhase1v() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $comparator = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = HEAP16[431040>>1]|0;
 $1 = $0 << 16 >> 16;
 $2 = ($1|0)==(-1);
 if ($2) {
  STACKTOP = sp;return;
 }
 $3 = HEAP8[437849>>0]|0;
 $4 = (($3) + 1)<<24>>24;
 HEAP8[437849>>0] = $4;
 $5 = HEAP16[431040>>1]|0;
 $6 = $5 << 16 >> 16;
 $7 = HEAP8[437832>>0]|0;
 $8 = $7&255;
 $9 = (($6) - ($8))|0;
 $10 = $9&65535;
 $comparator = $10;
 $11 = $comparator;
 $12 = $11&65535;
 $13 = HEAP8[437836>>0]|0;
 $14 = $13&1;
 $15 = $14 ? 16 : 8;
 $16 = ($12|0)>=($15|0);
 if (!($16)) {
  $28 = HEAP8[437842>>0]|0;
  $29 = (($28) + 1)<<24>>24;
  HEAP8[437842>>0] = $29;
  HEAP32[179500>>2] = 361;
  $30 = HEAP8[437832>>0]|0;
  $31 = HEAP8[438438>>0]|0;
  $32 = $31&255;
  $33 = (438142 + (($32*5)|0)|0);
  HEAP8[$33>>0] = $30;
  $34 = HEAP8[437849>>0]|0;
  $35 = $34&255;
  $36 = ($35|0)==(1);
  $37 = HEAP8[438438>>0]|0;
  $38 = $37&255;
  $39 = (438142 + (($38*5)|0)|0);
  $40 = ((($39)) + 4|0);
  $41 = $36&1;
  HEAP8[$40>>0] = $41;
  STACKTOP = sp;return;
 }
 $17 = HEAP8[437849>>0]|0;
 $18 = $17&255;
 $19 = ($18|0)!=(64);
 if (!($19)) {
  HEAP8[437842>>0] = 0;
  HEAP32[179500>>2] = 360;
  STACKTOP = sp;return;
 }
 $20 = HEAP8[437849>>0]|0;
 $21 = $20&255;
 $22 = ($21|0)!=(2);
 if ($22) {
  $23 = HEAP8[437842>>0]|0;
  $24 = $23&255;
  $25 = (($24) + 4)|0;
  $27 = $25;
 } else {
  $27 = 8;
 }
 $26 = $27&255;
 HEAP8[437842>>0] = $26;
 STACKTOP = sp;return;
}
function __ZL14EvaluatePhase9v() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[437842>>0]|0;
 $1 = $0&255;
 $2 = (($1) + 4)|0;
 $3 = $2&255;
 HEAP8[437842>>0] = $3;
 return;
}
function __ZL14EvaluatePhase2v() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[437842>>0]|0;
 $1 = (($0) + 1)<<24>>24;
 HEAP8[437842>>0] = $1;
 HEAP32[179500>>2] = 362;
 $2 = HEAP8[437832>>0]|0;
 $3 = HEAP8[438438>>0]|0;
 $4 = $3&255;
 $5 = (438142 + (($4*5)|0)|0);
 $6 = ((($5)) + 1|0);
 HEAP8[$6>>0] = $2;
 return;
}
function __ZL14EvaluatePhase3v() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[437842>>0]|0;
 $1 = (($0) + 1)<<24>>24;
 HEAP8[437842>>0] = $1;
 HEAP32[179500>>2] = 363;
 $2 = HEAP8[437832>>0]|0;
 $3 = HEAP8[438438>>0]|0;
 $4 = $3&255;
 $5 = (438142 + (($4*5)|0)|0);
 $6 = ((($5)) + 2|0);
 HEAP8[$6>>0] = $2;
 return;
}
function __ZL14EvaluatePhase4v() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_ZL14EvaluatePhase1v$_ZL14EvaluatePhase5v = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[437832>>0]|0;
 $1 = HEAP8[438438>>0]|0;
 $2 = $1&255;
 $3 = (438142 + (($2*5)|0)|0);
 $4 = ((($3)) + 3|0);
 HEAP8[$4>>0] = $0;
 $5 = HEAP8[438438>>0]|0;
 $6 = (($5) + 1)<<24>>24;
 HEAP8[438438>>0] = $6;
 $7 = HEAP8[437849>>0]|0;
 $8 = $7&255;
 $9 = ($8|0)!=(64);
 if (!($9)) {
  HEAP8[437842>>0] = 0;
  HEAP32[179500>>2] = 360;
  return;
 }
 $10 = HEAP8[438438>>0]|0;
 $11 = $10&255;
 $12 = ($11|0)!=(8);
 $_ZL14EvaluatePhase1v$_ZL14EvaluatePhase5v = $12 ? 357 : 364;
 HEAP32[179500>>2] = $_ZL14EvaluatePhase1v$_ZL14EvaluatePhase5v;
 $13 = HEAP8[437849>>0]|0;
 $14 = $13&255;
 $15 = ($14|0)!=(2);
 if ($15) {
  $16 = HEAP8[437842>>0]|0;
  $17 = (($16) + 1)<<24>>24;
  HEAP8[437842>>0] = $17;
  return;
 } else {
  HEAP8[437842>>0] = 8;
  return;
 }
}
function __ZL14EvaluatePhase5v() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $comparator = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = HEAP16[431040>>1]|0;
 $1 = $0 << 16 >> 16;
 $2 = ($1|0)==(-1);
 if ($2) {
  STACKTOP = sp;return;
 }
 $3 = HEAP16[431040>>1]|0;
 $4 = $3 << 16 >> 16;
 $5 = HEAP8[437832>>0]|0;
 $6 = $5&255;
 $7 = (($4) - ($6))|0;
 $8 = $7&65535;
 $comparator = $8;
 $9 = $comparator;
 $10 = $9&65535;
 $11 = HEAP8[437836>>0]|0;
 $12 = $11&1;
 $13 = $12 ? 16 : 8;
 $14 = ($10|0)>=($13|0);
 if (!($14)) {
  HEAP32[179500>>2] = 365;
  $32 = HEAP8[437842>>0]|0;
  $33 = $32&255;
  $34 = (($33) + 1)|0;
  $35 = $34&255;
  HEAP8[437842>>0] = $35;
  HEAP8[437845>>0] = 1;
  STACKTOP = sp;return;
 }
 $15 = HEAP8[437842>>0]|0;
 $16 = $15&255;
 $17 = (($16) + 4)|0;
 $18 = $17 & 252;
 $19 = HEAP8[437842>>0]|0;
 $20 = $19&255;
 $21 = (($20) + 1)|0;
 $22 = $21 & 3;
 $23 = (($18) + ($22))|0;
 $24 = $23&255;
 HEAP8[437842>>0] = $24;
 $25 = HEAP8[437842>>0]|0;
 $26 = $25&255;
 $27 = ($26|0)<=(5);
 if (!($27)) {
  STACKTOP = sp;return;
 }
 HEAP32[179500>>2] = 360;
 $28 = HEAP8[437842>>0]|0;
 $29 = $28&255;
 $30 = $29 & 252;
 $31 = $30&255;
 HEAP8[437842>>0] = $31;
 STACKTOP = sp;return;
}
function __ZL14EvaluatePhase6v() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[179500>>2] = 366;
 $0 = HEAP8[437842>>0]|0;
 $1 = $0&255;
 $2 = (($1) + 1)|0;
 $3 = $2&255;
 HEAP8[437842>>0] = $3;
 return;
}
function __ZL14EvaluatePhase7v() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[179500>>2] = 367;
 $0 = HEAP8[437842>>0]|0;
 $1 = $0&255;
 $2 = (($1) + 1)|0;
 $3 = $2&255;
 HEAP8[437842>>0] = $3;
 return;
}
function __ZL14EvaluatePhase8v() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[179500>>2] = 360;
 $0 = HEAP8[437842>>0]|0;
 $1 = $0&255;
 $2 = (($1) + 1)|0;
 $3 = $2&255;
 HEAP8[437842>>0] = $3;
 $4 = HEAP8[437842>>0]|0;
 $5 = $4&255;
 $6 = $5 & 3;
 $7 = ($6|0)==(3);
 if ($7) {
  $8 = HEAP8[437842>>0]|0;
  $9 = $8&255;
  $10 = (($9) + 1)|0;
  $11 = $10&255;
  HEAP8[437842>>0] = $11;
 }
 $12 = HEAP8[437842>>0]|0;
 $13 = $12&255;
 $14 = $13 & 252;
 $15 = $14&255;
 HEAP8[437842>>0] = $15;
 return;
}
function __ZL12MergeBkgBitst($index) {
 $index = $index|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $index;
 $i = 0;
 while(1) {
  $1 = $i;
  $2 = $1&65535;
  $3 = ($2|0)<(8);
  if (!($3)) {
   break;
  }
  $4 = HEAP8[437829>>0]|0;
  $5 = $4&255;
  $6 = 16128 | $5;
  $7 = HEAP8[437830>>0]|0;
  $8 = $7&255;
  $9 = $8 >> 7;
  $10 = $9 & 1;
  $11 = $6 | $10;
  $12 = HEAP8[437831>>0]|0;
  $13 = $12&255;
  $14 = $13 >> 6;
  $15 = $14 & 2;
  $16 = $11 | $15;
  $17 = $16&65535;
  $18 = $0;
  $19 = (($18) + 1)<<16>>16;
  $0 = $19;
  $20 = $18&65535;
  $21 = (432580 + ($20<<1)|0);
  HEAP16[$21>>1] = $17;
  $22 = HEAP8[437830>>0]|0;
  $23 = $22&255;
  $24 = $23 << 1;
  $25 = $24&255;
  HEAP8[437830>>0] = $25;
  $26 = HEAP8[437831>>0]|0;
  $27 = $26&255;
  $28 = $27 << 1;
  $29 = $28&255;
  HEAP8[437831>>0] = $29;
  $30 = $i;
  $31 = (($30) + 1)<<16>>16;
  $i = $31;
 }
 STACKTOP = sp;return;
}
function __ZL20_AddressLineUpdatingt($addr) {
 $addr = $addr|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $addr;
 STACKTOP = sp;return;
}
function __Z10PADSubSynch($no) {
 $no = $no|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $KeyBit = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $no;
 $KeyBit = 0;
 $i = 0;
 while(1) {
  $1 = $i;
  $2 = ($1|0)<(8);
  if (!($2)) {
   break;
  }
  $3 = $i;
  $4 = $0;
  $5 = $4&255;
  $6 = (438440 + ($5<<3)|0);
  $7 = (($6) + ($3)|0);
  $8 = HEAP8[$7>>0]|0;
  $9 = ($8<<24>>24)!=(0);
  if ($9) {
   $10 = $i;
   $11 = 1 << $10;
   $12 = $KeyBit;
   $13 = $12&255;
   $14 = $13 | $11;
   $15 = $14&255;
   $KeyBit = $15;
  }
  $16 = $i;
  $17 = (($16) + 1)|0;
  $i = $17;
 }
 $18 = $KeyBit;
 $19 = $18&255;
 $20 = $19 & 255;
 $21 = $20&255;
 STACKTOP = sp;return ($21|0);
}
function __Z14SetIndexBuffertt($pixel,$index) {
 $pixel = $pixel|0;
 $index = $index|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $color = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pixel;
 $1 = $index;
 $2 = $1;
 $3 = (__Z15GetPaletteColort($2)|0);
 $color = $3;
 $4 = $color;
 $5 = $0;
 $6 = $5&65535;
 $7 = (180852 + ($6<<2)|0);
 HEAP32[$7>>2] = $4;
 STACKTOP = sp;return;
}
function __Z4Flipv() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = HEAP32[426616>>2]|0;
 (_SDL_LockSurface(($0|0))|0);
 $i = 0;
 while(1) {
  $1 = $i;
  $2 = ($1|0)<(61440);
  if (!($2)) {
   break;
  }
  $3 = $i;
  $4 = $3&65535;
  $5 = $i;
  $6 = (180852 + ($5<<2)|0);
  $7 = HEAP32[$6>>2]|0;
  __ZL14SetColorBuffertm($4,$7);
  $8 = $i;
  $9 = (($8) + 1)|0;
  $i = $9;
 }
 $10 = HEAP32[426616>>2]|0;
 _SDL_UnlockSurface(($10|0));
 $11 = HEAP32[426616>>2]|0;
 (_SDL_Flip(($11|0))|0);
 $12 = HEAP32[426612>>2]|0;
 $13 = (($12) + 1)|0;
 HEAP32[426612>>2] = $13;
 STACKTOP = sp;return;
}
function __Z14APUPlaySamplesPvl($samples,$count) {
 $samples = $samples|0;
 $count = $count|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $samples;
 $1 = $count;
 $2 = HEAP32[426620>>2]|0;
 $3 = $0;
 $4 = $1;
 __ZN11Sound_Queue5writeEPKsi($2,$3,$4);
 STACKTOP = sp;return;
}
function _main_loop() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $7 = 0, $8 = 0, $9 = 0, $dt_cc = 0, $dt_ms = 0.0, $event = 0, $new_cc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $event = sp + 24|0;
 $new_cc = sp + 16|0;
 $dt_cc = sp + 8|0;
 while(1) {
  $2 = (_SDL_PollEvent(($event|0))|0);
  $3 = ($2|0)!=(0);
  if (!($3)) {
   break;
  }
  __ZL14HandleKeyInputP9SDL_Event($event);
 }
 $4 = HEAP32[$event>>2]|0;
 $5 = ($4|0)==(256);
 if ($5) {
  HEAP32[426624>>2] = 1;
  STACKTOP = sp;return;
 }
 $6 = HEAP8[560>>0]|0;
 $7 = ($6<<24>>24)==(0);
 do {
  if ($7) {
   $8 = (___cxa_guard_acquire((560|0))|0);
   $9 = ($8|0)!=(0);
   if ($9) {
    __THREW__ = 0;
    $10 = (invoke_i(368)|0);
    $11 = tempRet0;
    $12 = __THREW__; __THREW__ = 0;
    $13 = $12&1;
    if ($13) {
     $52 = ___cxa_find_matching_catch()|0;
     $53 = tempRet0;
     $0 = $52;
     $1 = $53;
     ___cxa_guard_abort((560|0));
     $54 = $0;
     $55 = $1;
     ___resumeException($54|0);
     // unreachable;
    } else {
     $14 = 568;
     $15 = $14;
     HEAP32[$15>>2] = $10;
     $16 = (($14) + 4)|0;
     $17 = $16;
     HEAP32[$17>>2] = $11;
     ___cxa_guard_release((560|0));
     break;
    }
   }
  }
 } while(0);
 $18 = (__ZL12PerfGetTicksv()|0);
 $19 = tempRet0;
 $20 = $new_cc;
 $21 = $20;
 HEAP32[$21>>2] = $18;
 $22 = (($20) + 4)|0;
 $23 = $22;
 HEAP32[$23>>2] = $19;
 $24 = $new_cc;
 $25 = $24;
 $26 = HEAP32[$25>>2]|0;
 $27 = (($24) + 4)|0;
 $28 = $27;
 $29 = HEAP32[$28>>2]|0;
 $30 = 568;
 $31 = $30;
 $32 = HEAP32[$31>>2]|0;
 $33 = (($30) + 4)|0;
 $34 = $33;
 $35 = HEAP32[$34>>2]|0;
 $36 = (_i64Subtract(($26|0),($29|0),($32|0),($35|0))|0);
 $37 = tempRet0;
 $38 = $dt_cc;
 $39 = $38;
 HEAP32[$39>>2] = $36;
 $40 = (($38) + 4)|0;
 $41 = $40;
 HEAP32[$41>>2] = $37;
 $42 = $dt_cc;
 $43 = $42;
 $44 = HEAP32[$43>>2]|0;
 $45 = (($42) + 4)|0;
 $46 = $45;
 $47 = HEAP32[$46>>2]|0;
 $48 = (+__ZL19PerfGetMillisecondsx($44,$47));
 $dt_ms = $48;
 $49 = +HEAPF64[576>>3];
 $50 = $dt_ms;
 $51 = $49 < $50;
 if ($51) {
  __ZL6drawItv();
  STACKTOP = sp;return;
 } else {
  $56 = $dt_ms;
  $57 = +HEAPF64[576>>3];
  $58 = $57 - $56;
  HEAPF64[576>>3] = $58;
  $59 = $new_cc;
  $60 = $59;
  $61 = HEAP32[$60>>2]|0;
  $62 = (($59) + 4)|0;
  $63 = $62;
  $64 = HEAP32[$63>>2]|0;
  $65 = 568;
  $66 = $65;
  HEAP32[$66>>2] = $61;
  $67 = (($65) + 4)|0;
  $68 = $67;
  HEAP32[$68>>2] = $64;
  STACKTOP = sp;return;
 }
}
function _main($argc,$argv) {
 $argc = $argc|0;
 $argv = $argv|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = 0;
 $1 = $argc;
 $2 = $argv;
 (_SDL_Init(48)|0);
 $3 = HEAP32[426628>>2]|0;
 $4 = HEAP32[426632>>2]|0;
 $5 = (_SDL_SetVideoMode(($3|0),($4|0),32,0)|0);
 HEAP32[426616>>2] = $5;
 __ZL10init_soundv();
 $6 = $2;
 $7 = ((($6)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 __ZL4initPKc($8);
 _emscripten_set_main_loop((369|0),0,1);
 STACKTOP = sp;return 0;
}
function __ZL12PerfGetTicksv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_SDL_GetTicks()|0);
 tempRet0 = (0);
 return ($0|0);
}
function __ZL19PerfGetMillisecondsx($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = sp;
 $3 = $2;
 $4 = $3;
 HEAP32[$4>>2] = $0;
 $5 = (($3) + 4)|0;
 $6 = $5;
 HEAP32[$6>>2] = $1;
 $7 = $2;
 $8 = $7;
 $9 = HEAP32[$8>>2]|0;
 $10 = (($7) + 4)|0;
 $11 = $10;
 $12 = HEAP32[$11>>2]|0;
 $13 = (+($9>>>0)) + (4294967296.0*(+($12|0)));
 STACKTOP = sp;return (+$13);
}
function __ZL14SetColorBuffertm($pixel,$color) {
 $pixel = $pixel|0;
 $color = $color|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ColorBuffer = 0, $newX = 0;
 var $newY = 0, $x = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $pixel;
 $1 = $color;
 $2 = $0;
 $3 = $2&65535;
 $4 = HEAP32[426636>>2]|0;
 $5 = (($3|0) % ($4|0))&-1;
 $x = $5;
 $6 = $0;
 $7 = $6&65535;
 $8 = HEAP32[426636>>2]|0;
 $9 = (($7|0) / ($8|0))&-1;
 $y = $9;
 $10 = $x;
 $11 = HEAP32[426628>>2]|0;
 $12 = Math_imul($10, $11)|0;
 $13 = HEAP32[426636>>2]|0;
 $14 = (($12|0) / ($13|0))&-1;
 $newX = $14;
 $15 = $y;
 $16 = HEAP32[426632>>2]|0;
 $17 = Math_imul($15, $16)|0;
 $18 = HEAP32[426640>>2]|0;
 $19 = (($17|0) / ($18|0))&-1;
 $newY = $19;
 $20 = $newY;
 $21 = HEAP32[426628>>2]|0;
 $22 = Math_imul($20, $21)|0;
 $23 = $newX;
 $24 = (($22) + ($23))|0;
 $25 = $24&65535;
 $0 = $25;
 $26 = (__ZL15GetScreenPixelsv()|0);
 $ColorBuffer = $26;
 $27 = $1;
 $28 = $27 >>> 16;
 $29 = $28 & 255;
 $30 = $29&255;
 $31 = $0;
 $32 = $31&65535;
 $33 = $ColorBuffer;
 $34 = (($33) + ($32<<2)|0);
 HEAP8[$34>>0] = $30;
 $35 = $1;
 $36 = $35 >>> 8;
 $37 = $36 & 255;
 $38 = $37&255;
 $39 = $0;
 $40 = $39&65535;
 $41 = $ColorBuffer;
 $42 = (($41) + ($40<<2)|0);
 $43 = ((($42)) + 1|0);
 HEAP8[$43>>0] = $38;
 $44 = $1;
 $45 = $44 >>> 0;
 $46 = $45 & 255;
 $47 = $46&255;
 $48 = $0;
 $49 = $48&65535;
 $50 = $ColorBuffer;
 $51 = (($50) + ($49<<2)|0);
 $52 = ((($51)) + 2|0);
 HEAP8[$52>>0] = $47;
 $53 = $0;
 $54 = $53&65535;
 $55 = $ColorBuffer;
 $56 = (($55) + ($54<<2)|0);
 $57 = ((($56)) + 3|0);
 HEAP8[$57>>0] = -1;
 STACKTOP = sp;return;
}
function __ZL14HandleKeyInputP9SDL_Event($event) {
 $event = $event|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $event;
 $1 = $0;
 $2 = ((($1)) + 12|0);
 $3 = ((($2)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 L1: do {
  switch ($4|0) {
  case 120:  {
   $5 = $0;
   $6 = HEAP32[$5>>2]|0;
   $7 = ($6|0)==(768);
   if ($7) {
    HEAP8[438440>>0] = 1;
    break L1;
   }
   $8 = $0;
   $9 = HEAP32[$8>>2]|0;
   $10 = ($9|0)==(769);
   if ($10) {
    HEAP8[438440>>0] = 0;
   }
   break;
  }
  case 122:  {
   $11 = $0;
   $12 = HEAP32[$11>>2]|0;
   $13 = ($12|0)==(768);
   if ($13) {
    HEAP8[(438441)>>0] = 1;
    break L1;
   }
   $14 = $0;
   $15 = HEAP32[$14>>2]|0;
   $16 = ($15|0)==(769);
   if ($16) {
    HEAP8[(438441)>>0] = 0;
   }
   break;
  }
  case 8:  {
   $17 = $0;
   $18 = HEAP32[$17>>2]|0;
   $19 = ($18|0)==(768);
   if ($19) {
    HEAP8[(438442)>>0] = 1;
    break L1;
   }
   $20 = $0;
   $21 = HEAP32[$20>>2]|0;
   $22 = ($21|0)==(769);
   if ($22) {
    HEAP8[(438442)>>0] = 0;
   }
   break;
  }
  case 13:  {
   $23 = $0;
   $24 = HEAP32[$23>>2]|0;
   $25 = ($24|0)==(768);
   if ($25) {
    HEAP8[(438443)>>0] = 1;
    break L1;
   }
   $26 = $0;
   $27 = HEAP32[$26>>2]|0;
   $28 = ($27|0)==(769);
   if ($28) {
    HEAP8[(438443)>>0] = 0;
   }
   break;
  }
  case 1106:  {
   $29 = $0;
   $30 = HEAP32[$29>>2]|0;
   $31 = ($30|0)==(768);
   if ($31) {
    HEAP8[(438444)>>0] = 1;
    break L1;
   }
   $32 = $0;
   $33 = HEAP32[$32>>2]|0;
   $34 = ($33|0)==(769);
   if ($34) {
    HEAP8[(438444)>>0] = 0;
   }
   break;
  }
  case 1105:  {
   $35 = $0;
   $36 = HEAP32[$35>>2]|0;
   $37 = ($36|0)==(768);
   if ($37) {
    HEAP8[(438445)>>0] = 1;
    break L1;
   }
   $38 = $0;
   $39 = HEAP32[$38>>2]|0;
   $40 = ($39|0)==(769);
   if ($40) {
    HEAP8[(438445)>>0] = 0;
   }
   break;
  }
  case 1104:  {
   $41 = $0;
   $42 = HEAP32[$41>>2]|0;
   $43 = ($42|0)==(768);
   if ($43) {
    HEAP8[(438446)>>0] = 1;
    break L1;
   }
   $44 = $0;
   $45 = HEAP32[$44>>2]|0;
   $46 = ($45|0)==(769);
   if ($46) {
    HEAP8[(438446)>>0] = 0;
   }
   break;
  }
  case 1103:  {
   $47 = $0;
   $48 = HEAP32[$47>>2]|0;
   $49 = ($48|0)==(768);
   if ($49) {
    HEAP8[(438447)>>0] = 1;
    break L1;
   }
   $50 = $0;
   $51 = HEAP32[$50>>2]|0;
   $52 = ($51|0)==(769);
   if ($52) {
    HEAP8[(438447)>>0] = 0;
   }
   break;
  }
  case 113:  {
   $53 = $0;
   $54 = HEAP32[$53>>2]|0;
   $55 = ($54|0)==(768);
   if ($55) {
    HEAP8[(438448)>>0] = 1;
    break L1;
   }
   $56 = $0;
   $57 = HEAP32[$56>>2]|0;
   $58 = ($57|0)==(769);
   if ($58) {
    HEAP8[(438448)>>0] = 0;
   }
   break;
  }
  case 119:  {
   $59 = $0;
   $60 = HEAP32[$59>>2]|0;
   $61 = ($60|0)==(768);
   if ($61) {
    HEAP8[(438449)>>0] = 1;
    break L1;
   }
   $62 = $0;
   $63 = HEAP32[$62>>2]|0;
   $64 = ($63|0)==(769);
   if ($64) {
    HEAP8[(438449)>>0] = 0;
   }
   break;
  }
  case 97:  {
   $65 = $0;
   $66 = HEAP32[$65>>2]|0;
   $67 = ($66|0)==(768);
   if ($67) {
    HEAP8[(438450)>>0] = 1;
    break L1;
   }
   $68 = $0;
   $69 = HEAP32[$68>>2]|0;
   $70 = ($69|0)==(769);
   if ($70) {
    HEAP8[(438450)>>0] = 0;
   }
   break;
  }
  case 115:  {
   $71 = $0;
   $72 = HEAP32[$71>>2]|0;
   $73 = ($72|0)==(768);
   if ($73) {
    HEAP8[(438451)>>0] = 1;
    break L1;
   }
   $74 = $0;
   $75 = HEAP32[$74>>2]|0;
   $76 = ($75|0)==(769);
   if ($76) {
    HEAP8[(438451)>>0] = 0;
   }
   break;
  }
  case 105:  {
   $77 = $0;
   $78 = HEAP32[$77>>2]|0;
   $79 = ($78|0)==(768);
   if ($79) {
    HEAP8[(438452)>>0] = 1;
    break L1;
   }
   $80 = $0;
   $81 = HEAP32[$80>>2]|0;
   $82 = ($81|0)==(769);
   if ($82) {
    HEAP8[(438452)>>0] = 0;
   }
   break;
  }
  case 107:  {
   $83 = $0;
   $84 = HEAP32[$83>>2]|0;
   $85 = ($84|0)==(768);
   if ($85) {
    HEAP8[(438453)>>0] = 1;
    break L1;
   }
   $86 = $0;
   $87 = HEAP32[$86>>2]|0;
   $88 = ($87|0)==(769);
   if ($88) {
    HEAP8[(438453)>>0] = 0;
   }
   break;
  }
  case 106:  {
   $89 = $0;
   $90 = HEAP32[$89>>2]|0;
   $91 = ($90|0)==(768);
   if ($91) {
    HEAP8[(438454)>>0] = 1;
    break L1;
   }
   $92 = $0;
   $93 = HEAP32[$92>>2]|0;
   $94 = ($93|0)==(769);
   if ($94) {
    HEAP8[(438454)>>0] = 0;
   }
   break;
  }
  case 108:  {
   $95 = $0;
   $96 = HEAP32[$95>>2]|0;
   $97 = ($96|0)==(768);
   if ($97) {
    HEAP8[(438455)>>0] = 1;
    break L1;
   }
   $98 = $0;
   $99 = HEAP32[$98>>2]|0;
   $100 = ($99|0)==(769);
   if ($100) {
    HEAP8[(438455)>>0] = 0;
   }
   break;
  }
  case 27:  {
   HEAP32[426624>>2] = 1;
   break;
  }
  case 32:  {
   $101 = $0;
   $102 = HEAP32[$101>>2]|0;
   $103 = ($102|0)==(768);
   if ($103) {
    _SDL_PauseAudio(1);
    _SDL_PauseAudio(0);
   }
   break;
  }
  case 98:  {
   HEAP8[438439>>0] = 1;
   break;
  }
  default: {
  }
  }
 } while(0);
 STACKTOP = sp;return;
}
function __ZL6drawItv() {
 var $0 = 0, $1 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__Z13RunOneFrameCCl(29780)|0);
 $1 = (+($0>>>0));
 $2 = $1 * 1.862434E-4;
 $3 = +HEAPF64[576>>3];
 $4 = $3 + $2;
 HEAPF64[576>>3] = $4;
 return;
}
function __ZL10init_soundv() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = (_SDL_Init(16)|0);
 $3 = ($2|0)<(0);
 if ($3) {
  _exit(1);
  // unreachable;
 }
 (_atexit((370|0))|0);
 $4 = (__Znwj(24)|0);
 __THREW__ = 0;
 invoke_vi(371,($4|0));
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if ($6) {
  $9 = ___cxa_find_matching_catch()|0;
  $10 = tempRet0;
  $0 = $9;
  $1 = $10;
  __ZdlPv($4);
  $11 = $0;
  $12 = $1;
  ___resumeException($11|0);
  // unreachable;
 }
 HEAP32[426620>>2] = $4;
 $7 = HEAP32[426620>>2]|0;
 $8 = ($7|0)!=(0|0);
 if (!($8)) {
  _exit(1);
  // unreachable;
 }
 $13 = HEAP32[426620>>2]|0;
 $14 = (__ZN11Sound_Queue4initEli($13,44100,1)|0);
 $15 = ($14|0)!=(0|0);
 if ($15) {
  _exit(1);
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function __ZL4initPKc($name) {
 $name = $name|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $dwSize = 0, $fp = 0, $pBuffer = 0;
 var $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $name;
 $fp = 0;
 $1 = (_fopen(438472,438480)|0);
 $fp = $1;
 $2 = $fp;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  (_printf(438483,$vararg_buffer)|0);
  STACKTOP = sp;return;
 }
 $pBuffer = 0;
 $4 = $fp;
 (_fseek($4,0,2)|0);
 $5 = $fp;
 $6 = (_ftell($5)|0);
 $dwSize = $6;
 $7 = $dwSize;
 $8 = ($7>>>0)<(17);
 if ($8) {
  STACKTOP = sp;return;
 }
 $9 = $fp;
 (_fseek($9,0,0)|0);
 $10 = $dwSize;
 $11 = (_malloc($10)|0);
 $pBuffer = $11;
 $12 = $pBuffer;
 $13 = $dwSize;
 $14 = $fp;
 (_fread($12,$13,1,$14)|0);
 $15 = $fp;
 (_fclose($15)|0);
 $16 = $pBuffer;
 __Z8LoadCartPKh($16);
 __Z8NESResetv();
 STACKTOP = sp;return;
}
function __ZL15GetScreenPixelsv() {
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[426616>>2]|0;
 $1 = ((($0)) + 20|0);
 $2 = HEAP32[$1>>2]|0;
 return ($2|0);
}
function __Z9SetMapperh($mapper) {
 $mapper = $mapper|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = $mapper;
 $1 = $0;
 $2 = $1&255;
 HEAP32[$vararg_buffer>>2] = $2;
 (_printf(438498,$vararg_buffer)|0);
 $3 = $0;
 $4 = $3&255;
 switch ($4|0) {
 case 0:  {
  HEAP32[426644>>2] = 372;
  break;
 }
 case 1:  {
  HEAP32[426644>>2] = 373;
  HEAP32[(426652)>>2] = 374;
  break;
 }
 case 2:  {
  HEAP32[426644>>2] = 375;
  HEAP32[(426652)>>2] = 376;
  break;
 }
 case 3:  {
  HEAP32[426644>>2] = 377;
  HEAP32[(426652)>>2] = 378;
  break;
 }
 case 4:  {
  HEAP32[426644>>2] = 379;
  HEAP32[(426648)>>2] = 380;
  HEAP32[(426652)>>2] = 381;
  HEAP32[(426660)>>2] = 382;
  break;
 }
 case 9:  {
  HEAP32[426644>>2] = 383;
  HEAP32[(426652)>>2] = 384;
  HEAP32[(426656)>>2] = 385;
  break;
 }
 case 10:  {
  HEAP32[426644>>2] = 386;
  HEAP32[(426652)>>2] = 387;
  HEAP32[(426656)>>2] = 388;
  break;
 }
 case 246:  {
  HEAP32[426644>>2] = 389;
  HEAP32[(426652)>>2] = 390;
  break;
 }
 default: {
 }
 }
 STACKTOP = sp;return;
}
function __Z8MAPResetv() {
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[426644>>2]|0;
 $1 = ($0|0)!=(0|0);
 if (!($1)) {
  return;
 }
 $2 = HEAP32[426644>>2]|0;
 FUNCTION_TABLE_v[$2 & 511]();
 return;
}
function __Z7MAPPeekt($addr) {
 $addr = $addr|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $addr;
 $2 = HEAP32[(426648)>>2]|0;
 $3 = ($2|0)!=(0|0);
 if ($3) {
  $4 = HEAP32[(426648)>>2]|0;
  $5 = $1;
  $6 = (FUNCTION_TABLE_ii[$4 & 511]($5)|0);
  $0 = $6;
  $7 = $0;
  STACKTOP = sp;return ($7|0);
 } else {
  $0 = 0;
  $7 = $0;
  STACKTOP = sp;return ($7|0);
 }
 return (0)|0;
}
function __Z7MAPPoketh($addr,$data) {
 $addr = $addr|0;
 $data = $data|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $addr;
 $1 = $data;
 $2 = HEAP32[(426652)>>2]|0;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = HEAP32[(426652)>>2]|0;
 $5 = $0;
 $6 = $1;
 FUNCTION_TABLE_vii[$4 & 511]($5,$6);
 STACKTOP = sp;return;
}
function __Z11MAPChrlatcht($addr) {
 $addr = $addr|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $addr;
 $1 = HEAP32[(426656)>>2]|0;
 $2 = ($1|0)!=(0|0);
 if (!($2)) {
  STACKTOP = sp;return;
 }
 $3 = HEAP32[(426656)>>2]|0;
 $4 = $0;
 FUNCTION_TABLE_vi[$3 & 511]($4);
 STACKTOP = sp;return;
}
function __Z20MAPTickPPUCylceTimerv() {
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(426660)>>2]|0;
 $1 = ($0|0)!=(0|0);
 if (!($1)) {
  return;
 }
 $2 = HEAP32[(426660)>>2]|0;
 FUNCTION_TABLE_v[$2 & 511]();
 return;
}
function __ZL15Reset_Mapper000v() {
 var $0 = 0, $1 = 0, $cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP16[433124>>1]|0;
 $1 = $0&65535;
 $cond = ($1|0)==(4);
 if ($cond) {
  __Z16SetPROM_32K_Bankt(0);
  __Z15SetVROM_8K_Bankt(0);
  return;
 } else {
  __Z16SetPROM_16K_Bankht(0,0);
  __Z16SetPROM_16K_Bankht(2,0);
  __Z15SetVROM_8K_Bankt(0);
  return;
 }
}
function __ZL15Reset_Mapper001v() {
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[442624>>0] = 12;
 HEAP8[(442627)>>0] = 0;
 HEAP8[(442626)>>0] = 0;
 HEAP8[(442625)>>0] = 0;
 HEAP8[442629>>0] = 0;
 HEAP8[442628>>0] = 0;
 HEAP8[442630>>0] = 0;
 $0 = HEAP16[433124>>1]|0;
 $1 = $0&65535;
 $2 = ($1|0)<(64);
 if ($2) {
  __Z15SetPROM_8K_Bankht(0,0);
  __Z15SetPROM_8K_Bankht(1,1);
  $3 = HEAP16[433124>>1]|0;
  $4 = $3&65535;
  $5 = (($4) - 2)|0;
  $6 = $5&65535;
  __Z15SetPROM_8K_Bankht(2,$6);
  $7 = HEAP16[433124>>1]|0;
  $8 = $7&65535;
  $9 = (($8) - 1)|0;
  $10 = $9&65535;
  __Z15SetPROM_8K_Bankht(3,$10);
  __Z15SetVROM_8K_Bankt(0);
  return;
 } else {
  HEAP8[442630>>0] = 1;
  __Z15SetVROM_8K_Bankt(0);
  return;
 }
}
function __ZL14Poke_Mapper001th($addr,$data) {
 $addr = $addr|0;
 $data = $data|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $addr;
 $1 = $data;
 $2 = $0;
 $3 = $2&65535;
 $4 = ($3|0)<(32768);
 if ($4) {
  STACKTOP = sp;return;
 }
 $5 = $1;
 $6 = $5&255;
 $7 = $6 & 128;
 $8 = ($7|0)==(128);
 if ($8) {
  $9 = HEAP8[442624>>0]|0;
  $10 = $9&255;
  $11 = $10 | 12;
  $12 = $11&255;
  HEAP8[442624>>0] = $12;
  HEAP8[442628>>0] = 0;
  HEAP8[442629>>0] = 0;
  STACKTOP = sp;return;
 }
 $13 = $1;
 $14 = $13&255;
 $15 = $14 & 1;
 $16 = ($15|0)==(1);
 if ($16) {
  $17 = HEAP8[442629>>0]|0;
  $18 = $17&255;
  $19 = 1 << $18;
  $20 = HEAP8[442628>>0]|0;
  $21 = $20&255;
  $22 = $21 | $19;
  $23 = $22&255;
  HEAP8[442628>>0] = $23;
 }
 $24 = HEAP8[442629>>0]|0;
 $25 = (($24) + 1)<<24>>24;
 HEAP8[442629>>0] = $25;
 $26 = $25&255;
 $27 = ($26|0)<(5);
 if ($27) {
  STACKTOP = sp;return;
 }
 $28 = $0;
 $29 = $28&65535;
 $30 = $29 & 32767;
 $31 = $30 >> 13;
 $32 = $31&65535;
 $0 = $32;
 $33 = HEAP8[442628>>0]|0;
 $34 = $0;
 $35 = $34&65535;
 $36 = (442624 + ($35)|0);
 HEAP8[$36>>0] = $33;
 HEAP8[442628>>0] = 0;
 HEAP8[442629>>0] = 0;
 $37 = HEAP8[442630>>0]|0;
 $38 = $37&1;
 if ($38) {
  STACKTOP = sp;return;
 }
 $39 = $0;
 $40 = $39&65535;
 switch ($40|0) {
 case 0:  {
  $41 = HEAP8[442624>>0]|0;
  $42 = $41&255;
  $43 = $42 & 2;
  $44 = ($43|0)==(2);
  $45 = HEAP8[442624>>0]|0;
  $46 = $45&255;
  $47 = $46 & 1;
  $48 = ($47|0)!=(0);
  if ($44) {
   if ($48) {
    __Z13SetVRAMMirrorh(0);
    STACKTOP = sp;return;
   } else {
    __Z13SetVRAMMirrorh(1);
    STACKTOP = sp;return;
   }
  } else {
   if ($48) {
    __Z13SetVRAMMirrorh(4);
    STACKTOP = sp;return;
   } else {
    __Z13SetVRAMMirrorh(3);
    STACKTOP = sp;return;
   }
  }
  break;
 }
 case 1:  {
  $49 = HEAP8[452871>>0]|0;
  $50 = $49&1;
  $51 = HEAP8[442624>>0]|0;
  $52 = $51&255;
  $53 = $52 & 16;
  $54 = ($53|0)!=(0);
  if ($50) {
   if (!($54)) {
    STACKTOP = sp;return;
   }
   $62 = HEAP8[(442625)>>0]|0;
   $63 = $62&255;
   __Z15SetVROM_4K_Bankht(0,$63);
   STACKTOP = sp;return;
  }
  $55 = HEAP8[(442625)>>0]|0;
  if ($54) {
   $56 = $55&255;
   __Z15SetVROM_4K_Bankht(0,$56);
   $57 = HEAP8[(442626)>>0]|0;
   $58 = $57&255;
   __Z15SetVROM_4K_Bankht(4,$58);
   STACKTOP = sp;return;
  } else {
   $59 = $55&255;
   $60 = $59 >> 1;
   $61 = $60&65535;
   __Z15SetVROM_8K_Bankt($61);
   STACKTOP = sp;return;
  }
  break;
 }
 case 2:  {
  $64 = HEAP8[452871>>0]|0;
  $65 = $64&1;
  $66 = HEAP8[442624>>0]|0;
  $67 = $66&255;
  $68 = $67 & 16;
  $69 = ($68|0)!=(0);
  if ($65) {
   if (!($69)) {
    STACKTOP = sp;return;
   }
   $77 = HEAP8[(442626)>>0]|0;
   $78 = $77&255;
   __Z15SetVROM_4K_Bankht(4,$78);
   STACKTOP = sp;return;
  }
  $70 = HEAP8[(442625)>>0]|0;
  if ($69) {
   $71 = $70&255;
   __Z15SetVROM_4K_Bankht(0,$71);
   $72 = HEAP8[(442626)>>0]|0;
   $73 = $72&255;
   __Z15SetVROM_4K_Bankht(4,$73);
   STACKTOP = sp;return;
  } else {
   $74 = $70&255;
   $75 = $74 >> 1;
   $76 = $75&65535;
   __Z15SetVROM_8K_Bankt($76);
   STACKTOP = sp;return;
  }
  break;
 }
 case 3:  {
  $79 = HEAP8[442624>>0]|0;
  $80 = $79&255;
  $81 = $80 & 8;
  $82 = ($81|0)==(0);
  if ($82) {
   $83 = HEAP8[(442627)>>0]|0;
   $84 = $83&255;
   $85 = $84 >> 1;
   $86 = $85&65535;
   __Z16SetPROM_32K_Bankt($86);
   STACKTOP = sp;return;
  }
  $87 = HEAP8[442624>>0]|0;
  $88 = $87&255;
  $89 = $88 & 4;
  $90 = ($89|0)!=(0);
  if ($90) {
   $91 = HEAP8[(442627)>>0]|0;
   $92 = $91&255;
   __Z16SetPROM_16K_Bankht(0,$92);
   $93 = HEAP16[433124>>1]|0;
   $94 = $93&65535;
   $95 = (($94) - 2)|0;
   $96 = $95&65535;
   __Z15SetPROM_8K_Bankht(2,$96);
   $97 = HEAP16[433124>>1]|0;
   $98 = $97&65535;
   $99 = (($98) - 1)|0;
   $100 = $99&65535;
   __Z15SetPROM_8K_Bankht(3,$100);
   STACKTOP = sp;return;
  } else {
   __Z16SetPROM_16K_Bankht(0,0);
   $101 = HEAP8[(442627)>>0]|0;
   $102 = $101&255;
   __Z16SetPROM_16K_Bankht(2,$102);
   STACKTOP = sp;return;
  }
  break;
 }
 default: {
  STACKTOP = sp;return;
 }
 }
}
function __ZL15Reset_Mapper002v() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __Z15SetPROM_8K_Bankht(0,0);
 __Z15SetPROM_8K_Bankht(1,1);
 $0 = HEAP16[433124>>1]|0;
 $1 = $0&65535;
 $2 = (($1) - 2)|0;
 $3 = $2&65535;
 __Z15SetPROM_8K_Bankht(2,$3);
 $4 = HEAP16[433124>>1]|0;
 $5 = $4&65535;
 $6 = (($5) - 1)|0;
 $7 = $6&65535;
 __Z15SetPROM_8K_Bankht(3,$7);
 __Z15SetVROM_8K_Bankt(0);
 return;
}
function __ZL14Poke_Mapper002th($addr,$data) {
 $addr = $addr|0;
 $data = $data|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $addr;
 $1 = $data;
 $2 = $0;
 $3 = $2&65535;
 $4 = ($3|0)>=(32768);
 if ($4) {
  $5 = $0;
  $6 = $5&65535;
  $7 = ($6|0)<=(65535);
  if ($7) {
   $8 = $1;
   $9 = $8&255;
   __Z16SetPROM_16K_Bankht(0,$9);
  }
 }
 STACKTOP = sp;return;
}
function __ZL15Reset_Mapper003v() {
 var $0 = 0, $1 = 0, $cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP16[433124>>1]|0;
 $1 = $0&65535;
 $cond = ($1|0)==(4);
 if ($cond) {
  __Z16SetPROM_32K_Bankt(0);
  __Z15SetVROM_8K_Bankt(0);
  return;
 } else {
  __Z16SetPROM_16K_Bankht(0,0);
  __Z16SetPROM_16K_Bankht(2,0);
  __Z15SetVROM_8K_Bankt(0);
  return;
 }
}
function __ZL14Poke_Mapper003th($addr,$data) {
 $addr = $addr|0;
 $data = $data|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $addr;
 $1 = $data;
 $2 = $0;
 $3 = $2&65535;
 $4 = ($3|0)>=(32768);
 if ($4) {
  $5 = $0;
  $6 = $5&65535;
  $7 = ($6|0)<=(65535);
  if ($7) {
   $8 = $1;
   $9 = $8&255;
   __Z15SetVROM_8K_Bankt($9);
  }
 }
 STACKTOP = sp;return;
}
function __ZL15Reset_Mapper004v() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZL15mapper004_resetv();
 __Z22SetAddressLineUpdatingPv(391);
 __Z15SetVROM_8K_Bankt(0);
 __ZL6SetPRGv();
 __ZL6SetCHRv();
 return;
}
function __ZL14Peek_Mapper004t($addr) {
 $addr = $addr|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $addr;
 $2 = $1;
 $3 = $2&65535;
 $4 = (20480)<=($3|0);
 if ($4) {
  $5 = $1;
  $6 = $5&65535;
  $7 = ($6|0)<=(24575);
  if ($7) {
   $8 = $1;
   $9 = $8&65535;
   $10 = (($9) - 20480)|0;
   $11 = (438515 + ($10)|0);
   $12 = HEAP8[$11>>0]|0;
   $0 = $12;
   $13 = $0;
   STACKTOP = sp;return ($13|0);
  }
 }
 $0 = 0;
 $13 = $0;
 STACKTOP = sp;return ($13|0);
}
function __ZL14Poke_Mapper004th($addr,$data) {
 $addr = $addr|0;
 $data = $data|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $addr;
 $1 = $data;
 $2 = $0;
 $3 = $2&65535;
 $4 = (20480)<=($3|0);
 if ($4) {
  $5 = $0;
  $6 = $5&65535;
  $7 = ($6|0)<=(24575);
  if ($7) {
   $8 = $1;
   $9 = $0;
   $10 = $9&65535;
   $11 = (($10) - 20480)|0;
   $12 = (438515 + ($11)|0);
   HEAP8[$12>>0] = $8;
   STACKTOP = sp;return;
  }
 }
 $13 = $0;
 $14 = $1;
 __ZL4Poketh($13,$14);
 STACKTOP = sp;return;
}
function __ZL17TickPPUCylceTimerv() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[426664>>2]|0;
 $1 = (($0) + 1)|0;
 HEAP32[426664>>2] = $1;
 return;
}
function __ZL15Reset_Mapper009v() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[438509>>0] = 0;
 HEAP8[(438510)>>0] = 2;
 HEAP8[438511>>0] = 0;
 HEAP8[(438512)>>0] = 0;
 HEAP8[(438513)>>0] = 0;
 HEAP8[(438514)>>0] = 0;
 __Z15SetPROM_8K_Bankht(0,0);
 $0 = HEAP16[433124>>1]|0;
 $1 = $0&65535;
 $2 = (($1) - 3)|0;
 $3 = $2&65535;
 __Z15SetPROM_8K_Bankht(1,$3);
 $4 = HEAP16[433124>>1]|0;
 $5 = $4&65535;
 $6 = (($5) - 2)|0;
 $7 = $6&65535;
 __Z15SetPROM_8K_Bankht(2,$7);
 $8 = HEAP16[433124>>1]|0;
 $9 = $8&65535;
 $10 = (($9) - 1)|0;
 $11 = $10&65535;
 __Z15SetPROM_8K_Bankht(3,$11);
 __Z15SetVROM_8K_Bankt(0);
 return;
}
function __ZL14Poke_Mapper009th($addr,$data) {
 $addr = $addr|0;
 $data = $data|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $bank = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $addr;
 $1 = $data;
 $2 = $0;
 $3 = $2&65535;
 $4 = $3 & 61440;
 $5 = ($4|0)==(40960);
 if ($5) {
  $6 = $1;
  $7 = $6&255;
  __Z15SetPROM_8K_Bankht(0,$7);
  STACKTOP = sp;return;
 }
 $8 = $0;
 $9 = $8&65535;
 $10 = $9 & 61440;
 $11 = ($10|0)==(61440);
 if ($11) {
  $12 = $1;
  $13 = $12&255;
  $14 = $13 & 1;
  $15 = ($14|0)!=(0);
  $16 = $15 ? 0 : 1;
  $17 = $16&255;
  __Z13SetVRAMMirrorh($17);
  STACKTOP = sp;return;
 }
 $18 = $0;
 $19 = $18&65535;
 $20 = (($19) - 45056)|0;
 $21 = $20 >> 12;
 $22 = $21&255;
 $bank = $22;
 $23 = $1;
 $24 = $bank;
 $25 = $24&255;
 $26 = (438511 + ($25)|0);
 HEAP8[$26>>0] = $23;
 $27 = $bank;
 $28 = $27&255;
 switch ($28|0) {
 case 1: case 0:  {
  $29 = $1;
  $30 = $29&255;
  __Z15SetVROM_4K_Bankht(0,$30);
  STACKTOP = sp;return;
  break;
 }
 case 3: case 2:  {
  $31 = $1;
  $32 = $31&255;
  __Z15SetVROM_4K_Bankht(4,$32);
  STACKTOP = sp;return;
  break;
 }
 default: {
  STACKTOP = sp;return;
 }
 }
}
function __ZL18Chrlatch_Mapper009t($addr) {
 $addr = $addr|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $bank = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $addr;
 $1 = $0;
 $2 = $1&65535;
 $3 = $2 & 4088;
 switch ($3|0) {
 case 4056:  {
  $4 = $0;
  $5 = $4&65535;
  $6 = $5 >> 11;
  $7 = $6 & 2;
  $bank = $7;
  break;
 }
 case 4072:  {
  $8 = $0;
  $9 = $8&65535;
  $10 = $9 >> 11;
  $11 = $10 & 2;
  $12 = $11 | 1;
  $bank = $12;
  break;
 }
 default: {
  STACKTOP = sp;return;
 }
 }
 $13 = $bank;
 $14 = $13&255;
 $15 = $0;
 $16 = $15&65535;
 $17 = $16 >> 12;
 $18 = (438509 + ($17)|0);
 HEAP8[$18>>0] = $14;
 $19 = $0;
 $20 = $19&65535;
 $21 = $20 & 4096;
 $22 = ($21|0)!=(0);
 $23 = $22 ? 4 : 0;
 $24 = $23&255;
 $25 = $bank;
 $26 = (438511 + ($25)|0);
 $27 = HEAP8[$26>>0]|0;
 $28 = $27&255;
 __Z15SetVROM_4K_Bankht($24,$28);
 STACKTOP = sp;return;
}
function __ZL15Reset_Mapper010v() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[438509>>0] = 0;
 HEAP8[(438510)>>0] = 2;
 HEAP8[438511>>0] = 0;
 HEAP8[(438512)>>0] = 0;
 HEAP8[(438513)>>0] = 0;
 HEAP8[(438514)>>0] = 0;
 __Z15SetPROM_8K_Bankht(0,0);
 __Z15SetPROM_8K_Bankht(1,1);
 $0 = HEAP16[433124>>1]|0;
 $1 = $0&65535;
 $2 = (($1) - 2)|0;
 $3 = $2&65535;
 __Z15SetPROM_8K_Bankht(2,$3);
 $4 = HEAP16[433124>>1]|0;
 $5 = $4&65535;
 $6 = (($5) - 1)|0;
 $7 = $6&65535;
 __Z15SetPROM_8K_Bankht(3,$7);
 __Z15SetVROM_8K_Bankt(0);
 return;
}
function __ZL14Poke_Mapper010th($addr,$data) {
 $addr = $addr|0;
 $data = $data|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $bank = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $addr;
 $1 = $data;
 $2 = $0;
 $3 = $2&65535;
 $4 = $3 & 61440;
 $5 = ($4|0)==(40960);
 if ($5) {
  $6 = $1;
  $7 = $6&255;
  __Z16SetPROM_16K_Bankht(0,$7);
  STACKTOP = sp;return;
 }
 $8 = $0;
 $9 = $8&65535;
 $10 = $9 & 61440;
 $11 = ($10|0)==(61440);
 if ($11) {
  $12 = $1;
  $13 = $12&255;
  $14 = $13 & 1;
  $15 = ($14|0)!=(0);
  $16 = $15 ? 0 : 1;
  $17 = $16&255;
  __Z13SetVRAMMirrorh($17);
  STACKTOP = sp;return;
 }
 $18 = $0;
 $19 = $18&65535;
 $20 = (($19) - 45056)|0;
 $21 = $20 >> 12;
 $22 = $21&255;
 $bank = $22;
 $23 = $1;
 $24 = $bank;
 $25 = $24&255;
 $26 = (438511 + ($25)|0);
 HEAP8[$26>>0] = $23;
 $27 = $bank;
 $28 = $27&255;
 switch ($28|0) {
 case 1: case 0:  {
  $29 = $1;
  $30 = $29&255;
  __Z15SetVROM_4K_Bankht(0,$30);
  STACKTOP = sp;return;
  break;
 }
 case 3: case 2:  {
  $31 = $1;
  $32 = $31&255;
  __Z15SetVROM_4K_Bankht(4,$32);
  STACKTOP = sp;return;
  break;
 }
 default: {
  STACKTOP = sp;return;
 }
 }
}
function __ZL18Chrlatch_Mapper010t($addr) {
 $addr = $addr|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $bank = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $addr;
 $1 = $0;
 $2 = $1&65535;
 $3 = $2 & 4088;
 switch ($3|0) {
 case 4056:  {
  $4 = $0;
  $5 = $4&65535;
  $6 = $5 >> 11;
  $7 = $6 & 2;
  $bank = $7;
  break;
 }
 case 4072:  {
  $8 = $0;
  $9 = $8&65535;
  $10 = $9 >> 11;
  $11 = $10 & 2;
  $12 = $11 | 1;
  $bank = $12;
  break;
 }
 default: {
  STACKTOP = sp;return;
 }
 }
 $13 = $bank;
 $14 = $13&255;
 $15 = $0;
 $16 = $15&65535;
 $17 = $16 >> 12;
 $18 = (438509 + ($17)|0);
 HEAP8[$18>>0] = $14;
 $19 = $0;
 $20 = $19&65535;
 $21 = $20 & 4096;
 $22 = ($21|0)!=(0);
 $23 = $22 ? 4 : 0;
 $24 = $23&255;
 $25 = $bank;
 $26 = (438511 + ($25)|0);
 $27 = HEAP8[$26>>0]|0;
 $28 = $27&255;
 __Z15SetVROM_4K_Bankht($24,$28);
 STACKTOP = sp;return;
}
function __ZL15Reset_Mapper246v() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __Z15SetPROM_8K_Bankht(0,0);
 __Z15SetPROM_8K_Bankht(1,1);
 $0 = HEAP16[433124>>1]|0;
 $1 = $0&65535;
 $2 = (($1) - 2)|0;
 $3 = $2&65535;
 __Z15SetPROM_8K_Bankht(2,$3);
 $4 = HEAP16[433124>>1]|0;
 $5 = $4&65535;
 $6 = (($5) - 1)|0;
 $7 = $6&65535;
 __Z15SetPROM_8K_Bankht(3,$7);
 __Z15SetVROM_8K_Bankt(0);
 return;
}
function __ZL14Poke_Mapper246th($addr,$data) {
 $addr = $addr|0;
 $data = $data|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $addr;
 $1 = $data;
 $2 = $0;
 $3 = $2&65535;
 $4 = ($3|0)>=(24576);
 if (!($4)) {
  STACKTOP = sp;return;
 }
 $5 = $0;
 $6 = $5&65535;
 $7 = ($6|0)<(32768);
 if (!($7)) {
  STACKTOP = sp;return;
 }
 $8 = $0;
 $9 = $8&65535;
 switch ($9|0) {
 case 24576:  {
  $10 = $1;
  $11 = $10&255;
  __Z15SetPROM_8K_Bankht(0,$11);
  STACKTOP = sp;return;
  break;
 }
 case 24577:  {
  $12 = $1;
  $13 = $12&255;
  __Z15SetPROM_8K_Bankht(1,$13);
  STACKTOP = sp;return;
  break;
 }
 case 24578:  {
  $14 = $1;
  $15 = $14&255;
  __Z15SetPROM_8K_Bankht(2,$15);
  STACKTOP = sp;return;
  break;
 }
 case 24579:  {
  $16 = $1;
  $17 = $16&255;
  __Z15SetPROM_8K_Bankht(3,$17);
  STACKTOP = sp;return;
  break;
 }
 case 24580:  {
  $18 = $1;
  $19 = $18&255;
  $20 = $19<<1;
  $21 = (($20) + 0)|0;
  $22 = $21&65535;
  __Z15SetVROM_1K_Bankht(0,$22);
  $23 = $1;
  $24 = $23&255;
  $25 = $24<<1;
  $26 = (($25) + 1)|0;
  $27 = $26&65535;
  __Z15SetVROM_1K_Bankht(1,$27);
  STACKTOP = sp;return;
  break;
 }
 case 24581:  {
  $28 = $1;
  $29 = $28&255;
  $30 = $29<<1;
  $31 = (($30) + 0)|0;
  $32 = $31&65535;
  __Z15SetVROM_1K_Bankht(2,$32);
  $33 = $1;
  $34 = $33&255;
  $35 = $34<<1;
  $36 = (($35) + 1)|0;
  $37 = $36&65535;
  __Z15SetVROM_1K_Bankht(3,$37);
  STACKTOP = sp;return;
  break;
 }
 case 24582:  {
  $38 = $1;
  $39 = $38&255;
  $40 = $39<<1;
  $41 = (($40) + 0)|0;
  $42 = $41&65535;
  __Z15SetVROM_1K_Bankht(4,$42);
  $43 = $1;
  $44 = $43&255;
  $45 = $44<<1;
  $46 = (($45) + 1)|0;
  $47 = $46&65535;
  __Z15SetVROM_1K_Bankht(5,$47);
  STACKTOP = sp;return;
  break;
 }
 case 24583:  {
  $48 = $1;
  $49 = $48&255;
  $50 = $49<<1;
  $51 = (($50) + 0)|0;
  $52 = $51&65535;
  __Z15SetVROM_1K_Bankht(6,$52);
  $53 = $1;
  $54 = $53&255;
  $55 = $54<<1;
  $56 = (($55) + 1)|0;
  $57 = $56&65535;
  __Z15SetVROM_1K_Bankht(7,$57);
  STACKTOP = sp;return;
  break;
 }
 default: {
  STACKTOP = sp;return;
 }
 }
}
function __ZL4Poketh($address,$data) {
 $address = $address|0;
 $data = $data|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $address;
 $1 = $data;
 $2 = $0;
 $3 = $2&65535;
 $4 = $3 & 57345;
 $5 = $4&65535;
 $0 = $5;
 $6 = $0;
 $7 = $6&65535;
 $8 = ($7|0)==(32768);
 if ($8) {
  $9 = $1;
  $10 = $9&255;
  $11 = $10 & 7;
  $12 = $11&255;
  HEAP8[442611>>0] = $12;
  $13 = $1;
  $14 = $13&255;
  $15 = $14 & 64;
  $16 = $15&255;
  HEAP8[442612>>0] = $16;
  $17 = $1;
  $18 = $17&255;
  $19 = $18 & 128;
  $20 = $19&255;
  HEAP8[442613>>0] = $20;
  __ZL6SetPRGv();
  __ZL6SetCHRv();
  STACKTOP = sp;return;
 }
 $21 = $0;
 $22 = $21&65535;
 $23 = ($22|0)==(32769);
 if (!($23)) {
  $62 = $0;
  $63 = $62&65535;
  $64 = ($63|0)==(40960);
  if ($64) {
   $65 = $1;
   $66 = $65&255;
   $67 = $66 & 1;
   $68 = ($67|0)!=(0);
   $69 = $68 ^ 1;
   $70 = $69&1;
   __Z13SetVRAMMirrorh($70);
   STACKTOP = sp;return;
  }
  $71 = $0;
  $72 = $71&65535;
  $73 = ($72|0)==(40961);
  if ($73) {
   $74 = $1;
   $75 = $74&255;
   $76 = $75 & 64;
   $77 = ($76|0)==(64);
   $78 = $77&1;
   HEAP8[438496>>0] = $78;
   $79 = $1;
   $80 = $79&255;
   $81 = $80 & 128;
   $82 = ($81|0)==(128);
   $83 = $82&1;
   HEAP8[438497>>0] = $83;
   STACKTOP = sp;return;
  }
  $84 = $0;
  $85 = $84&65535;
  $86 = ($85|0)==(49152);
  if ($86) {
   $87 = $1;
   $88 = $87&255;
   HEAP32[426668>>2] = $88;
   STACKTOP = sp;return;
  }
  $89 = $0;
  $90 = $89&65535;
  $91 = ($90|0)==(49153);
  if ($91) {
   HEAP32[426672>>2] = 0;
   STACKTOP = sp;return;
  }
  $92 = $0;
  $93 = $92&65535;
  $94 = ($93|0)==(57344);
  if ($94) {
   HEAP8[442622>>0] = 0;
   __Z10mapper_IRQb(0);
   STACKTOP = sp;return;
  }
  $95 = $0;
  $96 = $95&65535;
  $97 = ($96|0)==(57345);
  if (!($97)) {
   STACKTOP = sp;return;
  }
  HEAP8[442622>>0] = 1;
  STACKTOP = sp;return;
 }
 $24 = HEAP8[442611>>0]|0;
 $25 = $24&255;
 $26 = ($25|0)==(0);
 if ($26) {
  $27 = $1;
  $28 = $27&255;
  $29 = $28 & 254;
  $30 = $29&255;
  HEAP8[442614>>0] = $30;
  __ZL6SetCHRv();
  STACKTOP = sp;return;
 }
 $31 = HEAP8[442611>>0]|0;
 $32 = $31&255;
 $33 = ($32|0)==(1);
 if ($33) {
  $34 = $1;
  $35 = $34&255;
  $36 = $35 & 254;
  $37 = $36&255;
  HEAP8[442615>>0] = $37;
  __ZL6SetCHRv();
  STACKTOP = sp;return;
 }
 $38 = HEAP8[442611>>0]|0;
 $39 = $38&255;
 $40 = ($39|0)==(2);
 if ($40) {
  $41 = $1;
  HEAP8[442616>>0] = $41;
  __ZL6SetCHRv();
  STACKTOP = sp;return;
 }
 $42 = HEAP8[442611>>0]|0;
 $43 = $42&255;
 $44 = ($43|0)==(3);
 if ($44) {
  $45 = $1;
  HEAP8[442617>>0] = $45;
  __ZL6SetCHRv();
  STACKTOP = sp;return;
 }
 $46 = HEAP8[442611>>0]|0;
 $47 = $46&255;
 $48 = ($47|0)==(4);
 if ($48) {
  $49 = $1;
  HEAP8[442618>>0] = $49;
  __ZL6SetCHRv();
  STACKTOP = sp;return;
 }
 $50 = HEAP8[442611>>0]|0;
 $51 = $50&255;
 $52 = ($51|0)==(5);
 if ($52) {
  $53 = $1;
  HEAP8[442619>>0] = $53;
  __ZL6SetCHRv();
  STACKTOP = sp;return;
 }
 $54 = HEAP8[442611>>0]|0;
 $55 = $54&255;
 $56 = ($55|0)==(6);
 if ($56) {
  $57 = $1;
  HEAP8[442620>>0] = $57;
  __ZL6SetPRGv();
  STACKTOP = sp;return;
 }
 $58 = HEAP8[442611>>0]|0;
 $59 = $58&255;
 $60 = ($59|0)==(7);
 if (!($60)) {
  STACKTOP = sp;return;
 }
 $61 = $1;
 HEAP8[442621>>0] = $61;
 __ZL6SetPRGv();
 STACKTOP = sp;return;
}
function __ZL6SetPRGv() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[442612>>0]|0;
 $1 = $0&255;
 $2 = ($1|0)!=(0);
 if ($2) {
  $3 = HEAP16[433124>>1]|0;
  $4 = $3&65535;
  $5 = (($4) - 2)|0;
  $6 = $5&65535;
  __Z15SetPROM_8K_Bankht(0,$6);
  $7 = HEAP8[442621>>0]|0;
  $8 = $7&255;
  __Z15SetPROM_8K_Bankht(1,$8);
  $9 = HEAP8[442620>>0]|0;
  $10 = $9&255;
  __Z15SetPROM_8K_Bankht(2,$10);
  $11 = HEAP16[433124>>1]|0;
  $12 = $11&65535;
  $13 = (($12) - 1)|0;
  $14 = $13&65535;
  __Z15SetPROM_8K_Bankht(3,$14);
  return;
 } else {
  $15 = HEAP8[442620>>0]|0;
  $16 = $15&255;
  __Z15SetPROM_8K_Bankht(0,$16);
  $17 = HEAP8[442621>>0]|0;
  $18 = $17&255;
  __Z15SetPROM_8K_Bankht(1,$18);
  $19 = HEAP16[433124>>1]|0;
  $20 = $19&65535;
  $21 = (($20) - 2)|0;
  $22 = $21&65535;
  __Z15SetPROM_8K_Bankht(2,$22);
  $23 = HEAP16[433124>>1]|0;
  $24 = $23&65535;
  $25 = (($24) - 1)|0;
  $26 = $25&65535;
  __Z15SetPROM_8K_Bankht(3,$26);
  return;
 }
}
function __ZL6SetCHRv() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[452871>>0]|0;
 $1 = $0&1;
 $2 = HEAP8[442613>>0]|0;
 $3 = $2&255;
 $4 = ($3|0)==(0);
 if ($1) {
  $5 = HEAP8[442614>>0]|0;
  $6 = $5&255;
  $7 = (($6) + 0)|0;
  $8 = $7 & 7;
  $9 = $8&65535;
  if ($4) {
   __Z15SetVROM_1K_Bankht(0,$9);
   $10 = HEAP8[442614>>0]|0;
   $11 = $10&255;
   $12 = (($11) + 1)|0;
   $13 = $12 & 7;
   $14 = $13&65535;
   __Z15SetVROM_1K_Bankht(1,$14);
   $15 = HEAP8[442615>>0]|0;
   $16 = $15&255;
   $17 = (($16) + 0)|0;
   $18 = $17 & 7;
   $19 = $18&65535;
   __Z15SetVROM_1K_Bankht(2,$19);
   $20 = HEAP8[442615>>0]|0;
   $21 = $20&255;
   $22 = (($21) + 1)|0;
   $23 = $22 & 7;
   $24 = $23&65535;
   __Z15SetVROM_1K_Bankht(3,$24);
   $25 = HEAP8[442616>>0]|0;
   $26 = $25&255;
   $27 = $26 & 7;
   $28 = $27&65535;
   __Z15SetVROM_1K_Bankht(4,$28);
   $29 = HEAP8[442617>>0]|0;
   $30 = $29&255;
   $31 = $30 & 7;
   $32 = $31&65535;
   __Z15SetVROM_1K_Bankht(5,$32);
   $33 = HEAP8[442618>>0]|0;
   $34 = $33&255;
   $35 = $34 & 7;
   $36 = $35&65535;
   __Z15SetVROM_1K_Bankht(6,$36);
   $37 = HEAP8[442619>>0]|0;
   $38 = $37&255;
   $39 = $38 & 7;
   $40 = $39&65535;
   __Z15SetVROM_1K_Bankht(7,$40);
   return;
  } else {
   __Z15SetVROM_1K_Bankht(4,$9);
   $41 = HEAP8[442614>>0]|0;
   $42 = $41&255;
   $43 = (($42) + 1)|0;
   $44 = $43 & 7;
   $45 = $44&65535;
   __Z15SetVROM_1K_Bankht(5,$45);
   $46 = HEAP8[442615>>0]|0;
   $47 = $46&255;
   $48 = (($47) + 0)|0;
   $49 = $48 & 7;
   $50 = $49&65535;
   __Z15SetVROM_1K_Bankht(6,$50);
   $51 = HEAP8[442615>>0]|0;
   $52 = $51&255;
   $53 = (($52) + 1)|0;
   $54 = $53 & 7;
   $55 = $54&65535;
   __Z15SetVROM_1K_Bankht(7,$55);
   $56 = HEAP8[442616>>0]|0;
   $57 = $56&255;
   $58 = $57 & 7;
   $59 = $58&65535;
   __Z15SetVROM_1K_Bankht(0,$59);
   $60 = HEAP8[442617>>0]|0;
   $61 = $60&255;
   $62 = $61 & 7;
   $63 = $62&65535;
   __Z15SetVROM_1K_Bankht(1,$63);
   $64 = HEAP8[442618>>0]|0;
   $65 = $64&255;
   $66 = $65 & 7;
   $67 = $66&65535;
   __Z15SetVROM_1K_Bankht(2,$67);
   $68 = HEAP8[442619>>0]|0;
   $69 = $68&255;
   $70 = $69 & 7;
   $71 = $70&65535;
   __Z15SetVROM_1K_Bankht(3,$71);
   return;
  }
 } else {
  if ($4) {
   $72 = HEAP8[442614>>0]|0;
   $73 = $72&255;
   __Z15SetVROM_1K_Bankht(0,$73);
   $74 = HEAP8[442614>>0]|0;
   $75 = $74&255;
   $76 = (($75) + 1)|0;
   $77 = $76&65535;
   __Z15SetVROM_1K_Bankht(1,$77);
   $78 = HEAP8[442615>>0]|0;
   $79 = $78&255;
   __Z15SetVROM_1K_Bankht(2,$79);
   $80 = HEAP8[442615>>0]|0;
   $81 = $80&255;
   $82 = (($81) + 1)|0;
   $83 = $82&65535;
   __Z15SetVROM_1K_Bankht(3,$83);
   $84 = HEAP8[442616>>0]|0;
   $85 = $84&255;
   __Z15SetVROM_1K_Bankht(4,$85);
   $86 = HEAP8[442617>>0]|0;
   $87 = $86&255;
   __Z15SetVROM_1K_Bankht(5,$87);
   $88 = HEAP8[442618>>0]|0;
   $89 = $88&255;
   __Z15SetVROM_1K_Bankht(6,$89);
   $90 = HEAP8[442619>>0]|0;
   $91 = $90&255;
   __Z15SetVROM_1K_Bankht(7,$91);
   return;
  } else {
   $92 = HEAP8[442616>>0]|0;
   $93 = $92&255;
   __Z15SetVROM_1K_Bankht(0,$93);
   $94 = HEAP8[442617>>0]|0;
   $95 = $94&255;
   __Z15SetVROM_1K_Bankht(1,$95);
   $96 = HEAP8[442618>>0]|0;
   $97 = $96&255;
   __Z15SetVROM_1K_Bankht(2,$97);
   $98 = HEAP8[442619>>0]|0;
   $99 = $98&255;
   __Z15SetVROM_1K_Bankht(3,$99);
   $100 = HEAP8[442614>>0]|0;
   $101 = $100&255;
   __Z15SetVROM_1K_Bankht(4,$101);
   $102 = HEAP8[442614>>0]|0;
   $103 = $102&255;
   $104 = (($103) + 1)|0;
   $105 = $104&65535;
   __Z15SetVROM_1K_Bankht(5,$105);
   $106 = HEAP8[442615>>0]|0;
   $107 = $106&255;
   __Z15SetVROM_1K_Bankht(6,$107);
   $108 = HEAP8[442615>>0]|0;
   $109 = $108&255;
   $110 = (($109) + 1)|0;
   $111 = $110&65535;
   __Z15SetVROM_1K_Bankht(7,$111);
   return;
  }
 }
}
function __ZL15mapper004_resetv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[442611>>0] = 0;
 HEAP8[442612>>0] = 0;
 HEAP8[442613>>0] = 0;
 HEAP8[442622>>0] = 0;
 HEAP32[426672>>2] = 0;
 HEAP32[426668>>2] = 255;
 HEAP8[442623>>0] = 0;
 HEAP32[426680>>2] = 0;
 HEAP32[426676>>2] = 0;
 HEAP32[426664>>2] = 0;
 HEAP8[442620>>0] = 0;
 HEAP8[442621>>0] = 1;
 HEAP8[442614>>0] = 0;
 HEAP8[442615>>0] = 2;
 HEAP8[442616>>0] = 4;
 HEAP8[442617>>0] = 5;
 HEAP8[442618>>0] = 6;
 HEAP8[442619>>0] = 7;
 HEAP8[438496>>0] = 0;
 HEAP8[438497>>0] = 1;
 return;
}
function __ZL23PPU_AddressLineUpdatingt($addr) {
 $addr = $addr|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $old = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $addr;
 $1 = HEAP32[426676>>2]|0;
 HEAP32[426680>>2] = $1;
 $2 = $0;
 $3 = $2&65535;
 $4 = $3 & 4096;
 HEAP32[426676>>2] = $4;
 $5 = HEAP32[426680>>2]|0;
 $6 = HEAP32[426676>>2]|0;
 $7 = ($5|0)<($6|0);
 if (!($7)) {
  STACKTOP = sp;return;
 }
 $8 = HEAP32[426664>>2]|0;
 $9 = ($8|0)>(16);
 if ($9) {
  $10 = HEAP32[426672>>2]|0;
  $old = $10;
  $11 = HEAP32[426672>>2]|0;
  $12 = ($11|0)==(0);
  if ($12) {
   label = 5;
  } else {
   $13 = HEAP8[442623>>0]|0;
   $14 = $13&1;
   if ($14) {
    label = 5;
   } else {
    $16 = HEAP32[426672>>2]|0;
    $17 = (($16) - 1)|0;
    HEAP32[426672>>2] = $17;
   }
  }
  if ((label|0) == 5) {
   $15 = HEAP32[426668>>2]|0;
   HEAP32[426672>>2] = $15;
  }
  $18 = HEAP32[426672>>2]|0;
  $19 = ($18|0)==(0);
  if ($19) {
   $20 = HEAP8[442622>>0]|0;
   $21 = $20&1;
   if ($21) {
    HEAP8[433217>>0] = 1;
   }
  }
  HEAP8[442623>>0] = 0;
 }
 HEAP32[426664>>2] = 0;
 STACKTOP = sp;return;
}
function __Z9WriteByteth($addr,$data) {
 $addr = $addr|0;
 $data = $data|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $addr;
 $1 = $data;
 $2 = $0;
 $3 = $2&65535;
 $4 = ($3|0)<(8192);
 if ($4) {
  $5 = $1;
  $6 = $0;
  $7 = $6&65535;
  $8 = $7 & 2047;
  $9 = (442631 + ($8)|0);
  HEAP8[$9>>0] = $5;
  STACKTOP = sp;return;
 }
 $10 = $0;
 $11 = $10&65535;
 $12 = ($11|0)<=(8199);
 $13 = $0;
 if ($12) {
  $14 = $1;
  __Z12PPUWriteByteth($13,$14);
  STACKTOP = sp;return;
 }
 $15 = $13&65535;
 $16 = ($15|0)==(16404);
 if ($16) {
  $17 = $1;
  __Z9SpriteDMAh($17);
  STACKTOP = sp;return;
 }
 $18 = $0;
 $19 = $18&65535;
 $20 = ($19|0)<=(16640);
 $21 = $0;
 $22 = $21&65535;
 do {
  if ($20) {
   $23 = ($22|0)==(16406);
   $24 = $0;
   if ($23) {
    $25 = $1;
    __Z12PADWriteByteth($24,$25);
    STACKTOP = sp;return;
   }
   $26 = $24&65535;
   $27 = ($26|0)==(16405);
   if (!($27)) {
    $28 = $0;
    $29 = $28&65535;
    $30 = ($29|0)==(16407);
    if (!($30)) {
     $31 = $0;
     $32 = $31&65535;
     $33 = (16384)<=($32|0);
     if (!($33)) {
      break;
     }
     $34 = $0;
     $35 = $34&65535;
     $36 = ($35|0)<=(16403);
     if (!($36)) {
      break;
     }
    }
   }
   $37 = $0;
   $38 = $1;
   __Z12APUWriteByteth($37,$38);
   STACKTOP = sp;return;
  } else {
   $39 = ($22|0)<(24576);
   $40 = $0;
   if ($39) {
    $41 = $1;
    __Z7MAPPoketh($40,$41);
    STACKTOP = sp;return;
   }
   $42 = $40&65535;
   $43 = ($42|0)<(32768);
   if ($43) {
    $44 = $1;
    $45 = $0;
    $46 = $45&65535;
    $47 = (($46) - 24576)|0;
    $48 = (444679 + ($47)|0);
    HEAP8[$48>>0] = $44;
    $49 = $0;
    $50 = $1;
    __Z7MAPPoketh($49,$50);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $51 = $0;
 $52 = $1;
 __Z8PROMPoketh($51,$52);
 STACKTOP = sp;return;
}
function __Z8ReadBytet($addr) {
 $addr = $addr|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $addr;
 $2 = $1;
 $3 = $2&65535;
 $4 = ($3|0)<(8192);
 $5 = $1;
 $6 = $5&65535;
 do {
  if ($4) {
   $7 = $6 & 2047;
   $8 = (442631 + ($7)|0);
   $9 = HEAP8[$8>>0]|0;
   $0 = $9;
  } else {
   $10 = ($6|0)<=(8199);
   $11 = $1;
   if ($10) {
    $12 = (__Z11PPUReadBytet($11)|0);
    $0 = $12;
    break;
   }
   $13 = $11&65535;
   $14 = ($13|0)==(16404);
   $15 = $1;
   $16 = $15&65535;
   if ($14) {
    $17 = $16 & 255;
    $18 = $17&255;
    $0 = $18;
    break;
   }
   $19 = ($16|0)<=(16640);
   $20 = $1;
   $21 = $20&65535;
   if ($19) {
    $22 = ($21|0)==(16405);
    $23 = $1;
    if ($22) {
     $24 = (__Z11APUReadBytet($23)|0);
     $0 = $24;
     break;
    }
    $25 = $23&65535;
    $26 = ($25|0)==(16406);
    $27 = $1;
    if ($26) {
     $28 = (__Z11PADReadBytet($27)|0);
     $29 = $28&255;
     $30 = $29 | 64;
     $31 = $30&255;
     $0 = $31;
     break;
    }
    $32 = $27&65535;
    $33 = ($32|0)==(16407);
    $34 = $1;
    if ($33) {
     $35 = (__Z11PADReadBytet($34)|0);
     $0 = $35;
     break;
    } else {
     $36 = $34&65535;
     $37 = $36 & 255;
     $38 = $37&255;
     $0 = $38;
     break;
    }
   } else {
    $39 = ($21|0)<(24576);
    $40 = $1;
    if ($39) {
     $41 = (__Z7MAPPeekt($40)|0);
     $0 = $41;
     break;
    }
    $42 = $40&65535;
    $43 = ($42|0)<(32768);
    if (!($43)) {
     $51 = $1;
     $52 = (__Z8PROMPeekt($51)|0);
     $0 = $52;
     break;
    }
    $44 = HEAP8[438497>>0]|0;
    $45 = $44&1;
    if ($45) {
     $46 = $1;
     $47 = $46&65535;
     $48 = (($47) - 24576)|0;
     $49 = (444679 + ($48)|0);
     $50 = HEAP8[$49>>0]|0;
     $0 = $50;
     break;
    } else {
     $0 = 0;
     break;
    }
   }
  }
 } while(0);
 $53 = $0;
 STACKTOP = sp;return ($53|0);
}
function __Z13RunOneFrameCCl($cc) {
 $cc = $cc|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $all_ppu_cc = 0, $cpu_cc = 0, $i = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $cc;
 $all_ppu_cc = 0;
 L1: while(1) {
  $1 = $0;
  $2 = ($1|0)>(0);
  if (!($2)) {
   break;
  }
  $3 = (__Z10CPUExecutev()|0);
  $cpu_cc = $3;
  $4 = $cpu_cc;
  $5 = $0;
  $6 = (($5) - ($4))|0;
  $0 = $6;
  while(1) {
   $7 = $cpu_cc;
   $8 = (($7) + -1)|0;
   $cpu_cc = $8;
   $9 = ($7|0)!=(0);
   if (!($9)) {
    continue L1;
   }
   __Z10APUExecutem(1);
   $i = 0;
   while(1) {
    $10 = $i;
    $11 = ($10>>>0)<(3);
    if (!($11)) {
     break;
    }
    __Z10PPUExecutev();
    $12 = $i;
    $13 = (($12) + 1)|0;
    $i = $13;
   }
   $14 = $all_ppu_cc;
   $15 = (($14) + 3)|0;
   $all_ppu_cc = $15;
  }
 }
 $16 = $all_ppu_cc;
 STACKTOP = sp;return ($16|0);
}
function __Z8NESResetv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __Z8MAPResetv();
 __Z8APUResetv();
 __Z8CPUResetv();
 __Z8PPUResetv();
 __Z8PADResetv();
 return;
}
function __Z8PROMPeekt($addr) {
 $addr = $addr|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $bank = 0, $page = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $addr;
 $1 = $0;
 $2 = $1&65535;
 $3 = (($2) - 32768)|0;
 $4 = $3&65535;
 $0 = $4;
 $5 = $0;
 $6 = $5&65535;
 $7 = $6 >> 13;
 $8 = $7 & 3;
 $9 = $8&255;
 $page = $9;
 $10 = $page;
 $11 = (__ZL8PROMBankh($10)|0);
 $bank = $11;
 $12 = $0;
 $13 = $12&65535;
 $14 = $13 & 8191;
 $15 = $bank;
 $16 = (($15) + ($14)|0);
 $17 = HEAP8[$16>>0]|0;
 STACKTOP = sp;return ($17|0);
}
function __Z8PROMPoketh($addr,$data) {
 $addr = $addr|0;
 $data = $data|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $addr;
 $1 = $data;
 $2 = $0;
 $3 = $1;
 __Z7MAPPoketh($2,$3);
 STACKTOP = sp;return;
}
function __Z8VROMPeekt($addr) {
 $addr = $addr|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $bank = 0, $page = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $addr;
 $1 = $0;
 $2 = $1&65535;
 $3 = $2 >> 10;
 $4 = $3 & 7;
 $5 = $4&255;
 $page = $5;
 $6 = $page;
 $7 = (__ZL8VROMBankh($6)|0);
 $bank = $7;
 $8 = $0;
 $9 = $8&65535;
 $10 = $9 & 1023;
 $11 = $bank;
 $12 = (($11) + ($10)|0);
 $13 = HEAP8[$12>>0]|0;
 STACKTOP = sp;return ($13|0);
}
function __Z8VROMPoketh($addr,$data) {
 $addr = $addr|0;
 $data = $data|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $bank = 0, $page = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $addr;
 $1 = $data;
 $2 = $0;
 $3 = $2&65535;
 $4 = $3 >> 10;
 $5 = $4 & 7;
 $6 = $5&255;
 $page = $6;
 $7 = $page;
 $8 = (__ZL8VROMBankh($7)|0);
 $bank = $8;
 $9 = $1;
 $10 = $0;
 $11 = $10&65535;
 $12 = $11 & 1023;
 $13 = $bank;
 $14 = (($13) + ($12)|0);
 HEAP8[$14>>0] = $9;
 STACKTOP = sp;return;
}
function __Z13SetVRAMMirrorh($type) {
 $type = $type|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $type;
 $1 = $0;
 HEAP8[452872>>0] = $1;
 __ZL13SetVRAMMirrorv();
 STACKTOP = sp;return;
}
function __Z15SetPROM_8K_Bankht($page,$bank) {
 $page = $page|0;
 $bank = $bank|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $page;
 $1 = $bank;
 $2 = $1;
 $3 = $2&65535;
 $4 = HEAP16[433124>>1]|0;
 $5 = $4&65535;
 $6 = (($3|0) % ($5|0))&-1;
 $7 = $6&65535;
 $1 = $7;
 $8 = $1;
 $9 = $0;
 $10 = $9&255;
 $11 = (433128 + ($10<<1)|0);
 HEAP16[$11>>1] = $8;
 $12 = HEAP32[426684>>2]|0;
 $13 = $1;
 $14 = $13&65535;
 $15 = $14<<13;
 $16 = (($12) + ($15)|0);
 $17 = $0;
 $18 = $17&255;
 $19 = (426688 + ($18<<2)|0);
 HEAP32[$19>>2] = $16;
 STACKTOP = sp;return;
}
function __Z16SetPROM_16K_Bankht($page,$bank) {
 $page = $page|0;
 $bank = $bank|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $page;
 $1 = $bank;
 $2 = $0;
 $3 = $2&255;
 $4 = (($3) + 0)|0;
 $5 = $4&255;
 $6 = $1;
 $7 = $6&65535;
 $8 = $7<<1;
 $9 = (($8) + 0)|0;
 $10 = $9&65535;
 __Z15SetPROM_8K_Bankht($5,$10);
 $11 = $0;
 $12 = $11&255;
 $13 = (($12) + 1)|0;
 $14 = $13&255;
 $15 = $1;
 $16 = $15&65535;
 $17 = $16<<1;
 $18 = (($17) + 1)|0;
 $19 = $18&65535;
 __Z15SetPROM_8K_Bankht($14,$19);
 STACKTOP = sp;return;
}
function __Z16SetPROM_32K_Bankt($bank) {
 $bank = $bank|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $bank;
 $1 = $0;
 $2 = $1&65535;
 $3 = $2<<2;
 $4 = (($3) + 0)|0;
 $5 = $4&65535;
 __Z15SetPROM_8K_Bankht(0,$5);
 $6 = $0;
 $7 = $6&65535;
 $8 = $7<<2;
 $9 = (($8) + 1)|0;
 $10 = $9&65535;
 __Z15SetPROM_8K_Bankht(1,$10);
 $11 = $0;
 $12 = $11&65535;
 $13 = $12<<2;
 $14 = (($13) + 2)|0;
 $15 = $14&65535;
 __Z15SetPROM_8K_Bankht(2,$15);
 $16 = $0;
 $17 = $16&65535;
 $18 = $17<<2;
 $19 = (($18) + 3)|0;
 $20 = $19&65535;
 __Z15SetPROM_8K_Bankht(3,$20);
 STACKTOP = sp;return;
}
function __Z15SetVROM_1K_Bankht($page,$bank) {
 $page = $page|0;
 $bank = $bank|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $page;
 $1 = $bank;
 $2 = $1;
 $3 = $2&65535;
 $4 = HEAP16[433126>>1]|0;
 $5 = $4&65535;
 $6 = (($3|0) % ($5|0))&-1;
 $7 = $6&65535;
 $1 = $7;
 $8 = $1;
 $9 = $0;
 $10 = $9&255;
 $11 = (433136 + ($10<<1)|0);
 HEAP16[$11>>1] = $8;
 $12 = HEAP32[426704>>2]|0;
 $13 = $1;
 $14 = $13&65535;
 $15 = $14<<10;
 $16 = (($12) + ($15)|0);
 $17 = $0;
 $18 = $17&255;
 $19 = (426708 + ($18<<2)|0);
 HEAP32[$19>>2] = $16;
 STACKTOP = sp;return;
}
function __Z15SetVROM_4K_Bankht($page,$bank) {
 $page = $page|0;
 $bank = $bank|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $page;
 $1 = $bank;
 $2 = $0;
 $3 = $2&255;
 $4 = (($3) + 0)|0;
 $5 = $4&255;
 $6 = $1;
 $7 = $6&65535;
 $8 = $7<<2;
 $9 = (($8) + 0)|0;
 $10 = $9&65535;
 __Z15SetVROM_1K_Bankht($5,$10);
 $11 = $0;
 $12 = $11&255;
 $13 = (($12) + 1)|0;
 $14 = $13&255;
 $15 = $1;
 $16 = $15&65535;
 $17 = $16<<2;
 $18 = (($17) + 1)|0;
 $19 = $18&65535;
 __Z15SetVROM_1K_Bankht($14,$19);
 $20 = $0;
 $21 = $20&255;
 $22 = (($21) + 2)|0;
 $23 = $22&255;
 $24 = $1;
 $25 = $24&65535;
 $26 = $25<<2;
 $27 = (($26) + 2)|0;
 $28 = $27&65535;
 __Z15SetVROM_1K_Bankht($23,$28);
 $29 = $0;
 $30 = $29&255;
 $31 = (($30) + 3)|0;
 $32 = $31&255;
 $33 = $1;
 $34 = $33&65535;
 $35 = $34<<2;
 $36 = (($35) + 3)|0;
 $37 = $36&65535;
 __Z15SetVROM_1K_Bankht($32,$37);
 STACKTOP = sp;return;
}
function __Z15SetVROM_8K_Bankt($bank) {
 $bank = $bank|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $bank;
 $1 = $0;
 $2 = $1&65535;
 $3 = $2<<3;
 $4 = (($3) + 0)|0;
 $5 = $4&65535;
 __Z15SetVROM_1K_Bankht(0,$5);
 $6 = $0;
 $7 = $6&65535;
 $8 = $7<<3;
 $9 = (($8) + 1)|0;
 $10 = $9&65535;
 __Z15SetVROM_1K_Bankht(1,$10);
 $11 = $0;
 $12 = $11&65535;
 $13 = $12<<3;
 $14 = (($13) + 2)|0;
 $15 = $14&65535;
 __Z15SetVROM_1K_Bankht(2,$15);
 $16 = $0;
 $17 = $16&65535;
 $18 = $17<<3;
 $19 = (($18) + 3)|0;
 $20 = $19&65535;
 __Z15SetVROM_1K_Bankht(3,$20);
 $21 = $0;
 $22 = $21&65535;
 $23 = $22<<3;
 $24 = (($23) + 4)|0;
 $25 = $24&65535;
 __Z15SetVROM_1K_Bankht(4,$25);
 $26 = $0;
 $27 = $26&65535;
 $28 = $27<<3;
 $29 = (($28) + 5)|0;
 $30 = $29&65535;
 __Z15SetVROM_1K_Bankht(5,$30);
 $31 = $0;
 $32 = $31&65535;
 $33 = $32<<3;
 $34 = (($33) + 6)|0;
 $35 = $34&65535;
 __Z15SetVROM_1K_Bankht(6,$35);
 $36 = $0;
 $37 = $36&65535;
 $38 = $37<<3;
 $39 = (($38) + 7)|0;
 $40 = $39&65535;
 __Z15SetVROM_1K_Bankht(7,$40);
 STACKTOP = sp;return;
}
function __Z8LoadCartPKh($rom) {
 $rom = $rom|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $CHRoffset = 0, $CHRsize = 0, $PRGoffset = 0, $PRGsize = 0, $header = 0, $nPROM = 0, $nVROM = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $rom;
 $1 = $0;
 $header = $1;
 $2 = $header;
 $3 = ((($2)) + 4|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = $4&255;
 $6 = $5<<14;
 $PRGsize = $6;
 $7 = $header;
 $8 = ((($7)) + 5|0);
 $9 = HEAP8[$8>>0]|0;
 $10 = $9&255;
 $11 = $10<<13;
 $CHRsize = $11;
 $PRGoffset = 16;
 $12 = $PRGoffset;
 $13 = $PRGsize;
 $14 = (($12) + ($13))|0;
 $CHRoffset = $14;
 $15 = $0;
 $16 = $PRGoffset;
 $17 = (($15) + ($16)|0);
 HEAP32[426684>>2] = $17;
 $18 = $0;
 $19 = $CHRoffset;
 $20 = (($18) + ($19)|0);
 HEAP32[426704>>2] = $20;
 $21 = $header;
 $22 = ((($21)) + 4|0);
 $23 = HEAP8[$22>>0]|0;
 $nPROM = $23;
 $24 = $header;
 $25 = ((($24)) + 5|0);
 $26 = HEAP8[$25>>0]|0;
 $nVROM = $26;
 HEAP8[452871>>0] = 0;
 $27 = $nVROM;
 $28 = $27&255;
 $29 = ($28|0)==(0);
 if ($29) {
  HEAP8[452871>>0] = 1;
  $nVROM = 1;
  HEAP32[426704>>2] = 452873;
 }
 $30 = $nPROM;
 $31 = $30&255;
 $32 = $31<<1;
 $33 = $32&65535;
 HEAP16[433124>>1] = $33;
 $34 = $nVROM;
 $35 = $34&255;
 $36 = $35<<3;
 $37 = $36&65535;
 HEAP16[433126>>1] = $37;
 $38 = $header;
 $39 = ((($38)) + 6|0);
 $40 = HEAP8[$39>>0]|0;
 $41 = $40&255;
 $42 = $41 & 8;
 $43 = ($42|0)!=(0);
 do {
  if ($43) {
   HEAP8[452872>>0] = 2;
  } else {
   $44 = $header;
   $45 = ((($44)) + 6|0);
   $46 = HEAP8[$45>>0]|0;
   $47 = $46&255;
   $48 = $47 & 1;
   $49 = ($48|0)!=(0);
   if ($49) {
    HEAP8[452872>>0] = 1;
    break;
   } else {
    HEAP8[452872>>0] = 0;
    break;
   }
  }
 } while(0);
 __ZL13SetVRAMMirrorv();
 $50 = $header;
 $51 = ((($50)) + 6|0);
 $52 = HEAP8[$51>>0]|0;
 $53 = $52&255;
 $54 = $53 >> 4;
 $55 = $54 & 15;
 $56 = $header;
 $57 = ((($56)) + 7|0);
 $58 = HEAP8[$57>>0]|0;
 $59 = $58&255;
 $60 = $59 & 240;
 $61 = $55 | $60;
 $62 = $61&255;
 __Z9SetMapperh($62);
 STACKTOP = sp;return;
}
function __ZL8PROMBankh($page) {
 $page = $page|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $page;
 $1 = $0;
 $2 = $1&255;
 $3 = (426688 + ($2<<2)|0);
 $4 = HEAP32[$3>>2]|0;
 STACKTOP = sp;return ($4|0);
}
function __ZL8VROMBankh($page) {
 $page = $page|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $page;
 $1 = $0;
 $2 = $1&255;
 $3 = (426708 + ($2<<2)|0);
 $4 = HEAP32[$3>>2]|0;
 STACKTOP = sp;return ($4|0);
}
function __ZL13SetVRAMMirrorv() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[452872>>0]|0;
 $1 = $0&255;
 switch ($1|0) {
 case 0:  {
  __Z11SetVRAMBankhhhh(0,0,1,1);
  return;
  break;
 }
 case 1:  {
  __Z11SetVRAMBankhhhh(0,1,0,1);
  return;
  break;
 }
 case 3:  {
  __Z11SetVRAMBankhhhh(0,0,0,0);
  return;
  break;
 }
 case 4:  {
  __Z11SetVRAMBankhhhh(1,1,1,1);
  return;
  break;
 }
 case 2:  {
  __Z11SetVRAMBankhhhh(0,1,2,3);
  return;
  break;
 }
 default: {
  return;
 }
 }
}
function __Z15GetPaletteColort($index) {
 $index = $index|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $index;
 $1 = $0;
 $2 = $1&65535;
 $3 = $2 & 511;
 $4 = (426740 + ($3<<2)|0);
 $5 = HEAP32[$4>>2]|0;
 STACKTOP = sp;return ($5|0);
}
function __Z7PADSyncv() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__Z10PADSubSynch(0)|0);
 HEAP8[461065>>0] = $0;
 $1 = (__Z10PADSubSynch(1)|0);
 HEAP8[(461066)>>0] = $1;
 $2 = (__Z10PADSubSynch(2)|0);
 HEAP8[(461067)>>0] = $2;
 $3 = (__Z10PADSubSynch(3)|0);
 HEAP8[(461068)>>0] = $3;
 return;
}
function __Z11PADReadBytet($addr) {
 $addr = $addr|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $data = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $addr;
 $data = 0;
 $1 = $0;
 $2 = $1&65535;
 $3 = ($2|0)==(16406);
 if ($3) {
  $4 = HEAP8[461069>>0]|0;
  $5 = $4&255;
  $6 = $5 & 1;
  $7 = $6&255;
  $data = $7;
  $8 = HEAP8[461069>>0]|0;
  $9 = $8&255;
  $10 = $9 >> 1;
  $11 = $10&255;
  HEAP8[461069>>0] = $11;
  $12 = HEAP8[461070>>0]|0;
  $13 = $12&255;
  $14 = $13 & 1;
  $15 = $14 << 1;
  $16 = $data;
  $17 = $16&255;
  $18 = $17 | $15;
  $19 = $18&255;
  $data = $19;
  $20 = HEAP8[461070>>0]|0;
  $21 = $20&255;
  $22 = $21 >> 1;
  $23 = $22&255;
  HEAP8[461070>>0] = $23;
  $24 = (__Z11KEYRead4016v()|0);
  $25 = $24&255;
  $26 = $data;
  $27 = $26&255;
  $28 = $27 | $25;
  $29 = $28&255;
  $data = $29;
  $59 = $data;
  STACKTOP = sp;return ($59|0);
 }
 $30 = $0;
 $31 = $30&65535;
 $32 = ($31|0)==(16407);
 if (!($32)) {
  $59 = $data;
  STACKTOP = sp;return ($59|0);
 }
 $33 = HEAP8[461071>>0]|0;
 $34 = $33&255;
 $35 = $34 & 1;
 $36 = $35&255;
 $data = $36;
 $37 = HEAP8[461071>>0]|0;
 $38 = $37&255;
 $39 = $38 >> 1;
 $40 = $39&255;
 HEAP8[461071>>0] = $40;
 $41 = HEAP8[461072>>0]|0;
 $42 = $41&255;
 $43 = $42 & 1;
 $44 = $43 << 1;
 $45 = $data;
 $46 = $45&255;
 $47 = $46 | $44;
 $48 = $47&255;
 $data = $48;
 $49 = HEAP8[461072>>0]|0;
 $50 = $49&255;
 $51 = $50 >> 1;
 $52 = $51&255;
 HEAP8[461072>>0] = $52;
 $53 = (__Z11KEYRead4017v()|0);
 $54 = $53&255;
 $55 = $data;
 $56 = $55&255;
 $57 = $56 | $54;
 $58 = $57&255;
 $data = $58;
 $59 = $data;
 STACKTOP = sp;return ($59|0);
}
function __Z12PADWriteByteth($addr,$data) {
 $addr = $addr|0;
 $data = $data|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $addr;
 $1 = $data;
 $2 = $0;
 $3 = $2&65535;
 $4 = ($3|0)==(16406);
 if (!($4)) {
  STACKTOP = sp;return;
 }
 $5 = $1;
 $6 = $5&255;
 $7 = $6 & 1;
 $8 = ($7|0)!=(0);
 if ($8) {
  HEAP8[461073>>0] = 1;
 } else {
  $9 = HEAP8[461073>>0]|0;
  $10 = ($9<<24>>24)!=(0);
  if ($10) {
   HEAP8[461073>>0] = 0;
   __Z9PADStrobev();
  }
 }
 $11 = $1;
 __Z12KEYWrite4016h($11);
 STACKTOP = sp;return;
}
function __Z8PADResetv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[461072>>0] = 0;
 HEAP8[461070>>0] = 0;
 HEAP8[461071>>0] = 0;
 HEAP8[461069>>0] = 0;
 HEAP8[(461068)>>0] = 0;
 HEAP8[(461067)>>0] = 0;
 HEAP8[(461066)>>0] = 0;
 HEAP8[461065>>0] = 0;
 HEAP8[461073>>0] = 0;
 __Z8KEYResetv();
 return;
}
function __Z9PADStrobev() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[461065>>0]|0;
 HEAP8[461069>>0] = $0;
 $1 = HEAP8[(461066)>>0]|0;
 HEAP8[461071>>0] = $1;
 $2 = HEAP8[(461067)>>0]|0;
 HEAP8[461070>>0] = $2;
 $3 = HEAP8[(461068)>>0]|0;
 HEAP8[461072>>0] = $3;
 return;
}
function __Z8KEYResetv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[461586>>0] = 0;
 HEAP8[461587>>0] = 0;
 HEAP8[461588>>0] = 0;
 return;
}
function __Z11KEYRead4016v() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __Z11KEYRead4017v() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0;
 var $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0;
 var $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0;
 var $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0;
 var $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $data = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $data = -1;
 $1 = HEAP8[461588>>0]|0;
 $2 = $1&255;
 L1: do {
  switch ($2|0) {
  case 1:  {
   $3 = HEAP8[461587>>0]|0;
   $4 = $3&1;
   if ($4) {
    $5 = HEAP8[(461126)>>0]|0;
    $6 = ($5<<24>>24)!=(0);
    if ($6) {
     $7 = $data;
     $8 = $7&255;
     $9 = $8 & -3;
     $10 = $9&255;
     $data = $10;
    }
    $11 = HEAP8[(461177)>>0]|0;
    $12 = ($11<<24>>24)!=(0);
    if ($12) {
     $13 = $data;
     $14 = $13&255;
     $15 = $14 & -5;
     $16 = $15&255;
     $data = $16;
    }
    $17 = HEAP8[(461176)>>0]|0;
    $18 = ($17<<24>>24)!=(0);
    if ($18) {
     $19 = $data;
     $20 = $19&255;
     $21 = $20 & -9;
     $22 = $21&255;
     $data = $22;
    }
    $23 = HEAP8[(461173)>>0]|0;
    $24 = ($23<<24>>24)!=(0);
    if (!($24)) {
     break L1;
    }
    $25 = $data;
    $26 = $25&255;
    $27 = $26 & -17;
    $28 = $27&255;
    $data = $28;
    break L1;
   } else {
    $29 = HEAP8[(461134)>>0]|0;
    $30 = ($29<<24>>24)!=(0);
    if ($30) {
     $31 = $data;
     $32 = $31&255;
     $33 = $32 & -3;
     $34 = $33&255;
     $data = $34;
    }
    $35 = HEAP8[(461175)>>0]|0;
    $36 = ($35<<24>>24)!=(0);
    if ($36) {
     $37 = $data;
     $38 = $37&255;
     $39 = $38 & -5;
     $40 = $39&255;
     $data = $40;
    }
    $41 = HEAP8[(461127)>>0]|0;
    $42 = ($41<<24>>24)!=(0);
    if ($42) {
     $43 = $data;
     $44 = $43&255;
     $45 = $44 & -9;
     $46 = $45&255;
     $data = $46;
    }
    $47 = HEAP8[(461192)>>0]|0;
    $48 = ($47<<24>>24)!=(0);
    if (!($48)) {
     break L1;
    }
    $49 = $data;
    $50 = $49&255;
    $51 = $50 & -17;
    $52 = $51&255;
    $data = $52;
    break L1;
   }
   break;
  }
  case 2:  {
   $53 = HEAP8[461587>>0]|0;
   $54 = $53&1;
   if ($54) {
    $55 = HEAP8[(461124)>>0]|0;
    $56 = ($55<<24>>24)!=(0);
    if ($56) {
     $57 = $data;
     $58 = $57&255;
     $59 = $58 & -3;
     $60 = $59&255;
     $data = $60;
    }
    $61 = HEAP8[(461174)>>0]|0;
    $62 = ($61<<24>>24)!=(0);
    if ($62) {
     $63 = $data;
     $64 = $63&255;
     $65 = $64 & -5;
     $66 = $65&255;
     $data = $66;
    }
    $67 = HEAP8[(461189)>>0]|0;
    $68 = ($67<<24>>24)!=(0);
    if ($68) {
     $69 = $data;
     $70 = $69&255;
     $71 = $70 & -9;
     $72 = $71&255;
     $data = $72;
    }
    $73 = HEAP8[(461281)>>0]|0;
    $74 = ($73<<24>>24)!=(0);
    if (!($74)) {
     break L1;
    }
    $75 = $data;
    $76 = $75&255;
    $77 = $76 & -17;
    $78 = $77&255;
    $data = $78;
    break L1;
   } else {
    $79 = HEAP8[(461133)>>0]|0;
    $80 = ($79<<24>>24)!=(0);
    if ($80) {
     $81 = $data;
     $82 = $81&255;
     $83 = $82 & -3;
     $84 = $83&255;
     $data = $84;
    }
    $85 = HEAP8[(461193)>>0]|0;
    $86 = ($85<<24>>24)!=(0);
    if ($86) {
     $87 = $data;
     $88 = $87&255;
     $89 = $88 & -5;
     $90 = $89&255;
     $data = $90;
    }
    $91 = HEAP8[(461125)>>0]|0;
    $92 = ($91<<24>>24)!=(0);
    if ($92) {
     $93 = $data;
     $94 = $93&255;
     $95 = $94 & -9;
     $96 = $95&255;
     $data = $96;
    }
    $97 = HEAP8[(461194)>>0]|0;
    $98 = ($97<<24>>24)!=(0);
    if (!($98)) {
     break L1;
    }
    $99 = $data;
    $100 = $99&255;
    $101 = $100 & -17;
    $102 = $101&255;
    $data = $102;
    break L1;
   }
   break;
  }
  case 3:  {
   $103 = HEAP8[461587>>0]|0;
   $104 = $103&1;
   if ($104) {
    $105 = HEAP8[(461284)>>0]|0;
    $106 = ($105<<24>>24)!=(0);
    if ($106) {
     $107 = $data;
     $108 = $107&255;
     $109 = $108 & -3;
     $110 = $109&255;
     $data = $110;
    }
    $111 = HEAP8[(461082)>>0]|0;
    $112 = ($111<<24>>24)!=(0);
    if ($112) {
     $113 = $data;
     $114 = $113&255;
     $115 = $114 & -5;
     $116 = $115&255;
     $data = $116;
    }
    $117 = HEAP8[(461283)>>0]|0;
    $118 = ($117<<24>>24)!=(0);
    if ($118) {
     $119 = $data;
     $120 = $119&255;
     $121 = $120 & -9;
     $122 = $121&255;
     $data = $122;
    }
    $123 = HEAP8[(461279)>>0]|0;
    $124 = ($123<<24>>24)!=(0);
    if (!($124)) {
     break L1;
    }
    $125 = $data;
    $126 = $125&255;
    $127 = $126 & -17;
    $128 = $127&255;
    $data = $128;
    break L1;
   } else {
    $129 = HEAP8[(461363)>>0]|0;
    $130 = ($129<<24>>24)!=(0);
    if ($130) {
     $131 = $data;
     $132 = $131&255;
     $133 = $132 & -3;
     $134 = $133&255;
     $data = $134;
    }
    $135 = HEAP8[(461275)>>0]|0;
    $136 = ($135<<24>>24)!=(0);
    if ($136) {
     $137 = $data;
     $138 = $137&255;
     $139 = $138 & -5;
     $140 = $139&255;
     $data = $140;
    }
    $141 = HEAP8[(461285)>>0]|0;
    $142 = ($141<<24>>24)!=(0);
    if ($142) {
     $143 = $data;
     $144 = $143&255;
     $145 = $144 & -9;
     $146 = $145&255;
     $data = $146;
    }
    $147 = HEAP8[(461273)>>0]|0;
    $148 = ($147<<24>>24)!=(0);
    if (!($148)) {
     break L1;
    }
    $149 = $data;
    $150 = $149&255;
    $151 = $150 & -17;
    $152 = $151&255;
    $data = $152;
    break L1;
   }
   break;
  }
  case 4:  {
   $153 = HEAP8[461587>>0]|0;
   $154 = $153&1;
   if ($154) {
    $155 = HEAP8[(461131)>>0]|0;
    $156 = ($155<<24>>24)!=(0);
    if ($156) {
     $157 = $data;
     $158 = $157&255;
     $159 = $158 & -3;
     $160 = $159&255;
     $data = $160;
    }
    $161 = HEAP8[(461179)>>0]|0;
    $162 = ($161<<24>>24)!=(0);
    if ($162) {
     $163 = $data;
     $164 = $163&255;
     $165 = $164 & -5;
     $166 = $165&255;
     $data = $166;
    }
    $167 = HEAP8[(461182)>>0]|0;
    $168 = ($167<<24>>24)!=(0);
    if ($168) {
     $169 = $data;
     $170 = $169&255;
     $171 = $170 & -9;
     $172 = $171&255;
     $data = $172;
    }
    $173 = HEAP8[(461118)>>0]|0;
    $174 = ($173<<24>>24)!=(0);
    if (!($174)) {
     break L1;
    }
    $175 = $data;
    $176 = $175&255;
    $177 = $176 & -17;
    $178 = $177&255;
    $data = $178;
    break L1;
   } else {
    $179 = HEAP8[(461137)>>0]|0;
    $180 = ($179<<24>>24)!=(0);
    if ($180) {
     $181 = $data;
     $182 = $181&255;
     $183 = $182 & -3;
     $184 = $183&255;
     $data = $184;
    }
    $185 = HEAP8[(461185)>>0]|0;
    $186 = ($185<<24>>24)!=(0);
    if ($186) {
     $187 = $data;
     $188 = $187&255;
     $189 = $188 & -5;
     $190 = $189&255;
     $data = $190;
    }
    $191 = HEAP8[(461122)>>0]|0;
    $192 = ($191<<24>>24)!=(0);
    if ($192) {
     $193 = $data;
     $194 = $193&255;
     $195 = $194 & -9;
     $196 = $195&255;
     $data = $196;
    }
    $197 = HEAP8[(461120)>>0]|0;
    $198 = ($197<<24>>24)!=(0);
    if (!($198)) {
     break L1;
    }
    $199 = $data;
    $200 = $199&255;
    $201 = $200 & -17;
    $202 = $201&255;
    $data = $202;
    break L1;
   }
   break;
  }
  case 5:  {
   $203 = HEAP8[461587>>0]|0;
   $204 = $203&1;
   if ($204) {
    $205 = HEAP8[(461167)>>0]|0;
    $206 = ($205<<24>>24)!=(0);
    if ($206) {
     $207 = $data;
     $208 = $207&255;
     $209 = $208 & -3;
     $210 = $209&255;
     $data = $210;
    }
    $211 = HEAP8[(461087)>>0]|0;
    $212 = ($211<<24>>24)!=(0);
    if ($212) {
     $213 = $data;
     $214 = $213&255;
     $215 = $214 & -5;
     $216 = $215&255;
     $data = $216;
    }
    $217 = HEAP8[(461274)>>0]|0;
    $218 = ($217<<24>>24)!=(0);
    if ($218) {
     $219 = $data;
     $220 = $219&255;
     $221 = $220 & -9;
     $222 = $221&255;
     $data = $222;
    }
    $223 = HEAP8[(461277)>>0]|0;
    $224 = ($223<<24>>24)!=(0);
    if (!($224)) {
     break L1;
    }
    $225 = $data;
    $226 = $225&255;
    $227 = $226 & -17;
    $228 = $227&255;
    $data = $228;
    break L1;
   } else {
    $229 = HEAP8[(461139)>>0]|0;
    $230 = ($229<<24>>24)!=(0);
    if ($230) {
     $231 = $data;
     $232 = $231&255;
     $233 = $232 & -3;
     $234 = $233&255;
     $data = $234;
    }
    $235 = HEAP8[(461165)>>0]|0;
    $236 = ($235<<24>>24)!=(0);
    if ($236) {
     $237 = $data;
     $238 = $237&255;
     $239 = $238 & -5;
     $240 = $239&255;
     $data = $240;
    }
    $241 = HEAP8[(461117)>>0]|0;
    $242 = ($241<<24>>24)!=(0);
    if ($242) {
     $243 = $data;
     $244 = $243&255;
     $245 = $244 & -9;
     $246 = $245&255;
     $data = $246;
    }
    $247 = HEAP8[(461282)>>0]|0;
    $248 = ($247<<24>>24)!=(0);
    if (!($248)) {
     break L1;
    }
    $249 = $data;
    $250 = $249&255;
    $251 = $250 & -17;
    $252 = $251&255;
    $data = $252;
    break L1;
   }
   break;
  }
  case 6:  {
   $253 = HEAP8[461587>>0]|0;
   $254 = $253&1;
   if ($254) {
    $255 = HEAP8[(461187)>>0]|0;
    $256 = ($255<<24>>24)!=(0);
    if ($256) {
     $257 = $data;
     $258 = $257&255;
     $259 = $258 & -3;
     $260 = $259&255;
     $data = $260;
    }
    $261 = HEAP8[(461132)>>0]|0;
    $262 = ($261<<24>>24)!=(0);
    if ($262) {
     $263 = $data;
     $264 = $263&255;
     $265 = $264 & -5;
     $266 = $265&255;
     $data = $266;
    }
    $267 = HEAP8[(461196)>>0]|0;
    $268 = ($267<<24>>24)!=(0);
    if ($268) {
     $269 = $data;
     $270 = $269&255;
     $271 = $270 & -9;
     $272 = $271&255;
     $data = $272;
    }
    $273 = HEAP8[(461083)>>0]|0;
    $274 = ($273<<24>>24)!=(0);
    if (!($274)) {
     break L1;
    }
    $275 = $data;
    $276 = $275&255;
    $277 = $276 & -17;
    $278 = $277&255;
    $data = $278;
    break L1;
   } else {
    $279 = HEAP8[(461101)>>0]|0;
    $280 = ($279<<24>>24)!=(0);
    if ($280) {
     $281 = $data;
     $282 = $281&255;
     $283 = $282 & -3;
     $284 = $283&255;
     $data = $284;
    }
    $285 = HEAP8[(461171)>>0]|0;
    $286 = ($285<<24>>24)!=(0);
    if ($286) {
     $287 = $data;
     $288 = $287&255;
     $289 = $288 & -5;
     $290 = $289&255;
     $data = $290;
    }
    $291 = HEAP8[(461123)>>0]|0;
    $292 = ($291<<24>>24)!=(0);
    if ($292) {
     $293 = $data;
     $294 = $293&255;
     $295 = $294 & -9;
     $296 = $295&255;
     $data = $296;
    }
    $297 = HEAP8[(461103)>>0]|0;
    $298 = ($297<<24>>24)!=(0);
    if (!($298)) {
     break L1;
    }
    $299 = $data;
    $300 = $299&255;
    $301 = $300 & -17;
    $302 = $301&255;
    $data = $302;
    break L1;
   }
   break;
  }
  case 7:  {
   $303 = HEAP8[461587>>0]|0;
   $304 = $303&1;
   if ($304) {
    $305 = HEAP8[(461129)>>0]|0;
    $306 = ($305<<24>>24)!=(0);
    if ($306) {
     $307 = $data;
     $308 = $307&255;
     $309 = $308 & -3;
     $310 = $309&255;
     $data = $310;
    }
    $311 = HEAP8[(461195)>>0]|0;
    $312 = ($311<<24>>24)!=(0);
    if ($312) {
     $313 = $data;
     $314 = $313&255;
     $315 = $314 & -5;
     $316 = $315&255;
     $data = $316;
    }
    $317 = HEAP8[(461181)>>0]|0;
    $318 = ($317<<24>>24)!=(0);
    if ($318) {
     $319 = $data;
     $320 = $319&255;
     $321 = $320 & -9;
     $322 = $321&255;
     $data = $322;
    }
    $323 = HEAP8[(461183)>>0]|0;
    $324 = ($323<<24>>24)!=(0);
    if (!($324)) {
     break L1;
    }
    $325 = $data;
    $326 = $325&255;
    $327 = $326 & -17;
    $328 = $327&255;
    $data = $328;
    break L1;
   } else {
    $329 = HEAP8[(461136)>>0]|0;
    $330 = ($329<<24>>24)!=(0);
    if ($330) {
     $331 = $data;
     $332 = $331&255;
     $333 = $332 & -3;
     $334 = $333&255;
     $data = $334;
    }
    $335 = HEAP8[(461191)>>0]|0;
    $336 = ($335<<24>>24)!=(0);
    if ($336) {
     $337 = $data;
     $338 = $337&255;
     $339 = $338 & -5;
     $340 = $339&255;
     $data = $340;
    }
    $341 = HEAP8[(461130)>>0]|0;
    $342 = ($341<<24>>24)!=(0);
    if ($342) {
     $343 = $data;
     $344 = $343&255;
     $345 = $344 & -9;
     $346 = $345&255;
     $data = $346;
    }
    $347 = HEAP8[(461180)>>0]|0;
    $348 = ($347<<24>>24)!=(0);
    if (!($348)) {
     break L1;
    }
    $349 = $data;
    $350 = $349&255;
    $351 = $350 & -17;
    $352 = $351&255;
    $data = $352;
    break L1;
   }
   break;
  }
  case 8:  {
   $353 = HEAP8[461587>>0]|0;
   $354 = $353&1;
   if ($354) {
    $355 = HEAP8[(461119)>>0]|0;
    $356 = ($355<<24>>24)!=(0);
    if ($356) {
     $357 = $data;
     $358 = $357&255;
     $359 = $358 & -3;
     $360 = $359&255;
     $data = $360;
    }
    $361 = HEAP8[(461113)>>0]|0;
    $362 = ($361<<24>>24)!=(0);
    if ($362) {
     $363 = $data;
     $364 = $363&255;
     $365 = $364 & -5;
     $366 = $365&255;
     $data = $366;
    }
    $367 = HEAP8[(461114)>>0]|0;
    $368 = ($367<<24>>24)!=(0);
    if ($368) {
     $369 = $data;
     $370 = $369&255;
     $371 = $370 & -9;
     $372 = $371&255;
     $data = $372;
    }
    $373 = HEAP8[(461127)>>0]|0;
    $374 = ($373<<24>>24)!=(0);
    if (!($374)) {
     break L1;
    }
    $375 = $data;
    $376 = $375&255;
    $377 = $376 & -17;
    $378 = $377&255;
    $data = $378;
    break L1;
   } else {
    $379 = HEAP8[(461138)>>0]|0;
    $380 = ($379<<24>>24)!=(0);
    if ($380) {
     $381 = $data;
     $382 = $381&255;
     $383 = $382 & -3;
     $384 = $383&255;
     $data = $384;
    }
    $385 = HEAP8[(461186)>>0]|0;
    $386 = ($385<<24>>24)!=(0);
    if ($386) {
     $387 = $data;
     $388 = $387&255;
     $389 = $388 & -5;
     $390 = $389&255;
     $data = $390;
    }
    $391 = HEAP8[(461135)>>0]|0;
    $392 = ($391<<24>>24)!=(0);
    if ($392) {
     $393 = $data;
     $394 = $393&255;
     $395 = $394 & -9;
     $396 = $395&255;
     $data = $396;
    }
    $397 = HEAP8[(461378)>>0]|0;
    $398 = ($397<<24>>24)!=(0);
    $399 = HEAP8[(461377)>>0]|0;
    $400 = ($399<<24>>24)!=(0);
    $or$cond = $398 | $400;
    if (!($or$cond)) {
     break L1;
    }
    $401 = $data;
    $402 = $401&255;
    $403 = $402 & -17;
    $404 = $403&255;
    $data = $404;
    break L1;
   }
   break;
  }
  case 9:  {
   $405 = HEAP8[461587>>0]|0;
   $406 = $405&1;
   if ($406) {
    $407 = HEAP8[(461190)>>0]|0;
    $408 = ($407<<24>>24)!=(0);
    if ($408) {
     $409 = $data;
     $410 = $409&255;
     $411 = $410 & -3;
     $412 = $411&255;
     $data = $412;
    }
    $413 = HEAP8[(461178)>>0]|0;
    $414 = ($413<<24>>24)!=(0);
    if ($414) {
     $415 = $data;
     $416 = $415&255;
     $417 = $416 & -5;
     $418 = $417&255;
     $data = $418;
    }
    $419 = HEAP8[(461184)>>0]|0;
    $420 = ($419<<24>>24)!=(0);
    if ($420) {
     $421 = $data;
     $422 = $421&255;
     $423 = $422 & -9;
     $424 = $423&255;
     $data = $424;
    }
    $425 = HEAP8[(461106)>>0]|0;
    $426 = ($425<<24>>24)!=(0);
    if (!($426)) {
     break L1;
    }
    $427 = $data;
    $428 = $427&255;
    $429 = $428 & -17;
    $430 = $429&255;
    $data = $430;
    break L1;
   } else {
    $431 = HEAP8[(461135)>>0]|0;
    $432 = ($431<<24>>24)!=(0);
    if ($432) {
     $433 = $data;
     $434 = $433&255;
     $435 = $434 & -3;
     $436 = $435&255;
     $data = $436;
    }
    $437 = HEAP8[(461188)>>0]|0;
    $438 = ($437<<24>>24)!=(0);
    if ($438) {
     $439 = $data;
     $440 = $439&255;
     $441 = $440 & -5;
     $442 = $441&255;
     $data = $442;
    }
    $443 = HEAP8[(461128)>>0]|0;
    $444 = ($443<<24>>24)!=(0);
    if ($444) {
     $445 = $data;
     $446 = $445&255;
     $447 = $446 & -9;
     $448 = $447&255;
     $data = $448;
    }
    $449 = HEAP8[(461172)>>0]|0;
    $450 = ($449<<24>>24)!=(0);
    if (!($450)) {
     break L1;
    }
    $451 = $data;
    $452 = $451&255;
    $453 = $452 & -17;
    $454 = $453&255;
    $data = $454;
    break L1;
   }
   break;
  }
  case 10:  {
   $455 = HEAP8[461587>>0]|0;
   $456 = $455&1;
   if (!($456)) {
    $457 = $data;
    $458 = $457&255;
    $459 = $458 & -3;
    $460 = $459&255;
    $data = $460;
   }
   break;
  }
  case 11:  {
   $461 = HEAP8[461587>>0]|0;
   $462 = $461&1;
   if ($462) {
    $463 = HEAP8[(461130)>>0]|0;
    $464 = ($463<<24>>24)!=(0);
    if ($464) {
     $465 = $data;
     $466 = $465&255;
     $467 = $466 & -3;
     $468 = $467&255;
     $data = $468;
    }
    $469 = HEAP8[(461149)>>0]|0;
    $470 = ($469<<24>>24)!=(0);
    if ($470) {
     $471 = $data;
     $472 = $471&255;
     $473 = $472 & -5;
     $474 = $473&255;
     $data = $474;
    }
    $475 = HEAP8[(461145)>>0]|0;
    $476 = ($475<<24>>24)!=(0);
    if ($476) {
     $477 = $data;
     $478 = $477&255;
     $479 = $478 & -9;
     $480 = $479&255;
     $data = $480;
    }
    $481 = HEAP8[(461161)>>0]|0;
    $482 = ($481<<24>>24)!=(0);
    if (!($482)) {
     break L1;
    }
    $483 = $data;
    $484 = $483&255;
    $485 = $484 & -17;
    $486 = $485&255;
    $data = $486;
    break L1;
   } else {
    $487 = HEAP8[(461162)>>0]|0;
    $488 = ($487<<24>>24)!=(0);
    if ($488) {
     $489 = $data;
     $490 = $489&255;
     $491 = $490 & -3;
     $492 = $491&255;
     $data = $492;
    }
    $493 = HEAP8[(461153)>>0]|0;
    $494 = ($493<<24>>24)!=(0);
    if ($494) {
     $495 = $data;
     $496 = $495&255;
     $497 = $496 & -5;
     $498 = $497&255;
     $data = $498;
    }
    $499 = HEAP8[(461154)>>0]|0;
    $500 = ($499<<24>>24)!=(0);
    if ($500) {
     $501 = $data;
     $502 = $501&255;
     $503 = $502 & -9;
     $504 = $503&255;
     $data = $504;
    }
    $505 = HEAP8[(461146)>>0]|0;
    $506 = ($505<<24>>24)!=(0);
    if (!($506)) {
     break L1;
    }
    $507 = $data;
    $508 = $507&255;
    $509 = $508 & -17;
    $510 = $509&255;
    $data = $510;
    break L1;
   }
   break;
  }
  case 12:  {
   $511 = HEAP8[461587>>0]|0;
   $512 = $511&1;
   if ($512) {
    $513 = HEAP8[(461148)>>0]|0;
    $514 = ($513<<24>>24)!=(0);
    if ($514) {
     $515 = $data;
     $516 = $515&255;
     $517 = $516 & -3;
     $518 = $517&255;
     $data = $518;
    }
    $519 = HEAP8[(461152)>>0]|0;
    $520 = ($519<<24>>24)!=(0);
    if ($520) {
     $521 = $data;
     $522 = $521&255;
     $523 = $522 & -5;
     $524 = $523&255;
     $data = $524;
    }
    $525 = HEAP8[(461129)>>0]|0;
    $526 = ($525<<24>>24)!=(0);
    if ($526) {
     $527 = $data;
     $528 = $527&255;
     $529 = $528 & -9;
     $530 = $529&255;
     $data = $530;
    }
    $531 = HEAP8[(461147)>>0]|0;
    $532 = ($531<<24>>24)!=(0);
    if (!($532)) {
     break L1;
    }
    $533 = $data;
    $534 = $533&255;
    $535 = $534 & -17;
    $536 = $535&255;
    $data = $536;
    break L1;
   } else {
    $537 = HEAP8[(461142)>>0]|0;
    $538 = ($537<<24>>24)!=(0);
    if ($538) {
     $539 = $data;
     $540 = $539&255;
     $541 = $540 & -3;
     $542 = $541&255;
     $data = $542;
    }
    $543 = HEAP8[(461150)>>0]|0;
    $544 = ($543<<24>>24)!=(0);
    if ($544) {
     $545 = $data;
     $546 = $545&255;
     $547 = $546 & -5;
     $548 = $547&255;
     $data = $548;
    }
    $549 = HEAP8[(461255)>>0]|0;
    $550 = ($549<<24>>24)!=(0);
    if ($550) {
     $551 = $data;
     $552 = $551&255;
     $553 = $552 & -9;
     $554 = $553&255;
     $data = $554;
    }
    $555 = HEAP8[(461143)>>0]|0;
    $556 = ($555<<24>>24)!=(0);
    if (!($556)) {
     break L1;
    }
    $557 = $data;
    $558 = $557&255;
    $559 = $558 & -17;
    $560 = $559&255;
    $data = $560;
    break L1;
   }
   break;
  }
  case 13:  {
   $561 = HEAP8[461587>>0]|0;
   $562 = $561&1;
   if ($562) {
    $563 = HEAP8[(461115)>>0]|0;
    $564 = ($563<<24>>24)!=(0);
    if ($564) {
     $565 = $data;
     $566 = $565&255;
     $567 = $566 & -3;
     $568 = $567&255;
     $data = $568;
    }
    $569 = HEAP8[(461151)>>0]|0;
    $570 = ($569<<24>>24)!=(0);
    if ($570) {
     $571 = $data;
     $572 = $571&255;
     $573 = $572 & -5;
     $574 = $573&255;
     $data = $574;
    }
    $575 = HEAP8[(461271)>>0]|0;
    $576 = ($575<<24>>24)!=(0);
    if ($576) {
     $577 = $data;
     $578 = $577&255;
     $579 = $578 & -9;
     $580 = $579&255;
     $data = $580;
    }
    $581 = HEAP8[(461106)>>0]|0;
    $582 = ($581<<24>>24)!=(0);
    if (!($582)) {
     break L1;
    }
    $583 = $data;
    $584 = $583&255;
    $585 = $584 & -17;
    $586 = $585&255;
    $data = $586;
    break L1;
   } else {
    $587 = HEAP8[(461141)>>0]|0;
    $588 = ($587<<24>>24)!=(0);
    if ($588) {
     $589 = $data;
     $590 = $589&255;
     $591 = $590 & -3;
     $592 = $591&255;
     $data = $592;
    }
    $593 = HEAP8[(461155)>>0]|0;
    $594 = ($593<<24>>24)!=(0);
    if ($594) {
     $595 = $data;
     $596 = $595&255;
     $597 = $596 & -5;
     $598 = $597&255;
     $data = $598;
    }
    $599 = HEAP8[(461157)>>0]|0;
    $600 = ($599<<24>>24)!=(0);
    if ($600) {
     $601 = $data;
     $602 = $601&255;
     $603 = $602 & -9;
     $604 = $603&255;
     $data = $604;
    }
    $605 = HEAP8[(461156)>>0]|0;
    $606 = ($605<<24>>24)!=(0);
    if (!($606)) {
     break L1;
    }
    $607 = $data;
    $608 = $607&255;
    $609 = $608 & -17;
    $610 = $609&255;
    $data = $610;
    break L1;
   }
   break;
  }
  default: {
   $0 = 0;
   $612 = $0;
   STACKTOP = sp;return ($612|0);
  }
  }
 } while(0);
 $611 = $data;
 $0 = $611;
 $612 = $0;
 STACKTOP = sp;return ($612|0);
}
function __Z12KEYWrite4016h($data) {
 $data = $data|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $data;
 $1 = $0;
 $2 = $1&255;
 $3 = ($2|0)==(5);
 if ($3) {
  HEAP8[461587>>0] = 0;
  HEAP8[461588>>0] = 0;
  STACKTOP = sp;return;
 }
 $4 = $0;
 $5 = $4&255;
 $6 = ($5|0)==(4);
 if ($6) {
  $7 = HEAP8[461588>>0]|0;
  $8 = (($7) + 1)<<24>>24;
  HEAP8[461588>>0] = $8;
  $9 = $8&255;
  $10 = ($9|0)>(13);
  $$ = $10 ? 0 : $8;
  HEAP8[461588>>0] = $$;
  $11 = HEAP8[461587>>0]|0;
  $12 = $11&1;
  $13 = $12 ^ 1;
  $14 = $13&1;
  HEAP8[461587>>0] = $14;
  STACKTOP = sp;return;
 }
 $15 = $0;
 $16 = $15&255;
 $17 = ($16|0)==(6);
 if (!($17)) {
  STACKTOP = sp;return;
 }
 $18 = HEAP8[461587>>0]|0;
 $19 = $18&1;
 $20 = $19 ^ 1;
 $21 = $20&1;
 HEAP8[461587>>0] = $21;
 STACKTOP = sp;return;
}
function __ZN11Sound_QueueC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 HEAP32[$1>>2] = 0;
 $2 = ((($1)) + 4|0);
 HEAP32[$2>>2] = 0;
 $3 = ((($1)) + 12|0);
 HEAP32[$3>>2] = 0;
 $4 = ((($1)) + 16|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($1)) + 8|0);
 HEAP32[$5>>2] = 0;
 $6 = ((($1)) + 20|0);
 HEAP8[$6>>0] = 0;
 STACKTOP = sp;return;
}
function __ZN11Sound_Queue4initEli($this,$sample_rate,$chan_count) {
 $this = $this|0;
 $sample_rate = $sample_rate|0;
 $chan_count = $chan_count|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $as = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $as = sp;
 $1 = $this;
 $2 = $sample_rate;
 $3 = $chan_count;
 $4 = $1;
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)!=(0|0);
 if ($6) {
  ___assert_fail((461589|0),(461595|0),65,(461617|0));
  // unreachable;
 }
 $7 = (__Znaj(12288)|0);
 HEAP32[$4>>2] = $7;
 $8 = HEAP32[$4>>2]|0;
 $9 = ($8|0)!=(0|0);
 if (!($9)) {
  $0 = 461622;
  $24 = $0;
  STACKTOP = sp;return ($24|0);
 }
 $10 = $2;
 HEAP32[$as>>2] = $10;
 $11 = ((($as)) + 4|0);
 HEAP16[$11>>1] = -32752;
 $12 = $3;
 $13 = $12&255;
 $14 = ((($as)) + 6|0);
 HEAP8[$14>>0] = $13;
 $15 = ((($as)) + 7|0);
 HEAP8[$15>>0] = 0;
 $16 = ((($as)) + 8|0);
 HEAP16[$16>>1] = 2048;
 $17 = ((($as)) + 12|0);
 HEAP32[$17>>2] = 0;
 $18 = ((($as)) + 16|0);
 HEAP32[$18>>2] = 392;
 $19 = ((($as)) + 20|0);
 HEAP32[$19>>2] = $4;
 $20 = (_SDL_OpenAudio(($as|0),(0|0))|0);
 $21 = ($20|0)<(0);
 if ($21) {
  $22 = (__ZL9sdl_errorPKc(461636)|0);
  $0 = $22;
  $24 = $0;
  STACKTOP = sp;return ($24|0);
 } else {
  _SDL_PauseAudio(0);
  $23 = ((($4)) + 20|0);
  HEAP8[$23>>0] = 1;
  $0 = 0;
  $24 = $0;
  STACKTOP = sp;return ($24|0);
 }
 return (0)|0;
}
function __ZN11Sound_Queue12fill_buffer_EPvPhi($user_data,$out,$count) {
 $user_data = $user_data|0;
 $out = $out|0;
 $count = $count|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $user_data;
 $1 = $out;
 $2 = $count;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 __ZN11Sound_Queue11fill_bufferEPhi($3,$4,$5);
 STACKTOP = sp;return;
}
function __ZN11Sound_Queue5writeEPKsi($this,$in,$count) {
 $this = $this|0;
 $in = $in|0;
 $count = $count|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $n = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $in;
 $2 = $count;
 $3 = $0;
 while(1) {
  $4 = $2;
  $5 = ($4|0)!=(0);
  if (!($5)) {
   break;
  }
  $6 = ((($3)) + 16|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = (2048 - ($7))|0;
  $n = $8;
  $9 = $n;
  $10 = $2;
  $11 = ($9|0)>($10|0);
  if ($11) {
   $12 = $2;
   $n = $12;
  }
  $13 = ((($3)) + 12|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = (__ZN11Sound_Queue3bufEi($3,$14)|0);
  $16 = ((($3)) + 16|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = (($15) + ($17<<1)|0);
  $19 = $1;
  $20 = $n;
  $21 = $20<<1;
  _memcpy(($18|0),($19|0),($21|0))|0;
  $22 = $n;
  $23 = $1;
  $24 = (($23) + ($22<<1)|0);
  $1 = $24;
  $25 = $n;
  $26 = ((($3)) + 16|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = (($27) + ($25))|0;
  HEAP32[$26>>2] = $28;
  $29 = $n;
  $30 = $2;
  $31 = (($30) - ($29))|0;
  $2 = $31;
  $32 = ((($3)) + 16|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = ($33|0)>=(2048);
  if (!($34)) {
   continue;
  }
  $35 = ((($3)) + 16|0);
  HEAP32[$35>>2] = 0;
  $36 = ((($3)) + 12|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = (($37) + 1)|0;
  $39 = (($38|0) % 3)&-1;
  $40 = ((($3)) + 12|0);
  HEAP32[$40>>2] = $39;
 }
 STACKTOP = sp;return;
}
function __ZN11Sound_Queue11fill_bufferEPhi($this,$out,$count) {
 $this = $this|0;
 $out = $out|0;
 $count = $count|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $out;
 $2 = $count;
 $3 = $0;
 $4 = $1;
 $5 = ((($3)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (__ZN11Sound_Queue3bufEi($3,$6)|0);
 $8 = $2;
 _memcpy(($4|0),($7|0),($8|0))|0;
 $9 = ((($3)) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($10) + 1)|0;
 $12 = (($11|0) % 3)&-1;
 $13 = ((($3)) + 8|0);
 HEAP32[$13>>2] = $12;
 STACKTOP = sp;return;
}
function __ZL9sdl_errorPKc($str) {
 $str = $str|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $sdl_str = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $str;
 $1 = (_SDL_GetError()|0);
 $sdl_str = $1;
 $2 = $sdl_str;
 $3 = ($2|0)!=(0|0);
 if ($3) {
  $4 = $sdl_str;
  $5 = HEAP8[$4>>0]|0;
  $6 = ($5<<24>>24)!=(0);
  if ($6) {
   $7 = $sdl_str;
   $0 = $7;
  }
 }
 $8 = $0;
 STACKTOP = sp;return ($8|0);
}
function __ZN11Sound_Queue3bufEi($this,$index) {
 $this = $this|0;
 $index = $index|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $index;
 $2 = $0;
 $3 = $1;
 $4 = ($3>>>0)<(3);
 if ($4) {
  $5 = HEAP32[$2>>2]|0;
  $6 = $1;
  $7 = $6<<11;
  $8 = (($5) + ($7<<1)|0);
  STACKTOP = sp;return ($8|0);
 } else {
  ___assert_fail((461660|0),(461595|0),94,(461689|0));
  // unreachable;
 }
 return (0)|0;
}
function __Znwj($size) {
 $size = $size|0;
 var $$lcssa = 0, $$size = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($size|0)==(0);
 $$size = $0 ? 1 : $size;
 $1 = (_malloc($$size)|0);
 $2 = ($1|0)==(0|0);
 L1: do {
  if ($2) {
   while(1) {
    $3 = (__ZSt15get_new_handlerv()|0);
    $4 = ($3|0)==(0|0);
    if ($4) {
     break;
    }
    FUNCTION_TABLE_v[$3 & 511]();
    $5 = (_malloc($$size)|0);
    $6 = ($5|0)==(0|0);
    if (!($6)) {
     $$lcssa = $5;
     break L1;
    }
   }
   $7 = (___cxa_allocate_exception(4)|0);
   HEAP32[$7>>2] = (428796);
   ___cxa_throw(($7|0),(584|0),(338|0));
   // unreachable;
  } else {
   $$lcssa = $1;
  }
 } while(0);
 return ($$lcssa|0);
}
function __Znaj($size) {
 $size = $size|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__Znwj($size)|0);
 return ($0|0);
}
function __ZdlPv($ptr) {
 $ptr = $ptr|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _free($ptr);
 return;
}
function __ZNSt9bad_allocD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt9bad_allocD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNKSt9bad_alloc4whatEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (461906|0);
}
function __ZSt15get_new_handlerv() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[428808>>2]|0;HEAP32[428808>>2] = (($0+0)|0);
 $1 = $0;
 return ($1|0);
}
function __ZNSt9exceptionD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt9type_infoD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN10__cxxabiv116__shim_type_infoD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNK10__cxxabiv116__shim_type_info5noop1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNK10__cxxabiv116__shim_type_info5noop2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN10__cxxabiv117__class_type_infoD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZN10__cxxabiv120__si_class_type_infoD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv($this,$thrown_type,$adjustedPtr) {
 $this = $this|0;
 $thrown_type = $thrown_type|0;
 $adjustedPtr = $adjustedPtr|0;
 var $$0 = 0, $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $info = 0, dest = 0;
 var label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $info = sp;
 $0 = ($this|0)==($thrown_type|0);
 if ($0) {
  $$1 = 1;
 } else {
  $1 = ($thrown_type|0)==(0|0);
  if ($1) {
   $$1 = 0;
  } else {
   $2 = (___dynamic_cast($thrown_type,616,632,0)|0);
   $3 = ($2|0)==(0|0);
   if ($3) {
    $$1 = 0;
   } else {
    dest=$info; stop=dest+56|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
    HEAP32[$info>>2] = $2;
    $4 = ((($info)) + 8|0);
    HEAP32[$4>>2] = $this;
    $5 = ((($info)) + 12|0);
    HEAP32[$5>>2] = -1;
    $6 = ((($info)) + 48|0);
    HEAP32[$6>>2] = 1;
    $7 = HEAP32[$2>>2]|0;
    $8 = ((($7)) + 28|0);
    $9 = HEAP32[$8>>2]|0;
    $10 = HEAP32[$adjustedPtr>>2]|0;
    FUNCTION_TABLE_viiii[$9 & 511]($2,$info,$10,1);
    $11 = ((($info)) + 24|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = ($12|0)==(1);
    if ($13) {
     $14 = ((($info)) + 16|0);
     $15 = HEAP32[$14>>2]|0;
     HEAP32[$adjustedPtr>>2] = $15;
     $$0 = 1;
    } else {
     $$0 = 0;
    }
    $$1 = $$0;
   }
  }
 }
 STACKTOP = sp;return ($$1|0);
}
function __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $adjustedPtr = $adjustedPtr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($info)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 do {
  if ($2) {
   HEAP32[$0>>2] = $adjustedPtr;
   $3 = ((($info)) + 24|0);
   HEAP32[$3>>2] = $path_below;
   $4 = ((($info)) + 36|0);
   HEAP32[$4>>2] = 1;
  } else {
   $5 = ($1|0)==($adjustedPtr|0);
   if (!($5)) {
    $9 = ((($info)) + 36|0);
    $10 = HEAP32[$9>>2]|0;
    $11 = (($10) + 1)|0;
    HEAP32[$9>>2] = $11;
    $12 = ((($info)) + 24|0);
    HEAP32[$12>>2] = 2;
    $13 = ((($info)) + 54|0);
    HEAP8[$13>>0] = 1;
    break;
   }
   $6 = ((($info)) + 24|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = ($7|0)==(2);
   if ($8) {
    HEAP32[$6>>2] = $path_below;
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $adjustedPtr = $adjustedPtr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($info)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 if ($2) {
  __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0,$info,$adjustedPtr,$path_below);
 }
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $adjustedPtr = $adjustedPtr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($info)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 if ($2) {
  __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0,$info,$adjustedPtr,$path_below);
 } else {
  $3 = ((($this)) + 8|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = HEAP32[$4>>2]|0;
  $6 = ((($5)) + 28|0);
  $7 = HEAP32[$6>>2]|0;
  FUNCTION_TABLE_viiii[$7 & 511]($4,$info,$adjustedPtr,$path_below);
 }
 return;
}
function ___dynamic_cast($static_ptr,$static_type,$dst_type,$src2dst_offset) {
 $static_ptr = $static_ptr|0;
 $static_type = $static_type|0;
 $dst_type = $dst_type|0;
 $src2dst_offset = $src2dst_offset|0;
 var $$ = 0, $$8 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $dst_ptr$0 = 0, $info = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $info = sp;
 $0 = HEAP32[$static_ptr>>2]|0;
 $1 = ((($0)) + -8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2;
 $4 = (($static_ptr) + ($3)|0);
 $5 = ((($0)) + -4|0);
 $6 = HEAP32[$5>>2]|0;
 HEAP32[$info>>2] = $dst_type;
 $7 = ((($info)) + 4|0);
 HEAP32[$7>>2] = $static_ptr;
 $8 = ((($info)) + 8|0);
 HEAP32[$8>>2] = $static_type;
 $9 = ((($info)) + 12|0);
 HEAP32[$9>>2] = $src2dst_offset;
 $10 = ((($info)) + 16|0);
 $11 = ((($info)) + 20|0);
 $12 = ((($info)) + 24|0);
 $13 = ((($info)) + 28|0);
 $14 = ((($info)) + 32|0);
 $15 = ((($info)) + 40|0);
 $16 = ($6|0)==($dst_type|0);
 dest=$10; stop=dest+36|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));HEAP16[$10+36>>1]=0|0;HEAP8[$10+38>>0]=0|0;
 L1: do {
  if ($16) {
   $17 = ((($info)) + 48|0);
   HEAP32[$17>>2] = 1;
   $18 = HEAP32[$dst_type>>2]|0;
   $19 = ((($18)) + 20|0);
   $20 = HEAP32[$19>>2]|0;
   FUNCTION_TABLE_viiiiii[$20 & 511]($dst_type,$info,$4,$4,1,0);
   $21 = HEAP32[$12>>2]|0;
   $22 = ($21|0)==(1);
   $$ = $22 ? $4 : 0;
   $dst_ptr$0 = $$;
  } else {
   $23 = ((($info)) + 36|0);
   $24 = HEAP32[$6>>2]|0;
   $25 = ((($24)) + 24|0);
   $26 = HEAP32[$25>>2]|0;
   FUNCTION_TABLE_viiiii[$26 & 511]($6,$info,$4,1,0);
   $27 = HEAP32[$23>>2]|0;
   switch ($27|0) {
   case 0:  {
    $28 = HEAP32[$15>>2]|0;
    $29 = ($28|0)==(1);
    $30 = HEAP32[$13>>2]|0;
    $31 = ($30|0)==(1);
    $or$cond = $29 & $31;
    $32 = HEAP32[$14>>2]|0;
    $33 = ($32|0)==(1);
    $or$cond3 = $or$cond & $33;
    $34 = HEAP32[$11>>2]|0;
    $$8 = $or$cond3 ? $34 : 0;
    $dst_ptr$0 = $$8;
    break L1;
    break;
   }
   case 1:  {
    break;
   }
   default: {
    $dst_ptr$0 = 0;
    break L1;
   }
   }
   $35 = HEAP32[$12>>2]|0;
   $36 = ($35|0)==(1);
   if (!($36)) {
    $37 = HEAP32[$15>>2]|0;
    $38 = ($37|0)==(0);
    $39 = HEAP32[$13>>2]|0;
    $40 = ($39|0)==(1);
    $or$cond5 = $38 & $40;
    $41 = HEAP32[$14>>2]|0;
    $42 = ($41|0)==(1);
    $or$cond7 = $or$cond5 & $42;
    if (!($or$cond7)) {
     $dst_ptr$0 = 0;
     break;
    }
   }
   $43 = HEAP32[$10>>2]|0;
   $dst_ptr$0 = $43;
  }
 } while(0);
 STACKTOP = sp;return ($dst_ptr$0|0);
}
function __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i($this,$info,$dst_ptr,$current_ptr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $dst_ptr = $dst_ptr|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($info)) + 53|0);
 HEAP8[$0>>0] = 1;
 $1 = ((($info)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==($current_ptr|0);
 do {
  if ($3) {
   $4 = ((($info)) + 52|0);
   HEAP8[$4>>0] = 1;
   $5 = ((($info)) + 16|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = ($6|0)==(0|0);
   if ($7) {
    HEAP32[$5>>2] = $dst_ptr;
    $8 = ((($info)) + 24|0);
    HEAP32[$8>>2] = $path_below;
    $9 = ((($info)) + 36|0);
    HEAP32[$9>>2] = 1;
    $10 = ((($info)) + 48|0);
    $11 = HEAP32[$10>>2]|0;
    $12 = ($11|0)==(1);
    $13 = ($path_below|0)==(1);
    $or$cond = $12 & $13;
    if (!($or$cond)) {
     break;
    }
    $14 = ((($info)) + 54|0);
    HEAP8[$14>>0] = 1;
    break;
   }
   $15 = ($6|0)==($dst_ptr|0);
   if (!($15)) {
    $25 = ((($info)) + 36|0);
    $26 = HEAP32[$25>>2]|0;
    $27 = (($26) + 1)|0;
    HEAP32[$25>>2] = $27;
    $28 = ((($info)) + 54|0);
    HEAP8[$28>>0] = 1;
    break;
   }
   $16 = ((($info)) + 24|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = ($17|0)==(2);
   if ($18) {
    HEAP32[$16>>2] = $path_below;
    $22 = $path_below;
   } else {
    $22 = $17;
   }
   $19 = ((($info)) + 48|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = ($20|0)==(1);
   $23 = ($22|0)==(1);
   $or$cond1 = $21 & $23;
   if ($or$cond1) {
    $24 = ((($info)) + 54|0);
    HEAP8[$24>>0] = 1;
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this,$info,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $is_dst_type_derived_from_static_type$0$off01 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($info)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 L1: do {
  if ($2) {
   $3 = ((($info)) + 4|0);
   $4 = HEAP32[$3>>2]|0;
   $5 = ($4|0)==($current_ptr|0);
   if ($5) {
    $6 = ((($info)) + 28|0);
    $7 = HEAP32[$6>>2]|0;
    $8 = ($7|0)==(1);
    if (!($8)) {
     HEAP32[$6>>2] = $path_below;
    }
   }
  } else {
   $9 = HEAP32[$info>>2]|0;
   $10 = ($this|0)==($9|0);
   if (!($10)) {
    $43 = ((($this)) + 8|0);
    $44 = HEAP32[$43>>2]|0;
    $45 = HEAP32[$44>>2]|0;
    $46 = ((($45)) + 24|0);
    $47 = HEAP32[$46>>2]|0;
    FUNCTION_TABLE_viiiii[$47 & 511]($44,$info,$current_ptr,$path_below,$use_strcmp);
    break;
   }
   $11 = ((($info)) + 16|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = ($12|0)==($current_ptr|0);
   if (!($13)) {
    $14 = ((($info)) + 20|0);
    $15 = HEAP32[$14>>2]|0;
    $16 = ($15|0)==($current_ptr|0);
    if (!($16)) {
     $19 = ((($info)) + 32|0);
     HEAP32[$19>>2] = $path_below;
     $20 = ((($info)) + 44|0);
     $21 = HEAP32[$20>>2]|0;
     $22 = ($21|0)==(4);
     if ($22) {
      break;
     }
     $23 = ((($info)) + 52|0);
     HEAP8[$23>>0] = 0;
     $24 = ((($info)) + 53|0);
     HEAP8[$24>>0] = 0;
     $25 = ((($this)) + 8|0);
     $26 = HEAP32[$25>>2]|0;
     $27 = HEAP32[$26>>2]|0;
     $28 = ((($27)) + 20|0);
     $29 = HEAP32[$28>>2]|0;
     FUNCTION_TABLE_viiiiii[$29 & 511]($26,$info,$current_ptr,$current_ptr,1,$use_strcmp);
     $30 = HEAP8[$24>>0]|0;
     $31 = ($30<<24>>24)==(0);
     if ($31) {
      $is_dst_type_derived_from_static_type$0$off01 = 0;
      label = 13;
     } else {
      $32 = HEAP8[$23>>0]|0;
      $not$ = ($32<<24>>24)==(0);
      if ($not$) {
       $is_dst_type_derived_from_static_type$0$off01 = 1;
       label = 13;
      }
     }
     do {
      if ((label|0) == 13) {
       HEAP32[$14>>2] = $current_ptr;
       $33 = ((($info)) + 40|0);
       $34 = HEAP32[$33>>2]|0;
       $35 = (($34) + 1)|0;
       HEAP32[$33>>2] = $35;
       $36 = ((($info)) + 36|0);
       $37 = HEAP32[$36>>2]|0;
       $38 = ($37|0)==(1);
       if ($38) {
        $39 = ((($info)) + 24|0);
        $40 = HEAP32[$39>>2]|0;
        $41 = ($40|0)==(2);
        if ($41) {
         $42 = ((($info)) + 54|0);
         HEAP8[$42>>0] = 1;
         if ($is_dst_type_derived_from_static_type$0$off01) {
          break;
         }
        } else {
         label = 16;
        }
       } else {
        label = 16;
       }
       if ((label|0) == 16) {
        if ($is_dst_type_derived_from_static_type$0$off01) {
         break;
        }
       }
       HEAP32[$20>>2] = 4;
       break L1;
      }
     } while(0);
     HEAP32[$20>>2] = 3;
     break;
    }
   }
   $17 = ($path_below|0)==(1);
   if ($17) {
    $18 = ((($info)) + 32|0);
    HEAP32[$18>>2] = 1;
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this,$info,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($info)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 do {
  if ($2) {
   $3 = ((($info)) + 4|0);
   $4 = HEAP32[$3>>2]|0;
   $5 = ($4|0)==($current_ptr|0);
   if ($5) {
    $6 = ((($info)) + 28|0);
    $7 = HEAP32[$6>>2]|0;
    $8 = ($7|0)==(1);
    if (!($8)) {
     HEAP32[$6>>2] = $path_below;
    }
   }
  } else {
   $9 = HEAP32[$info>>2]|0;
   $10 = ($this|0)==($9|0);
   if ($10) {
    $11 = ((($info)) + 16|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = ($12|0)==($current_ptr|0);
    if (!($13)) {
     $14 = ((($info)) + 20|0);
     $15 = HEAP32[$14>>2]|0;
     $16 = ($15|0)==($current_ptr|0);
     if (!($16)) {
      $19 = ((($info)) + 32|0);
      HEAP32[$19>>2] = $path_below;
      HEAP32[$14>>2] = $current_ptr;
      $20 = ((($info)) + 40|0);
      $21 = HEAP32[$20>>2]|0;
      $22 = (($21) + 1)|0;
      HEAP32[$20>>2] = $22;
      $23 = ((($info)) + 36|0);
      $24 = HEAP32[$23>>2]|0;
      $25 = ($24|0)==(1);
      if ($25) {
       $26 = ((($info)) + 24|0);
       $27 = HEAP32[$26>>2]|0;
       $28 = ($27|0)==(2);
       if ($28) {
        $29 = ((($info)) + 54|0);
        HEAP8[$29>>0] = 1;
       }
      }
      $30 = ((($info)) + 44|0);
      HEAP32[$30>>2] = 4;
      break;
     }
    }
    $17 = ($path_below|0)==(1);
    if ($17) {
     $18 = ((($info)) + 32|0);
     HEAP32[$18>>2] = 1;
    }
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $dst_ptr = $dst_ptr|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($info)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 if ($2) {
  __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0,$info,$dst_ptr,$current_ptr,$path_below);
 } else {
  $3 = ((($this)) + 8|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = HEAP32[$4>>2]|0;
  $6 = ((($5)) + 20|0);
  $7 = HEAP32[$6>>2]|0;
  FUNCTION_TABLE_viiiiii[$7 & 511]($4,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp);
 }
 return;
}
function __ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $dst_ptr = $dst_ptr|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($info)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 if ($2) {
  __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0,$info,$dst_ptr,$current_ptr,$path_below);
 }
 return;
}
function ___cxa_can_catch($catchType,$excpType,$thrown) {
 $catchType = $catchType|0;
 $excpType = $excpType|0;
 $thrown = $thrown|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $temp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $temp = sp;
 $0 = HEAP32[$thrown>>2]|0;
 HEAP32[$temp>>2] = $0;
 $1 = HEAP32[$catchType>>2]|0;
 $2 = ((($1)) + 16|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (FUNCTION_TABLE_iiii[$3 & 511]($catchType,$excpType,$temp)|0);
 $5 = $4&1;
 if ($4) {
  $6 = HEAP32[$temp>>2]|0;
  HEAP32[$thrown>>2] = $6;
 }
 STACKTOP = sp;return ($5|0);
}
function ___cxa_is_pointer_type($type) {
 $type = $type|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($type|0)==(0|0);
 if ($0) {
  $3 = 0;
 } else {
  $1 = (___dynamic_cast($type,616,664,0)|0);
  $phitmp = ($1|0)!=(0|0);
  $3 = $phitmp;
 }
 $2 = $3&1;
 return ($2|0);
}
function _strerror($e) {
 $e = $e|0;
 var $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$03 = 0, $i$03$lcssa = 0, $i$12 = 0, $s$0$lcssa = 0, $s$01 = 0, $s$1 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $i$03 = 0;
 while(1) {
  $1 = (461921 + ($i$03)|0);
  $2 = HEAP8[$1>>0]|0;
  $3 = $2&255;
  $4 = ($3|0)==($e|0);
  if ($4) {
   $i$03$lcssa = $i$03;
   label = 2;
   break;
  }
  $5 = (($i$03) + 1)|0;
  $6 = ($5|0)==(87);
  if ($6) {
   $i$12 = 87;$s$01 = 462009;
   label = 5;
   break;
  } else {
   $i$03 = $5;
  }
 }
 if ((label|0) == 2) {
  $0 = ($i$03$lcssa|0)==(0);
  if ($0) {
   $s$0$lcssa = 462009;
  } else {
   $i$12 = $i$03$lcssa;$s$01 = 462009;
   label = 5;
  }
 }
 if ((label|0) == 5) {
  while(1) {
   label = 0;
   $s$1 = $s$01;
   while(1) {
    $7 = HEAP8[$s$1>>0]|0;
    $8 = ($7<<24>>24)==(0);
    $9 = ((($s$1)) + 1|0);
    if ($8) {
     $$lcssa = $9;
     break;
    } else {
     $s$1 = $9;
    }
   }
   $10 = (($i$12) + -1)|0;
   $11 = ($10|0)==(0);
   if ($11) {
    $s$0$lcssa = $$lcssa;
    break;
   } else {
    $i$12 = $10;$s$01 = $$lcssa;
    label = 5;
   }
  }
 }
 return ($s$0$lcssa|0);
}
function ___errno_location() {
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[428892>>2]|0;
 $1 = ($0|0)==(0|0);
 if ($1) {
  $$0 = 428944;
 } else {
  $2 = (_pthread_self()|0);
  $3 = ((($2)) + 60|0);
  $4 = HEAP32[$3>>2]|0;
  $$0 = $4;
 }
 return ($$0|0);
}
function ___syscall_ret($r) {
 $r = $r|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($r>>>0)>(4294963200);
 if ($0) {
  $1 = (0 - ($r))|0;
  $2 = (___errno_location()|0);
  HEAP32[$2>>2] = $1;
  $$0 = -1;
 } else {
  $$0 = $r;
 }
 return ($$0|0);
}
function _frexp($x,$e) {
 $x = +$x;
 $e = $e|0;
 var $$0 = 0.0, $$01 = 0.0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 $2 = (_bitshift64Lshr(($0|0),($1|0),52)|0);
 $3 = tempRet0;
 $4 = $2 & 2047;
 switch ($4|0) {
 case 0:  {
  $5 = $x != 0.0;
  if ($5) {
   $6 = $x * 1.8446744073709552E+19;
   $7 = (+_frexp($6,$e));
   $8 = HEAP32[$e>>2]|0;
   $9 = (($8) + -64)|0;
   $$01 = $7;$storemerge = $9;
  } else {
   $$01 = $x;$storemerge = 0;
  }
  HEAP32[$e>>2] = $storemerge;
  $$0 = $$01;
  break;
 }
 case 2047:  {
  $$0 = $x;
  break;
 }
 default: {
  $10 = (($4) + -1022)|0;
  HEAP32[$e>>2] = $10;
  $11 = $1 & -2146435073;
  $12 = $11 | 1071644672;
  HEAP32[tempDoublePtr>>2] = $0;HEAP32[tempDoublePtr+4>>2] = $12;$13 = +HEAPF64[tempDoublePtr>>3];
  $$0 = $13;
 }
 }
 return (+$$0);
}
function _frexpl($x,$e) {
 $x = +$x;
 $e = $e|0;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_frexp($x,$e));
 return (+$0);
}
function _wcrtomb($s,$wc,$st) {
 $s = $s|0;
 $wc = $wc|0;
 $st = $st|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($s|0)==(0|0);
 do {
  if ($0) {
   $$0 = 1;
  } else {
   $1 = ($wc>>>0)<(128);
   if ($1) {
    $2 = $wc&255;
    HEAP8[$s>>0] = $2;
    $$0 = 1;
    break;
   }
   $3 = ($wc>>>0)<(2048);
   if ($3) {
    $4 = $wc >>> 6;
    $5 = $4 | 192;
    $6 = $5&255;
    $7 = ((($s)) + 1|0);
    HEAP8[$s>>0] = $6;
    $8 = $wc & 63;
    $9 = $8 | 128;
    $10 = $9&255;
    HEAP8[$7>>0] = $10;
    $$0 = 2;
    break;
   }
   $11 = ($wc>>>0)<(55296);
   $12 = $wc & -8192;
   $13 = ($12|0)==(57344);
   $or$cond = $11 | $13;
   if ($or$cond) {
    $14 = $wc >>> 12;
    $15 = $14 | 224;
    $16 = $15&255;
    $17 = ((($s)) + 1|0);
    HEAP8[$s>>0] = $16;
    $18 = $wc >>> 6;
    $19 = $18 & 63;
    $20 = $19 | 128;
    $21 = $20&255;
    $22 = ((($s)) + 2|0);
    HEAP8[$17>>0] = $21;
    $23 = $wc & 63;
    $24 = $23 | 128;
    $25 = $24&255;
    HEAP8[$22>>0] = $25;
    $$0 = 3;
    break;
   }
   $26 = (($wc) + -65536)|0;
   $27 = ($26>>>0)<(1048576);
   if ($27) {
    $28 = $wc >>> 18;
    $29 = $28 | 240;
    $30 = $29&255;
    $31 = ((($s)) + 1|0);
    HEAP8[$s>>0] = $30;
    $32 = $wc >>> 12;
    $33 = $32 & 63;
    $34 = $33 | 128;
    $35 = $34&255;
    $36 = ((($s)) + 2|0);
    HEAP8[$31>>0] = $35;
    $37 = $wc >>> 6;
    $38 = $37 & 63;
    $39 = $38 | 128;
    $40 = $39&255;
    $41 = ((($s)) + 3|0);
    HEAP8[$36>>0] = $40;
    $42 = $wc & 63;
    $43 = $42 | 128;
    $44 = $43&255;
    HEAP8[$41>>0] = $44;
    $$0 = 4;
    break;
   } else {
    $45 = (___errno_location()|0);
    HEAP32[$45>>2] = 84;
    $$0 = -1;
    break;
   }
  }
 } while(0);
 return ($$0|0);
}
function _wctomb($s,$wc) {
 $s = $s|0;
 $wc = $wc|0;
 var $$0 = 0, $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($s|0)==(0|0);
 if ($0) {
  $$0 = 0;
 } else {
  $1 = (_wcrtomb($s,$wc,0)|0);
  $$0 = $1;
 }
 return ($$0|0);
}
function _fclose($f) {
 $f = $f|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 76|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)>(-1);
 if ($2) {
  (___lockfile($f)|0);
 }
 $3 = HEAP32[$f>>2]|0;
 $4 = $3 & 1;
 $5 = ($4|0)!=(0);
 if (!($5)) {
  ___lock(((428920)|0));
  $6 = ((($f)) + 52|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)==(0|0);
  $9 = $7;
  $$pre = ((($f)) + 56|0);
  if (!($8)) {
   $10 = HEAP32[$$pre>>2]|0;
   $11 = ((($7)) + 56|0);
   HEAP32[$11>>2] = $10;
  }
  $12 = HEAP32[$$pre>>2]|0;
  $13 = ($12|0)==(0|0);
  $14 = $12;
  if (!($13)) {
   $15 = ((($12)) + 52|0);
   HEAP32[$15>>2] = $9;
  }
  $16 = HEAP32[(428916)>>2]|0;
  $17 = ($16|0)==($f|0);
  if ($17) {
   HEAP32[(428916)>>2] = $14;
  }
  ___unlock(((428920)|0));
 }
 $18 = (_fflush($f)|0);
 $19 = ((($f)) + 12|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = (FUNCTION_TABLE_ii[$20 & 511]($f)|0);
 $22 = $21 | $18;
 $23 = ((($f)) + 92|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ($24|0)==(0|0);
 if (!($25)) {
  _free($24);
 }
 if (!($5)) {
  _free($f);
 }
 return ($22|0);
}
function _fflush($f) {
 $f = $f|0;
 var $$0 = 0, $$01 = 0, $$012 = 0, $$014 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, $r$0$lcssa = 0, $r$03 = 0, $r$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($f|0)==(0|0);
 do {
  if ($0) {
   $7 = HEAP32[428940>>2]|0;
   $8 = ($7|0)==(0|0);
   if ($8) {
    $27 = 0;
   } else {
    $9 = HEAP32[428940>>2]|0;
    $10 = (_fflush($9)|0);
    $27 = $10;
   }
   ___lock(((428920)|0));
   $$012 = HEAP32[(428916)>>2]|0;
   $11 = ($$012|0)==(0|0);
   if ($11) {
    $r$0$lcssa = $27;
   } else {
    $$014 = $$012;$r$03 = $27;
    while(1) {
     $12 = ((($$014)) + 76|0);
     $13 = HEAP32[$12>>2]|0;
     $14 = ($13|0)>(-1);
     if ($14) {
      $15 = (___lockfile($$014)|0);
      $23 = $15;
     } else {
      $23 = 0;
     }
     $16 = ((($$014)) + 20|0);
     $17 = HEAP32[$16>>2]|0;
     $18 = ((($$014)) + 28|0);
     $19 = HEAP32[$18>>2]|0;
     $20 = ($17>>>0)>($19>>>0);
     if ($20) {
      $21 = (___fflush_unlocked($$014)|0);
      $22 = $21 | $r$03;
      $r$1 = $22;
     } else {
      $r$1 = $r$03;
     }
     $24 = ($23|0)==(0);
     if (!($24)) {
      ___unlockfile($$014);
     }
     $25 = ((($$014)) + 56|0);
     $$01 = HEAP32[$25>>2]|0;
     $26 = ($$01|0)==(0|0);
     if ($26) {
      $r$0$lcssa = $r$1;
      break;
     } else {
      $$014 = $$01;$r$03 = $r$1;
     }
    }
   }
   ___unlock(((428920)|0));
   $$0 = $r$0$lcssa;
  } else {
   $1 = ((($f)) + 76|0);
   $2 = HEAP32[$1>>2]|0;
   $3 = ($2|0)>(-1);
   if (!($3)) {
    $4 = (___fflush_unlocked($f)|0);
    $$0 = $4;
    break;
   }
   $5 = (___lockfile($f)|0);
   $phitmp = ($5|0)==(0);
   $6 = (___fflush_unlocked($f)|0);
   if ($phitmp) {
    $$0 = $6;
   } else {
    ___unlockfile($f);
    $$0 = $6;
   }
  }
 } while(0);
 return ($$0|0);
}
function _fopen($filename,$mode) {
 $filename = $filename|0;
 $mode = $mode|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $memchr = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $0 = HEAP8[$mode>>0]|0;
 $1 = $0 << 24 >> 24;
 $memchr = (_memchr(463813,$1,4)|0);
 $2 = ($memchr|0)==(0|0);
 if ($2) {
  $3 = (___errno_location()|0);
  HEAP32[$3>>2] = 22;
  $$0 = 0;
 } else {
  $4 = (___fmodeflags($mode)|0);
  $5 = $4 | 32768;
  HEAP32[$vararg_buffer>>2] = $filename;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $5;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = 438;
  $6 = (___syscall5(5,($vararg_buffer|0))|0);
  $7 = (___syscall_ret($6)|0);
  $8 = ($7|0)<(0);
  if ($8) {
   $$0 = 0;
  } else {
   $9 = (___fdopen($7,$mode)|0);
   $10 = ($9|0)==(0|0);
   if ($10) {
    HEAP32[$vararg_buffer3>>2] = $7;
    (___syscall6(6,($vararg_buffer3|0))|0);
    $$0 = 0;
   } else {
    $$0 = $9;
   }
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _fread($destv,$size,$nmemb,$f) {
 $destv = $destv|0;
 $size = $size|0;
 $nmemb = $nmemb|0;
 $f = $f|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $dest$0$ph = 0, $dest$02 = 0, $l$0$ph = 0, $l$03 = 0, $l$03$lcssa = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = Math_imul($nmemb, $size)|0;
 $1 = ((($f)) + 76|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)>(-1);
 if ($3) {
  $4 = (___lockfile($f)|0);
  $31 = $4;
 } else {
  $31 = 0;
 }
 $5 = ((($f)) + 74|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = $6 << 24 >> 24;
 $8 = (($7) + 255)|0;
 $9 = $8 | $7;
 $10 = $9&255;
 HEAP8[$5>>0] = $10;
 $11 = ((($f)) + 8|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($f)) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $12;
 $16 = $14;
 $17 = (($15) - ($16))|0;
 $18 = ($17|0)>(0);
 if ($18) {
  $19 = ($17>>>0)<($0>>>0);
  $$ = $19 ? $17 : $0;
  _memcpy(($destv|0),($14|0),($$|0))|0;
  $20 = (($14) + ($$)|0);
  HEAP32[$13>>2] = $20;
  $21 = (($destv) + ($$)|0);
  $22 = (($0) - ($$))|0;
  $dest$0$ph = $21;$l$0$ph = $22;
 } else {
  $dest$0$ph = $destv;$l$0$ph = $0;
 }
 $23 = ($l$0$ph|0)==(0);
 L7: do {
  if ($23) {
   label = 13;
  } else {
   $24 = ((($f)) + 32|0);
   $dest$02 = $dest$0$ph;$l$03 = $l$0$ph;
   while(1) {
    $25 = (___toread($f)|0);
    $26 = ($25|0)==(0);
    if (!($26)) {
     $l$03$lcssa = $l$03;
     break;
    }
    $27 = HEAP32[$24>>2]|0;
    $28 = (FUNCTION_TABLE_iiii[$27 & 511]($f,$dest$02,$l$03)|0);
    $29 = (($28) + 1)|0;
    $30 = ($29>>>0)<(2);
    if ($30) {
     $l$03$lcssa = $l$03;
     break;
    }
    $35 = (($l$03) - ($28))|0;
    $36 = (($dest$02) + ($28)|0);
    $37 = ($l$03|0)==($28|0);
    if ($37) {
     label = 13;
     break L7;
    } else {
     $dest$02 = $36;$l$03 = $35;
    }
   }
   $32 = ($31|0)==(0);
   if (!($32)) {
    ___unlockfile($f);
   }
   $33 = (($0) - ($l$03$lcssa))|0;
   $34 = (($33>>>0) / ($size>>>0))&-1;
   $$0 = $34;
  }
 } while(0);
 if ((label|0) == 13) {
  $38 = ($31|0)==(0);
  if ($38) {
   $$0 = $nmemb;
  } else {
   ___unlockfile($f);
   $$0 = $nmemb;
  }
 }
 return ($$0|0);
}
function ___fseeko_unlocked($f,$off,$whence) {
 $f = $f|0;
 $off = $off|0;
 $whence = $whence|0;
 var $$0 = 0, $$01 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($whence|0)==(1);
 if ($0) {
  $1 = ((($f)) + 8|0);
  $2 = HEAP32[$1>>2]|0;
  $3 = ((($f)) + 4|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = $2;
  $6 = $4;
  $7 = (($off) - ($5))|0;
  $8 = (($7) + ($6))|0;
  $$01 = $8;
 } else {
  $$01 = $off;
 }
 $9 = ((($f)) + 20|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($f)) + 28|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($10>>>0)>($12>>>0);
 if ($13) {
  $14 = ((($f)) + 36|0);
  $15 = HEAP32[$14>>2]|0;
  (FUNCTION_TABLE_iiii[$15 & 511]($f,0,0)|0);
  $16 = HEAP32[$9>>2]|0;
  $17 = ($16|0)==(0|0);
  if ($17) {
   $$0 = -1;
  } else {
   label = 5;
  }
 } else {
  label = 5;
 }
 if ((label|0) == 5) {
  $18 = ((($f)) + 16|0);
  HEAP32[$18>>2] = 0;
  HEAP32[$11>>2] = 0;
  HEAP32[$9>>2] = 0;
  $19 = ((($f)) + 40|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = (FUNCTION_TABLE_iiii[$20 & 511]($f,$$01,$whence)|0);
  $22 = ($21|0)<(0);
  if ($22) {
   $$0 = -1;
  } else {
   $23 = ((($f)) + 8|0);
   HEAP32[$23>>2] = 0;
   $24 = ((($f)) + 4|0);
   HEAP32[$24>>2] = 0;
   $25 = HEAP32[$f>>2]|0;
   $26 = $25 & -17;
   HEAP32[$f>>2] = $26;
   $$0 = 0;
  }
 }
 return ($$0|0);
}
function ___fseeko($f,$off,$whence) {
 $f = $f|0;
 $off = $off|0;
 $whence = $whence|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 76|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)>(-1);
 if ($2) {
  $4 = (___lockfile($f)|0);
  $phitmp = ($4|0)==(0);
  $5 = (___fseeko_unlocked($f,$off,$whence)|0);
  if ($phitmp) {
   $6 = $5;
  } else {
   ___unlockfile($f);
   $6 = $5;
  }
 } else {
  $3 = (___fseeko_unlocked($f,$off,$whence)|0);
  $6 = $3;
 }
 return ($6|0);
}
function _fseek($f,$off,$whence) {
 $f = $f|0;
 $off = $off|0;
 $whence = $whence|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___fseeko($f,$off,$whence)|0);
 return ($0|0);
}
function ___ftello_unlocked($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 40|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$f>>2]|0;
 $3 = $2 & 128;
 $4 = ($3|0)==(0);
 if ($4) {
  $10 = 1;
 } else {
  $5 = ((($f)) + 20|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ((($f)) + 28|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($6>>>0)>($8>>>0);
  $phitmp = $9 ? 2 : 1;
  $10 = $phitmp;
 }
 $11 = (FUNCTION_TABLE_iiii[$1 & 511]($f,0,$10)|0);
 $12 = ($11|0)<(0);
 if ($12) {
  $$0 = $11;
 } else {
  $13 = ((($f)) + 8|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ((($f)) + 4|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = $14;
  $18 = $16;
  $19 = ((($f)) + 20|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ((($f)) + 28|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = $20;
  $24 = $22;
  $25 = (($11) - ($17))|0;
  $26 = (($25) + ($18))|0;
  $27 = (($26) + ($23))|0;
  $28 = (($27) - ($24))|0;
  $$0 = $28;
 }
 return ($$0|0);
}
function ___ftello($f) {
 $f = $f|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 76|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)>(-1);
 if ($2) {
  $4 = (___lockfile($f)|0);
  $phitmp = ($4|0)==(0);
  $5 = (___ftello_unlocked($f)|0);
  if ($phitmp) {
   $6 = $5;
  } else {
   ___unlockfile($f);
   $6 = $5;
  }
 } else {
  $3 = (___ftello_unlocked($f)|0);
  $6 = $3;
 }
 return ($6|0);
}
function _ftell($f) {
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___ftello($f)|0);
 return ($0|0);
}
function ___fwritex($s,$l,$f) {
 $s = $s|0;
 $l = $l|0;
 $f = $f|0;
 var $$0 = 0, $$01 = 0, $$02 = 0, $$pre = 0, $$pre6 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$0 = 0, $i$0$lcssa10 = 0;
 var $i$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $3 = (___towrite($f)|0);
  $4 = ($3|0)==(0);
  if ($4) {
   $$pre = HEAP32[$0>>2]|0;
   $7 = $$pre;
   label = 4;
  } else {
   $$0 = 0;
  }
 } else {
  $7 = $1;
  label = 4;
 }
 L4: do {
  if ((label|0) == 4) {
   $5 = ((($f)) + 20|0);
   $6 = HEAP32[$5>>2]|0;
   $8 = $7;
   $9 = $6;
   $10 = (($8) - ($9))|0;
   $11 = ($10>>>0)<($l>>>0);
   if ($11) {
    $12 = ((($f)) + 36|0);
    $13 = HEAP32[$12>>2]|0;
    $14 = (FUNCTION_TABLE_iiii[$13 & 511]($f,$s,$l)|0);
    $$0 = $14;
    break;
   }
   $15 = ((($f)) + 75|0);
   $16 = HEAP8[$15>>0]|0;
   $17 = ($16<<24>>24)>(-1);
   L9: do {
    if ($17) {
     $i$0 = $l;
     while(1) {
      $18 = ($i$0|0)==(0);
      if ($18) {
       $$01 = $l;$$02 = $s;$29 = $6;$i$1 = 0;
       break L9;
      }
      $19 = (($i$0) + -1)|0;
      $20 = (($s) + ($19)|0);
      $21 = HEAP8[$20>>0]|0;
      $22 = ($21<<24>>24)==(10);
      if ($22) {
       $i$0$lcssa10 = $i$0;
       break;
      } else {
       $i$0 = $19;
      }
     }
     $23 = ((($f)) + 36|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = (FUNCTION_TABLE_iiii[$24 & 511]($f,$s,$i$0$lcssa10)|0);
     $26 = ($25>>>0)<($i$0$lcssa10>>>0);
     if ($26) {
      $$0 = $i$0$lcssa10;
      break L4;
     }
     $27 = (($s) + ($i$0$lcssa10)|0);
     $28 = (($l) - ($i$0$lcssa10))|0;
     $$pre6 = HEAP32[$5>>2]|0;
     $$01 = $28;$$02 = $27;$29 = $$pre6;$i$1 = $i$0$lcssa10;
    } else {
     $$01 = $l;$$02 = $s;$29 = $6;$i$1 = 0;
    }
   } while(0);
   _memcpy(($29|0),($$02|0),($$01|0))|0;
   $30 = HEAP32[$5>>2]|0;
   $31 = (($30) + ($$01)|0);
   HEAP32[$5>>2] = $31;
   $32 = (($i$1) + ($$01))|0;
   $$0 = $32;
  }
 } while(0);
 return ($$0|0);
}
function _printf($fmt,$varargs) {
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $0 = 0, $1 = 0, $ap = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap = sp;
 HEAP32[$ap>>2] = $varargs;
 $0 = HEAP32[428936>>2]|0;
 $1 = (_vfprintf($0,$fmt,$ap)|0);
 STACKTOP = sp;return ($1|0);
}
function _vfprintf($f,$fmt,$ap) {
 $f = $f|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ap2 = 0, $internal_buf = 0, $nl_arg = 0, $nl_type = 0;
 var $ret$1 = 0, $ret$1$ = 0, $vacopy_currentptr = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap2 = sp + 120|0;
 $nl_type = sp + 80|0;
 $nl_arg = sp;
 $internal_buf = sp + 136|0;
 dest=$nl_type; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $vacopy_currentptr = HEAP32[$ap>>2]|0;
 HEAP32[$ap2>>2] = $vacopy_currentptr;
 $0 = (_printf_core(0,$fmt,$ap2,$nl_arg,$nl_type)|0);
 $1 = ($0|0)<(0);
 if ($1) {
  $$0 = -1;
 } else {
  $2 = ((($f)) + 76|0);
  $3 = HEAP32[$2>>2]|0;
  $4 = ($3|0)>(-1);
  if ($4) {
   $5 = (___lockfile($f)|0);
   $32 = $5;
  } else {
   $32 = 0;
  }
  $6 = HEAP32[$f>>2]|0;
  $7 = $6 & 32;
  $8 = ((($f)) + 74|0);
  $9 = HEAP8[$8>>0]|0;
  $10 = ($9<<24>>24)<(1);
  if ($10) {
   $11 = $6 & -33;
   HEAP32[$f>>2] = $11;
  }
  $12 = ((($f)) + 48|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($13|0)==(0);
  if ($14) {
   $16 = ((($f)) + 44|0);
   $17 = HEAP32[$16>>2]|0;
   HEAP32[$16>>2] = $internal_buf;
   $18 = ((($f)) + 28|0);
   HEAP32[$18>>2] = $internal_buf;
   $19 = ((($f)) + 20|0);
   HEAP32[$19>>2] = $internal_buf;
   HEAP32[$12>>2] = 80;
   $20 = ((($internal_buf)) + 80|0);
   $21 = ((($f)) + 16|0);
   HEAP32[$21>>2] = $20;
   $22 = (_printf_core($f,$fmt,$ap2,$nl_arg,$nl_type)|0);
   $23 = ($17|0)==(0|0);
   if ($23) {
    $ret$1 = $22;
   } else {
    $24 = ((($f)) + 36|0);
    $25 = HEAP32[$24>>2]|0;
    (FUNCTION_TABLE_iiii[$25 & 511]($f,0,0)|0);
    $26 = HEAP32[$19>>2]|0;
    $27 = ($26|0)==(0|0);
    $$ = $27 ? -1 : $22;
    HEAP32[$16>>2] = $17;
    HEAP32[$12>>2] = 0;
    HEAP32[$21>>2] = 0;
    HEAP32[$18>>2] = 0;
    HEAP32[$19>>2] = 0;
    $ret$1 = $$;
   }
  } else {
   $15 = (_printf_core($f,$fmt,$ap2,$nl_arg,$nl_type)|0);
   $ret$1 = $15;
  }
  $28 = HEAP32[$f>>2]|0;
  $29 = $28 & 32;
  $30 = ($29|0)==(0);
  $ret$1$ = $30 ? $ret$1 : -1;
  $31 = $28 | $7;
  HEAP32[$f>>2] = $31;
  $33 = ($32|0)==(0);
  if (!($33)) {
   ___unlockfile($f);
  }
  $$0 = $ret$1$;
 }
 STACKTOP = sp;return ($$0|0);
}
function ___fdopen($fd,$mode) {
 $fd = $fd|0;
 $mode = $mode|0;
 var $$0 = 0, $$pre = 0, $$pre1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $memchr = 0, $tio = 0, $vararg_buffer = 0, $vararg_buffer12 = 0, $vararg_buffer3 = 0, $vararg_buffer7 = 0, $vararg_ptr1 = 0, $vararg_ptr10 = 0, $vararg_ptr11 = 0, $vararg_ptr15 = 0, $vararg_ptr16 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, dest = 0, label = 0;
 var sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer12 = sp + 40|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $tio = sp + 52|0;
 $0 = HEAP8[$mode>>0]|0;
 $1 = $0 << 24 >> 24;
 $memchr = (_memchr(463813,$1,4)|0);
 $2 = ($memchr|0)==(0|0);
 if ($2) {
  $3 = (___errno_location()|0);
  HEAP32[$3>>2] = 22;
  $$0 = 0;
 } else {
  $4 = (_malloc(1144)|0);
  $5 = ($4|0)==(0|0);
  if ($5) {
   $$0 = 0;
  } else {
   dest=$4; stop=dest+112|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
   $6 = (_strchr($mode,43)|0);
   $7 = ($6|0)==(0|0);
   if ($7) {
    $8 = ($0<<24>>24)==(114);
    $9 = $8 ? 8 : 4;
    HEAP32[$4>>2] = $9;
   }
   $10 = (_strchr($mode,101)|0);
   $11 = ($10|0)==(0|0);
   if ($11) {
    $12 = $0;
   } else {
    HEAP32[$vararg_buffer>>2] = $fd;
    $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
    HEAP32[$vararg_ptr1>>2] = 2;
    $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
    HEAP32[$vararg_ptr2>>2] = 1;
    (___syscall221(221,($vararg_buffer|0))|0);
    $$pre = HEAP8[$mode>>0]|0;
    $12 = $$pre;
   }
   $13 = ($12<<24>>24)==(97);
   if ($13) {
    HEAP32[$vararg_buffer3>>2] = $fd;
    $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
    HEAP32[$vararg_ptr6>>2] = 3;
    $14 = (___syscall221(221,($vararg_buffer3|0))|0);
    $15 = $14 & 1024;
    $16 = ($15|0)==(0);
    if ($16) {
     $17 = $14 | 1024;
     HEAP32[$vararg_buffer7>>2] = $fd;
     $vararg_ptr10 = ((($vararg_buffer7)) + 4|0);
     HEAP32[$vararg_ptr10>>2] = 4;
     $vararg_ptr11 = ((($vararg_buffer7)) + 8|0);
     HEAP32[$vararg_ptr11>>2] = $17;
     (___syscall221(221,($vararg_buffer7|0))|0);
    }
    $18 = HEAP32[$4>>2]|0;
    $19 = $18 | 128;
    HEAP32[$4>>2] = $19;
    $26 = $19;
   } else {
    $$pre1 = HEAP32[$4>>2]|0;
    $26 = $$pre1;
   }
   $20 = ((($4)) + 60|0);
   HEAP32[$20>>2] = $fd;
   $21 = ((($4)) + 120|0);
   $22 = ((($4)) + 44|0);
   HEAP32[$22>>2] = $21;
   $23 = ((($4)) + 48|0);
   HEAP32[$23>>2] = 1024;
   $24 = ((($4)) + 75|0);
   HEAP8[$24>>0] = -1;
   $25 = $26 & 8;
   $27 = ($25|0)==(0);
   if ($27) {
    HEAP32[$vararg_buffer12>>2] = $fd;
    $vararg_ptr15 = ((($vararg_buffer12)) + 4|0);
    HEAP32[$vararg_ptr15>>2] = 21505;
    $vararg_ptr16 = ((($vararg_buffer12)) + 8|0);
    HEAP32[$vararg_ptr16>>2] = $tio;
    $28 = (___syscall54(54,($vararg_buffer12|0))|0);
    $29 = ($28|0)==(0);
    if ($29) {
     HEAP8[$24>>0] = 10;
    }
   }
   $30 = ((($4)) + 32|0);
   HEAP32[$30>>2] = 393;
   $31 = ((($4)) + 36|0);
   HEAP32[$31>>2] = 394;
   $32 = ((($4)) + 40|0);
   HEAP32[$32>>2] = 355;
   $33 = ((($4)) + 12|0);
   HEAP32[$33>>2] = 353;
   $34 = HEAP32[(428896)>>2]|0;
   $35 = ($34|0)==(0);
   if ($35) {
    $36 = ((($4)) + 76|0);
    HEAP32[$36>>2] = -1;
   }
   ___lock(((428920)|0));
   $37 = HEAP32[(428916)>>2]|0;
   $38 = ((($4)) + 56|0);
   HEAP32[$38>>2] = $37;
   $39 = ($37|0)==(0);
   if (!($39)) {
    $40 = $37;
    $41 = ((($40)) + 52|0);
    HEAP32[$41>>2] = $4;
   }
   HEAP32[(428916)>>2] = $4;
   ___unlock(((428920)|0));
   $$0 = $4;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function ___fmodeflags($mode) {
 $mode = $mode|0;
 var $$ = 0, $$flags$4 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $flags$0 = 0, $flags$0$ = 0, $flags$2 = 0;
 var $flags$2$ = 0, $flags$4 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strchr($mode,43)|0);
 $1 = ($0|0)==(0|0);
 $2 = HEAP8[$mode>>0]|0;
 $not$ = ($2<<24>>24)!=(114);
 $$ = $not$&1;
 $flags$0 = $1 ? $$ : 2;
 $3 = (_strchr($mode,120)|0);
 $4 = ($3|0)==(0|0);
 $5 = $flags$0 | 128;
 $flags$0$ = $4 ? $flags$0 : $5;
 $6 = (_strchr($mode,101)|0);
 $7 = ($6|0)==(0|0);
 $8 = $flags$0$ | 524288;
 $flags$2 = $7 ? $flags$0$ : $8;
 $9 = ($2<<24>>24)==(114);
 $10 = $flags$2 | 64;
 $flags$2$ = $9 ? $flags$2 : $10;
 $11 = ($2<<24>>24)==(119);
 $12 = $flags$2$ | 512;
 $flags$4 = $11 ? $12 : $flags$2$;
 $13 = ($2<<24>>24)==(97);
 $14 = $flags$4 | 1024;
 $$flags$4 = $13 ? $14 : $flags$4;
 return ($$flags$4|0);
}
function ___lockfile($f) {
 $f = $f|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function ___unlockfile($f) {
 $f = $f|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function ___stdio_close($f) {
 $f = $f|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = ((($f)) + 60|0);
 $1 = HEAP32[$0>>2]|0;
 HEAP32[$vararg_buffer>>2] = $1;
 $2 = (___syscall6(6,($vararg_buffer|0))|0);
 $3 = (___syscall_ret($2)|0);
 STACKTOP = sp;return ($3|0);
}
function ___stdio_read($f,$buf,$len) {
 $f = $f|0;
 $buf = $buf|0;
 $len = $len|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $cnt$0 = 0, $iov = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $iov = sp + 32|0;
 HEAP32[$iov>>2] = $buf;
 $0 = ((($iov)) + 4|0);
 $1 = ((($f)) + 48|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)!=(0);
 $4 = $3&1;
 $5 = (($len) - ($4))|0;
 HEAP32[$0>>2] = $5;
 $6 = ((($iov)) + 8|0);
 $7 = ((($f)) + 44|0);
 $8 = HEAP32[$7>>2]|0;
 HEAP32[$6>>2] = $8;
 $9 = ((($iov)) + 12|0);
 HEAP32[$9>>2] = $2;
 $10 = HEAP32[428892>>2]|0;
 $11 = ($10|0)==(0|0);
 if ($11) {
  $16 = ((($f)) + 60|0);
  $17 = HEAP32[$16>>2]|0;
  HEAP32[$vararg_buffer3>>2] = $17;
  $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
  HEAP32[$vararg_ptr6>>2] = $iov;
  $vararg_ptr7 = ((($vararg_buffer3)) + 8|0);
  HEAP32[$vararg_ptr7>>2] = 2;
  $18 = (___syscall145(145,($vararg_buffer3|0))|0);
  $19 = (___syscall_ret($18)|0);
  $cnt$0 = $19;
 } else {
  _pthread_cleanup_push((395|0),($f|0));
  $12 = ((($f)) + 60|0);
  $13 = HEAP32[$12>>2]|0;
  HEAP32[$vararg_buffer>>2] = $13;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $iov;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = 2;
  $14 = (___syscall145(145,($vararg_buffer|0))|0);
  $15 = (___syscall_ret($14)|0);
  _pthread_cleanup_pop(0);
  $cnt$0 = $15;
 }
 $20 = ($cnt$0|0)<(1);
 if ($20) {
  $21 = $cnt$0 & 48;
  $22 = $21 ^ 16;
  $23 = HEAP32[$f>>2]|0;
  $24 = $23 | $22;
  HEAP32[$f>>2] = $24;
  $25 = ((($f)) + 8|0);
  HEAP32[$25>>2] = 0;
  $26 = ((($f)) + 4|0);
  HEAP32[$26>>2] = 0;
  $$0 = $cnt$0;
 } else {
  $27 = HEAP32[$0>>2]|0;
  $28 = ($cnt$0>>>0)>($27>>>0);
  if ($28) {
   $29 = (($cnt$0) - ($27))|0;
   $30 = HEAP32[$7>>2]|0;
   $31 = ((($f)) + 4|0);
   HEAP32[$31>>2] = $30;
   $32 = $30;
   $33 = (($32) + ($29)|0);
   $34 = ((($f)) + 8|0);
   HEAP32[$34>>2] = $33;
   $35 = HEAP32[$1>>2]|0;
   $36 = ($35|0)==(0);
   if ($36) {
    $$0 = $len;
   } else {
    $37 = ((($32)) + 1|0);
    HEAP32[$31>>2] = $37;
    $38 = HEAP8[$32>>0]|0;
    $39 = (($len) + -1)|0;
    $40 = (($buf) + ($39)|0);
    HEAP8[$40>>0] = $38;
    $$0 = $len;
   }
  } else {
   $$0 = $cnt$0;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function ___stdio_seek($f,$off,$whence) {
 $f = $f|0;
 $off = $off|0;
 $whence = $whence|0;
 var $$pre = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $ret = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $ret = sp + 20|0;
 $0 = ((($f)) + 60|0);
 $1 = HEAP32[$0>>2]|0;
 HEAP32[$vararg_buffer>>2] = $1;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = 0;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $off;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $ret;
 $vararg_ptr4 = ((($vararg_buffer)) + 16|0);
 HEAP32[$vararg_ptr4>>2] = $whence;
 $2 = (___syscall140(140,($vararg_buffer|0))|0);
 $3 = (___syscall_ret($2)|0);
 $4 = ($3|0)<(0);
 if ($4) {
  HEAP32[$ret>>2] = -1;
  $5 = -1;
 } else {
  $$pre = HEAP32[$ret>>2]|0;
  $5 = $$pre;
 }
 STACKTOP = sp;return ($5|0);
}
function ___stdio_write($f,$buf,$len) {
 $f = $f|0;
 $buf = $buf|0;
 $len = $len|0;
 var $$0 = 0, $$phi$trans$insert = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cnt$0 = 0, $cnt$1 = 0, $iov$0 = 0, $iov$0$lcssa11 = 0, $iov$1 = 0, $iovcnt$0 = 0;
 var $iovcnt$0$lcssa12 = 0, $iovcnt$1 = 0, $iovs = 0, $rem$0 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $iovs = sp + 32|0;
 $0 = ((($f)) + 28|0);
 $1 = HEAP32[$0>>2]|0;
 HEAP32[$iovs>>2] = $1;
 $2 = ((($iovs)) + 4|0);
 $3 = ((($f)) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4;
 $6 = (($5) - ($1))|0;
 HEAP32[$2>>2] = $6;
 $7 = ((($iovs)) + 8|0);
 HEAP32[$7>>2] = $buf;
 $8 = ((($iovs)) + 12|0);
 HEAP32[$8>>2] = $len;
 $9 = (($6) + ($len))|0;
 $10 = ((($f)) + 60|0);
 $11 = ((($f)) + 44|0);
 $iov$0 = $iovs;$iovcnt$0 = 2;$rem$0 = $9;
 while(1) {
  $12 = HEAP32[428892>>2]|0;
  $13 = ($12|0)==(0|0);
  if ($13) {
   $17 = HEAP32[$10>>2]|0;
   HEAP32[$vararg_buffer3>>2] = $17;
   $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
   HEAP32[$vararg_ptr6>>2] = $iov$0;
   $vararg_ptr7 = ((($vararg_buffer3)) + 8|0);
   HEAP32[$vararg_ptr7>>2] = $iovcnt$0;
   $18 = (___syscall146(146,($vararg_buffer3|0))|0);
   $19 = (___syscall_ret($18)|0);
   $cnt$0 = $19;
  } else {
   _pthread_cleanup_push((396|0),($f|0));
   $14 = HEAP32[$10>>2]|0;
   HEAP32[$vararg_buffer>>2] = $14;
   $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
   HEAP32[$vararg_ptr1>>2] = $iov$0;
   $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
   HEAP32[$vararg_ptr2>>2] = $iovcnt$0;
   $15 = (___syscall146(146,($vararg_buffer|0))|0);
   $16 = (___syscall_ret($15)|0);
   _pthread_cleanup_pop(0);
   $cnt$0 = $16;
  }
  $20 = ($rem$0|0)==($cnt$0|0);
  if ($20) {
   label = 6;
   break;
  }
  $27 = ($cnt$0|0)<(0);
  if ($27) {
   $iov$0$lcssa11 = $iov$0;$iovcnt$0$lcssa12 = $iovcnt$0;
   label = 8;
   break;
  }
  $35 = (($rem$0) - ($cnt$0))|0;
  $36 = ((($iov$0)) + 4|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = ($cnt$0>>>0)>($37>>>0);
  if ($38) {
   $39 = HEAP32[$11>>2]|0;
   HEAP32[$0>>2] = $39;
   HEAP32[$3>>2] = $39;
   $40 = (($cnt$0) - ($37))|0;
   $41 = ((($iov$0)) + 8|0);
   $42 = (($iovcnt$0) + -1)|0;
   $$phi$trans$insert = ((($iov$0)) + 12|0);
   $$pre = HEAP32[$$phi$trans$insert>>2]|0;
   $50 = $$pre;$cnt$1 = $40;$iov$1 = $41;$iovcnt$1 = $42;
  } else {
   $43 = ($iovcnt$0|0)==(2);
   if ($43) {
    $44 = HEAP32[$0>>2]|0;
    $45 = (($44) + ($cnt$0)|0);
    HEAP32[$0>>2] = $45;
    $50 = $37;$cnt$1 = $cnt$0;$iov$1 = $iov$0;$iovcnt$1 = 2;
   } else {
    $50 = $37;$cnt$1 = $cnt$0;$iov$1 = $iov$0;$iovcnt$1 = $iovcnt$0;
   }
  }
  $46 = HEAP32[$iov$1>>2]|0;
  $47 = (($46) + ($cnt$1)|0);
  HEAP32[$iov$1>>2] = $47;
  $48 = ((($iov$1)) + 4|0);
  $49 = (($50) - ($cnt$1))|0;
  HEAP32[$48>>2] = $49;
  $iov$0 = $iov$1;$iovcnt$0 = $iovcnt$1;$rem$0 = $35;
 }
 if ((label|0) == 6) {
  $21 = HEAP32[$11>>2]|0;
  $22 = ((($f)) + 48|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = (($21) + ($23)|0);
  $25 = ((($f)) + 16|0);
  HEAP32[$25>>2] = $24;
  $26 = $21;
  HEAP32[$0>>2] = $26;
  HEAP32[$3>>2] = $26;
  $$0 = $len;
 }
 else if ((label|0) == 8) {
  $28 = ((($f)) + 16|0);
  HEAP32[$28>>2] = 0;
  HEAP32[$0>>2] = 0;
  HEAP32[$3>>2] = 0;
  $29 = HEAP32[$f>>2]|0;
  $30 = $29 | 32;
  HEAP32[$f>>2] = $30;
  $31 = ($iovcnt$0$lcssa12|0)==(2);
  if ($31) {
   $$0 = 0;
  } else {
   $32 = ((($iov$0$lcssa11)) + 4|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = (($len) - ($33))|0;
   $$0 = $34;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function ___stdout_write($f,$buf,$len) {
 $f = $f|0;
 $buf = $buf|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $tio = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $tio = sp + 12|0;
 $0 = ((($f)) + 36|0);
 HEAP32[$0>>2] = 394;
 $1 = HEAP32[$f>>2]|0;
 $2 = $1 & 64;
 $3 = ($2|0)==(0);
 if ($3) {
  $4 = ((($f)) + 60|0);
  $5 = HEAP32[$4>>2]|0;
  HEAP32[$vararg_buffer>>2] = $5;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = 21505;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $tio;
  $6 = (___syscall54(54,($vararg_buffer|0))|0);
  $7 = ($6|0)==(0);
  if (!($7)) {
   $8 = ((($f)) + 75|0);
   HEAP8[$8>>0] = -1;
  }
 }
 $9 = (___stdio_write($f,$buf,$len)|0);
 STACKTOP = sp;return ($9|0);
}
function ___toread($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 74|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1 << 24 >> 24;
 $3 = (($2) + 255)|0;
 $4 = $3 | $2;
 $5 = $4&255;
 HEAP8[$0>>0] = $5;
 $6 = ((($f)) + 20|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($f)) + 44|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($7>>>0)>($9>>>0);
 if ($10) {
  $11 = ((($f)) + 36|0);
  $12 = HEAP32[$11>>2]|0;
  (FUNCTION_TABLE_iiii[$12 & 511]($f,0,0)|0);
 }
 $13 = ((($f)) + 16|0);
 HEAP32[$13>>2] = 0;
 $14 = ((($f)) + 28|0);
 HEAP32[$14>>2] = 0;
 HEAP32[$6>>2] = 0;
 $15 = HEAP32[$f>>2]|0;
 $16 = $15 & 20;
 $17 = ($16|0)==(0);
 if ($17) {
  $21 = HEAP32[$8>>2]|0;
  $22 = ((($f)) + 8|0);
  HEAP32[$22>>2] = $21;
  $23 = ((($f)) + 4|0);
  HEAP32[$23>>2] = $21;
  $$0 = 0;
 } else {
  $18 = $15 & 4;
  $19 = ($18|0)==(0);
  if ($19) {
   $$0 = -1;
  } else {
   $20 = $15 | 32;
   HEAP32[$f>>2] = $20;
   $$0 = -1;
  }
 }
 return ($$0|0);
}
function ___towrite($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 74|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1 << 24 >> 24;
 $3 = (($2) + 255)|0;
 $4 = $3 | $2;
 $5 = $4&255;
 HEAP8[$0>>0] = $5;
 $6 = HEAP32[$f>>2]|0;
 $7 = $6 & 8;
 $8 = ($7|0)==(0);
 if ($8) {
  $10 = ((($f)) + 8|0);
  HEAP32[$10>>2] = 0;
  $11 = ((($f)) + 4|0);
  HEAP32[$11>>2] = 0;
  $12 = ((($f)) + 44|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ((($f)) + 28|0);
  HEAP32[$14>>2] = $13;
  $15 = ((($f)) + 20|0);
  HEAP32[$15>>2] = $13;
  $16 = $13;
  $17 = ((($f)) + 48|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (($16) + ($18)|0);
  $20 = ((($f)) + 16|0);
  HEAP32[$20>>2] = $19;
  $$0 = 0;
 } else {
  $9 = $6 | 32;
  HEAP32[$f>>2] = $9;
  $$0 = -1;
 }
 return ($$0|0);
}
function _memchr($src,$c,$n) {
 $src = $src|0;
 $c = $c|0;
 $n = $n|0;
 var $$0$lcssa = 0, $$0$lcssa44 = 0, $$019 = 0, $$1$lcssa = 0, $$110 = 0, $$110$lcssa = 0, $$24 = 0, $$3 = 0, $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond18 = 0, $s$0$lcssa = 0, $s$0$lcssa43 = 0, $s$020 = 0, $s$15 = 0, $s$2 = 0, $w$0$lcssa = 0, $w$011 = 0, $w$011$lcssa = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $c & 255;
 $1 = $src;
 $2 = $1 & 3;
 $3 = ($2|0)!=(0);
 $4 = ($n|0)!=(0);
 $or$cond18 = $4 & $3;
 L1: do {
  if ($or$cond18) {
   $5 = $c&255;
   $$019 = $n;$s$020 = $src;
   while(1) {
    $6 = HEAP8[$s$020>>0]|0;
    $7 = ($6<<24>>24)==($5<<24>>24);
    if ($7) {
     $$0$lcssa44 = $$019;$s$0$lcssa43 = $s$020;
     label = 6;
     break L1;
    }
    $8 = ((($s$020)) + 1|0);
    $9 = (($$019) + -1)|0;
    $10 = $8;
    $11 = $10 & 3;
    $12 = ($11|0)!=(0);
    $13 = ($9|0)!=(0);
    $or$cond = $13 & $12;
    if ($or$cond) {
     $$019 = $9;$s$020 = $8;
    } else {
     $$0$lcssa = $9;$$lcssa = $13;$s$0$lcssa = $8;
     label = 5;
     break;
    }
   }
  } else {
   $$0$lcssa = $n;$$lcssa = $4;$s$0$lcssa = $src;
   label = 5;
  }
 } while(0);
 if ((label|0) == 5) {
  if ($$lcssa) {
   $$0$lcssa44 = $$0$lcssa;$s$0$lcssa43 = $s$0$lcssa;
   label = 6;
  } else {
   $$3 = 0;$s$2 = $s$0$lcssa;
  }
 }
 L8: do {
  if ((label|0) == 6) {
   $14 = HEAP8[$s$0$lcssa43>>0]|0;
   $15 = $c&255;
   $16 = ($14<<24>>24)==($15<<24>>24);
   if ($16) {
    $$3 = $$0$lcssa44;$s$2 = $s$0$lcssa43;
   } else {
    $17 = Math_imul($0, 16843009)|0;
    $18 = ($$0$lcssa44>>>0)>(3);
    L11: do {
     if ($18) {
      $$110 = $$0$lcssa44;$w$011 = $s$0$lcssa43;
      while(1) {
       $19 = HEAP32[$w$011>>2]|0;
       $20 = $19 ^ $17;
       $21 = (($20) + -16843009)|0;
       $22 = $20 & -2139062144;
       $23 = $22 ^ -2139062144;
       $24 = $23 & $21;
       $25 = ($24|0)==(0);
       if (!($25)) {
        $$110$lcssa = $$110;$w$011$lcssa = $w$011;
        break;
       }
       $26 = ((($w$011)) + 4|0);
       $27 = (($$110) + -4)|0;
       $28 = ($27>>>0)>(3);
       if ($28) {
        $$110 = $27;$w$011 = $26;
       } else {
        $$1$lcssa = $27;$w$0$lcssa = $26;
        label = 11;
        break L11;
       }
      }
      $$24 = $$110$lcssa;$s$15 = $w$011$lcssa;
     } else {
      $$1$lcssa = $$0$lcssa44;$w$0$lcssa = $s$0$lcssa43;
      label = 11;
     }
    } while(0);
    if ((label|0) == 11) {
     $29 = ($$1$lcssa|0)==(0);
     if ($29) {
      $$3 = 0;$s$2 = $w$0$lcssa;
      break;
     } else {
      $$24 = $$1$lcssa;$s$15 = $w$0$lcssa;
     }
    }
    while(1) {
     $30 = HEAP8[$s$15>>0]|0;
     $31 = ($30<<24>>24)==($15<<24>>24);
     if ($31) {
      $$3 = $$24;$s$2 = $s$15;
      break L8;
     }
     $32 = ((($s$15)) + 1|0);
     $33 = (($$24) + -1)|0;
     $34 = ($33|0)==(0);
     if ($34) {
      $$3 = 0;$s$2 = $32;
      break;
     } else {
      $$24 = $33;$s$15 = $32;
     }
    }
   }
  }
 } while(0);
 $35 = ($$3|0)!=(0);
 $36 = $35 ? $s$2 : 0;
 return ($36|0);
}
function _strchr($s,$c) {
 $s = $s|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___strchrnul($s,$c)|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $c&255;
 $3 = ($1<<24>>24)==($2<<24>>24);
 $4 = $3 ? $0 : 0;
 return ($4|0);
}
function ___strchrnul($s,$c) {
 $s = $s|0;
 $c = $c|0;
 var $$0 = 0, $$02$lcssa = 0, $$0211 = 0, $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond5 = 0, $w$0$lcssa = 0, $w$08 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $c & 255;
 $1 = ($0|0)==(0);
 L1: do {
  if ($1) {
   $6 = (_strlen($s)|0);
   $7 = (($s) + ($6)|0);
   $$0 = $7;
  } else {
   $2 = $s;
   $3 = $2 & 3;
   $4 = ($3|0)==(0);
   if ($4) {
    $$02$lcssa = $s;
   } else {
    $5 = $c&255;
    $$0211 = $s;
    while(1) {
     $8 = HEAP8[$$0211>>0]|0;
     $9 = ($8<<24>>24)==(0);
     $10 = ($8<<24>>24)==($5<<24>>24);
     $or$cond = $9 | $10;
     if ($or$cond) {
      $$0 = $$0211;
      break L1;
     }
     $11 = ((($$0211)) + 1|0);
     $12 = $11;
     $13 = $12 & 3;
     $14 = ($13|0)==(0);
     if ($14) {
      $$02$lcssa = $11;
      break;
     } else {
      $$0211 = $11;
     }
    }
   }
   $15 = Math_imul($0, 16843009)|0;
   $16 = HEAP32[$$02$lcssa>>2]|0;
   $17 = (($16) + -16843009)|0;
   $18 = $16 & -2139062144;
   $19 = $18 ^ -2139062144;
   $20 = $19 & $17;
   $21 = ($20|0)==(0);
   L10: do {
    if ($21) {
     $23 = $16;$w$08 = $$02$lcssa;
     while(1) {
      $22 = $23 ^ $15;
      $24 = (($22) + -16843009)|0;
      $25 = $22 & -2139062144;
      $26 = $25 ^ -2139062144;
      $27 = $26 & $24;
      $28 = ($27|0)==(0);
      if (!($28)) {
       $w$0$lcssa = $w$08;
       break L10;
      }
      $29 = ((($w$08)) + 4|0);
      $30 = HEAP32[$29>>2]|0;
      $31 = (($30) + -16843009)|0;
      $32 = $30 & -2139062144;
      $33 = $32 ^ -2139062144;
      $34 = $33 & $31;
      $35 = ($34|0)==(0);
      if ($35) {
       $23 = $30;$w$08 = $29;
      } else {
       $w$0$lcssa = $29;
       break;
      }
     }
    } else {
     $w$0$lcssa = $$02$lcssa;
    }
   } while(0);
   $36 = $c&255;
   $$1 = $w$0$lcssa;
   while(1) {
    $37 = HEAP8[$$1>>0]|0;
    $38 = ($37<<24>>24)==(0);
    $39 = ($37<<24>>24)==($36<<24>>24);
    $or$cond5 = $38 | $39;
    $40 = ((($$1)) + 1|0);
    if ($or$cond5) {
     $$0 = $$1;
     break;
    } else {
     $$1 = $40;
    }
   }
  }
 } while(0);
 return ($$0|0);
}
function _strlen($s) {
 $s = $s|0;
 var $$0 = 0, $$01$lcssa = 0, $$014 = 0, $$1$lcssa = 0, $$lcssa20 = 0, $$pn = 0, $$pn15 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $w$0 = 0, $w$0$lcssa = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $s;
 $1 = $0 & 3;
 $2 = ($1|0)==(0);
 L1: do {
  if ($2) {
   $$01$lcssa = $s;
   label = 4;
  } else {
   $$014 = $s;$21 = $0;
   while(1) {
    $3 = HEAP8[$$014>>0]|0;
    $4 = ($3<<24>>24)==(0);
    if ($4) {
     $$pn = $21;
     break L1;
    }
    $5 = ((($$014)) + 1|0);
    $6 = $5;
    $7 = $6 & 3;
    $8 = ($7|0)==(0);
    if ($8) {
     $$01$lcssa = $5;
     label = 4;
     break;
    } else {
     $$014 = $5;$21 = $6;
    }
   }
  }
 } while(0);
 if ((label|0) == 4) {
  $w$0 = $$01$lcssa;
  while(1) {
   $9 = HEAP32[$w$0>>2]|0;
   $10 = (($9) + -16843009)|0;
   $11 = $9 & -2139062144;
   $12 = $11 ^ -2139062144;
   $13 = $12 & $10;
   $14 = ($13|0)==(0);
   $15 = ((($w$0)) + 4|0);
   if ($14) {
    $w$0 = $15;
   } else {
    $$lcssa20 = $9;$w$0$lcssa = $w$0;
    break;
   }
  }
  $16 = $$lcssa20&255;
  $17 = ($16<<24>>24)==(0);
  if ($17) {
   $$1$lcssa = $w$0$lcssa;
  } else {
   $$pn15 = $w$0$lcssa;
   while(1) {
    $18 = ((($$pn15)) + 1|0);
    $$pre = HEAP8[$18>>0]|0;
    $19 = ($$pre<<24>>24)==(0);
    if ($19) {
     $$1$lcssa = $18;
     break;
    } else {
     $$pn15 = $18;
    }
   }
  }
  $20 = $$1$lcssa;
  $$pn = $20;
 }
 $$0 = (($$pn) - ($0))|0;
 return ($$0|0);
}
function ___fflush_unlocked($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 20|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($f)) + 28|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($1>>>0)>($3>>>0);
 if ($4) {
  $5 = ((($f)) + 36|0);
  $6 = HEAP32[$5>>2]|0;
  (FUNCTION_TABLE_iiii[$6 & 511]($f,0,0)|0);
  $7 = HEAP32[$0>>2]|0;
  $8 = ($7|0)==(0|0);
  if ($8) {
   $$0 = -1;
  } else {
   label = 3;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  $9 = ((($f)) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ((($f)) + 8|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ($10>>>0)<($12>>>0);
  if ($13) {
   $14 = ((($f)) + 40|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = $10;
   $17 = $12;
   $18 = (($16) - ($17))|0;
   (FUNCTION_TABLE_iiii[$15 & 511]($f,$18,1)|0);
  }
  $19 = ((($f)) + 16|0);
  HEAP32[$19>>2] = 0;
  HEAP32[$2>>2] = 0;
  HEAP32[$0>>2] = 0;
  HEAP32[$11>>2] = 0;
  HEAP32[$9>>2] = 0;
  $$0 = 0;
 }
 return ($$0|0);
}
function _printf_core($f,$fmt,$ap,$nl_arg,$nl_type) {
 $f = $f|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 $nl_arg = $nl_arg|0;
 $nl_type = $nl_type|0;
 var $$ = 0, $$$i = 0, $$0 = 0, $$0$i = 0, $$0$lcssa$i = 0, $$012$i = 0, $$013$i = 0, $$03$i33 = 0, $$07$i = 0.0, $$1$i = 0.0, $$114$i = 0, $$2$i = 0.0, $$20$i = 0.0, $$21$i = 0, $$210$$22$i = 0, $$210$$24$i = 0, $$210$i = 0, $$23$i = 0, $$3$i = 0.0, $$31$i = 0;
 var $$311$i = 0, $$4$i = 0.0, $$412$lcssa$i = 0, $$41276$i = 0, $$5$lcssa$i = 0, $$51 = 0, $$587$i = 0, $$a$3$i = 0, $$a$3185$i = 0, $$a$3186$i = 0, $$fl$4 = 0, $$l10n$0 = 0, $$lcssa = 0, $$lcssa159$i = 0, $$lcssa318 = 0, $$lcssa323 = 0, $$lcssa324 = 0, $$lcssa325 = 0, $$lcssa326 = 0, $$lcssa327 = 0;
 var $$lcssa329 = 0, $$lcssa339 = 0, $$lcssa342 = 0.0, $$lcssa344 = 0, $$neg52$i = 0, $$neg53$i = 0, $$p$$i = 0, $$p$0 = 0, $$p$5 = 0, $$p$i = 0, $$pn$i = 0, $$pr$i = 0, $$pr47$i = 0, $$pre = 0, $$pre$i = 0, $$pre$phi184$iZ2D = 0, $$pre179$i = 0, $$pre182$i = 0, $$pre183$i = 0, $$pre193 = 0;
 var $$sum$i = 0, $$sum15$i = 0, $$sum16$i = 0, $$z$3$i = 0, $$z$4$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0;
 var $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0;
 var $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0;
 var $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0;
 var $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0;
 var $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0;
 var $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0;
 var $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0;
 var $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0;
 var $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0;
 var $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0;
 var $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0;
 var $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0.0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0.0;
 var $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0;
 var $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0.0, $392 = 0.0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0;
 var $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0.0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0.0, $412 = 0.0, $413 = 0.0, $414 = 0.0, $415 = 0.0, $416 = 0.0, $417 = 0;
 var $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0;
 var $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0.0, $443 = 0.0, $444 = 0.0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0;
 var $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0;
 var $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0.0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0.0, $486 = 0.0, $487 = 0.0, $488 = 0, $489 = 0, $49 = 0;
 var $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0;
 var $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0;
 var $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0;
 var $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0;
 var $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0;
 var $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0.0, $597 = 0.0, $598 = 0;
 var $599 = 0.0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0;
 var $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0;
 var $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0;
 var $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0;
 var $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0;
 var $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0;
 var $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0;
 var $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0;
 var $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0;
 var $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0;
 var $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $a$0 = 0, $a$1 = 0, $a$1$lcssa$i = 0, $a$1147$i = 0, $a$2 = 0, $a$2$ph$i = 0, $a$3$lcssa$i = 0, $a$3134$i = 0, $a$5$lcssa$i = 0, $a$5109$i = 0, $a$6$i = 0, $a$7$i = 0, $a$8$ph$i = 0, $arg = 0, $arglist_current = 0, $arglist_current2 = 0, $arglist_next = 0, $arglist_next3 = 0;
 var $argpos$0 = 0, $big$i = 0, $buf = 0, $buf$i = 0, $carry$0140$i = 0, $carry3$0128$i = 0, $cnt$0 = 0, $cnt$1 = 0, $cnt$1$lcssa = 0, $d$0$i = 0, $d$0139$i = 0, $d$0141$i = 0, $d$1127$i = 0, $d$2$lcssa$i = 0, $d$2108$i = 0, $d$3$i = 0, $d$482$i = 0, $d$575$i = 0, $d$686$i = 0, $e$0123$i = 0;
 var $e$1$i = 0, $e$2104$i = 0, $e$3$i = 0, $e$4$ph$i = 0, $e2$i = 0, $ebuf0$i = 0, $estr$0$i = 0, $estr$1$lcssa$i = 0, $estr$193$i = 0, $estr$2$i = 0, $exitcond$i = 0, $expanded = 0, $expanded10 = 0, $expanded11 = 0, $expanded13 = 0, $expanded14 = 0, $expanded15 = 0, $expanded4 = 0, $expanded6 = 0, $expanded7 = 0;
 var $expanded8 = 0, $fl$0109 = 0, $fl$062 = 0, $fl$1 = 0, $fl$1$ = 0, $fl$3 = 0, $fl$4 = 0, $fl$6 = 0, $fmt39$lcssa = 0, $fmt39101 = 0, $fmt40 = 0, $fmt41 = 0, $fmt42 = 0, $fmt44 = 0, $fmt44$lcssa321 = 0, $fmt45 = 0, $i$0$lcssa = 0, $i$0$lcssa200 = 0, $i$0114 = 0, $i$0122$i = 0;
 var $i$03$i = 0, $i$03$i25 = 0, $i$1$lcssa$i = 0, $i$1116$i = 0, $i$1125 = 0, $i$2100 = 0, $i$2100$lcssa = 0, $i$2103$i = 0, $i$398 = 0, $i$399$i = 0, $isdigit = 0, $isdigit$i = 0, $isdigit$i27 = 0, $isdigit10 = 0, $isdigit12 = 0, $isdigit2$i = 0, $isdigit2$i23 = 0, $isdigittmp = 0, $isdigittmp$ = 0, $isdigittmp$i = 0;
 var $isdigittmp$i26 = 0, $isdigittmp1$i = 0, $isdigittmp1$i22 = 0, $isdigittmp11 = 0, $isdigittmp4$i = 0, $isdigittmp4$i24 = 0, $isdigittmp9 = 0, $j$0$i = 0, $j$0115$i = 0, $j$0117$i = 0, $j$1100$i = 0, $j$2$i = 0, $l$0 = 0, $l$0$i = 0, $l$1$i = 0, $l$1113 = 0, $l$2 = 0, $l10n$0 = 0, $l10n$0$lcssa = 0, $l10n$0$phi = 0;
 var $l10n$1 = 0, $l10n$2 = 0, $l10n$3 = 0, $mb = 0, $notlhs$i = 0, $notrhs$i = 0, $or$cond = 0, $or$cond$i = 0, $or$cond15 = 0, $or$cond17 = 0, $or$cond20 = 0, $or$cond240 = 0, $or$cond29$i = 0, $or$cond3$not$i = 0, $or$cond6$i = 0, $p$0 = 0, $p$1 = 0, $p$2 = 0, $p$2$ = 0, $p$3 = 0;
 var $p$4198 = 0, $p$5 = 0, $pl$0 = 0, $pl$0$i = 0, $pl$1 = 0, $pl$1$i = 0, $pl$2 = 0, $prefix$0 = 0, $prefix$0$$i = 0, $prefix$0$i = 0, $prefix$1 = 0, $prefix$2 = 0, $r$0$a$8$i = 0, $re$169$i = 0, $round$068$i = 0.0, $round6$1$i = 0.0, $s$0$i = 0, $s$1$i = 0, $s$1$i$lcssa = 0, $s1$0$i = 0;
 var $s7$079$i = 0, $s7$1$i = 0, $s8$0$lcssa$i = 0, $s8$070$i = 0, $s9$0$i = 0, $s9$183$i = 0, $s9$2$i = 0, $small$0$i = 0.0, $small$1$i = 0.0, $st$0 = 0, $st$0$lcssa322 = 0, $storemerge = 0, $storemerge13 = 0, $storemerge8108 = 0, $storemerge860 = 0, $sum = 0, $t$0 = 0, $t$1 = 0, $w$$i = 0, $w$0 = 0;
 var $w$1 = 0, $w$2 = 0, $w$30$i = 0, $wc = 0, $ws$0115 = 0, $ws$1126 = 0, $z$0$i = 0, $z$0$lcssa = 0, $z$0102 = 0, $z$1 = 0, $z$1$lcssa$i = 0, $z$1146$i = 0, $z$2 = 0, $z$2$i = 0, $z$2$i$lcssa = 0, $z$3$lcssa$i = 0, $z$3133$i = 0, $z$4$i = 0, $z$6$$i = 0, $z$6$i = 0;
 var $z$6$i$lcssa = 0, $z$6$ph$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 624|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $big$i = sp + 24|0;
 $e2$i = sp + 16|0;
 $buf$i = sp + 588|0;
 $ebuf0$i = sp + 576|0;
 $arg = sp;
 $buf = sp + 536|0;
 $wc = sp + 8|0;
 $mb = sp + 528|0;
 $0 = ($f|0)!=(0|0);
 $1 = ((($buf)) + 40|0);
 $2 = $1;
 $3 = ((($buf)) + 39|0);
 $4 = ((($wc)) + 4|0);
 $5 = ((($ebuf0$i)) + 12|0);
 $6 = ((($ebuf0$i)) + 11|0);
 $7 = $buf$i;
 $8 = $5;
 $9 = (($8) - ($7))|0;
 $10 = (-2 - ($7))|0;
 $11 = (($8) + 2)|0;
 $12 = ((($big$i)) + 288|0);
 $13 = ((($buf$i)) + 9|0);
 $14 = $13;
 $15 = ((($buf$i)) + 8|0);
 $cnt$0 = 0;$fmt41 = $fmt;$l$0 = 0;$l10n$0 = 0;
 L1: while(1) {
  $16 = ($cnt$0|0)>(-1);
  do {
   if ($16) {
    $17 = (2147483647 - ($cnt$0))|0;
    $18 = ($l$0|0)>($17|0);
    if ($18) {
     $19 = (___errno_location()|0);
     HEAP32[$19>>2] = 75;
     $cnt$1 = -1;
     break;
    } else {
     $20 = (($l$0) + ($cnt$0))|0;
     $cnt$1 = $20;
     break;
    }
   } else {
    $cnt$1 = $cnt$0;
   }
  } while(0);
  $21 = HEAP8[$fmt41>>0]|0;
  $22 = ($21<<24>>24)==(0);
  if ($22) {
   $cnt$1$lcssa = $cnt$1;$l10n$0$lcssa = $l10n$0;
   label = 245;
   break;
  } else {
   $23 = $21;$fmt40 = $fmt41;
  }
  L9: while(1) {
   switch ($23<<24>>24) {
   case 37:  {
    $fmt39101 = $fmt40;$z$0102 = $fmt40;
    label = 9;
    break L9;
    break;
   }
   case 0:  {
    $fmt39$lcssa = $fmt40;$z$0$lcssa = $fmt40;
    break L9;
    break;
   }
   default: {
   }
   }
   $24 = ((($fmt40)) + 1|0);
   $$pre = HEAP8[$24>>0]|0;
   $23 = $$pre;$fmt40 = $24;
  }
  L12: do {
   if ((label|0) == 9) {
    while(1) {
     label = 0;
     $25 = ((($fmt39101)) + 1|0);
     $26 = HEAP8[$25>>0]|0;
     $27 = ($26<<24>>24)==(37);
     if (!($27)) {
      $fmt39$lcssa = $fmt39101;$z$0$lcssa = $z$0102;
      break L12;
     }
     $28 = ((($z$0102)) + 1|0);
     $29 = ((($fmt39101)) + 2|0);
     $30 = HEAP8[$29>>0]|0;
     $31 = ($30<<24>>24)==(37);
     if ($31) {
      $fmt39101 = $29;$z$0102 = $28;
      label = 9;
     } else {
      $fmt39$lcssa = $29;$z$0$lcssa = $28;
      break;
     }
    }
   }
  } while(0);
  $32 = $z$0$lcssa;
  $33 = $fmt41;
  $34 = (($32) - ($33))|0;
  if ($0) {
   $35 = HEAP32[$f>>2]|0;
   $36 = $35 & 32;
   $37 = ($36|0)==(0);
   if ($37) {
    (___fwritex($fmt41,$34,$f)|0);
   }
  }
  $38 = ($z$0$lcssa|0)==($fmt41|0);
  if (!($38)) {
   $l10n$0$phi = $l10n$0;$cnt$0 = $cnt$1;$fmt41 = $fmt39$lcssa;$l$0 = $34;$l10n$0 = $l10n$0$phi;
   continue;
  }
  $39 = ((($fmt39$lcssa)) + 1|0);
  $40 = HEAP8[$39>>0]|0;
  $41 = $40 << 24 >> 24;
  $isdigittmp = (($41) + -48)|0;
  $isdigit = ($isdigittmp>>>0)<(10);
  if ($isdigit) {
   $42 = ((($fmt39$lcssa)) + 2|0);
   $43 = HEAP8[$42>>0]|0;
   $44 = ($43<<24>>24)==(36);
   $45 = ((($fmt39$lcssa)) + 3|0);
   $$51 = $44 ? $45 : $39;
   $$l10n$0 = $44 ? 1 : $l10n$0;
   $isdigittmp$ = $44 ? $isdigittmp : -1;
   $$pre193 = HEAP8[$$51>>0]|0;
   $47 = $$pre193;$argpos$0 = $isdigittmp$;$l10n$1 = $$l10n$0;$storemerge = $$51;
  } else {
   $47 = $40;$argpos$0 = -1;$l10n$1 = $l10n$0;$storemerge = $39;
  }
  $46 = $47 << 24 >> 24;
  $48 = $46 & -32;
  $49 = ($48|0)==(32);
  L25: do {
   if ($49) {
    $51 = $46;$56 = $47;$fl$0109 = 0;$storemerge8108 = $storemerge;
    while(1) {
     $50 = (($51) + -32)|0;
     $52 = 1 << $50;
     $53 = $52 & 75913;
     $54 = ($53|0)==(0);
     if ($54) {
      $65 = $56;$fl$062 = $fl$0109;$storemerge860 = $storemerge8108;
      break L25;
     }
     $55 = $56 << 24 >> 24;
     $57 = (($55) + -32)|0;
     $58 = 1 << $57;
     $59 = $58 | $fl$0109;
     $60 = ((($storemerge8108)) + 1|0);
     $61 = HEAP8[$60>>0]|0;
     $62 = $61 << 24 >> 24;
     $63 = $62 & -32;
     $64 = ($63|0)==(32);
     if ($64) {
      $51 = $62;$56 = $61;$fl$0109 = $59;$storemerge8108 = $60;
     } else {
      $65 = $61;$fl$062 = $59;$storemerge860 = $60;
      break;
     }
    }
   } else {
    $65 = $47;$fl$062 = 0;$storemerge860 = $storemerge;
   }
  } while(0);
  $66 = ($65<<24>>24)==(42);
  do {
   if ($66) {
    $67 = ((($storemerge860)) + 1|0);
    $68 = HEAP8[$67>>0]|0;
    $69 = $68 << 24 >> 24;
    $isdigittmp11 = (($69) + -48)|0;
    $isdigit12 = ($isdigittmp11>>>0)<(10);
    if ($isdigit12) {
     $70 = ((($storemerge860)) + 2|0);
     $71 = HEAP8[$70>>0]|0;
     $72 = ($71<<24>>24)==(36);
     if ($72) {
      $73 = (($nl_type) + ($isdigittmp11<<2)|0);
      HEAP32[$73>>2] = 10;
      $74 = HEAP8[$67>>0]|0;
      $75 = $74 << 24 >> 24;
      $76 = (($75) + -48)|0;
      $77 = (($nl_arg) + ($76<<3)|0);
      $78 = $77;
      $79 = $78;
      $80 = HEAP32[$79>>2]|0;
      $81 = (($78) + 4)|0;
      $82 = $81;
      $83 = HEAP32[$82>>2]|0;
      $84 = ((($storemerge860)) + 3|0);
      $l10n$2 = 1;$storemerge13 = $84;$w$0 = $80;
     } else {
      label = 24;
     }
    } else {
     label = 24;
    }
    if ((label|0) == 24) {
     label = 0;
     $85 = ($l10n$1|0)==(0);
     if (!($85)) {
      $$0 = -1;
      break L1;
     }
     if (!($0)) {
      $fl$1 = $fl$062;$fmt42 = $67;$l10n$3 = 0;$w$1 = 0;
      break;
     }
     $arglist_current = HEAP32[$ap>>2]|0;
     $86 = $arglist_current;
     $87 = ((0) + 4|0);
     $expanded4 = $87;
     $expanded = (($expanded4) - 1)|0;
     $88 = (($86) + ($expanded))|0;
     $89 = ((0) + 4|0);
     $expanded8 = $89;
     $expanded7 = (($expanded8) - 1)|0;
     $expanded6 = $expanded7 ^ -1;
     $90 = $88 & $expanded6;
     $91 = $90;
     $92 = HEAP32[$91>>2]|0;
     $arglist_next = ((($91)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next;
     $l10n$2 = 0;$storemerge13 = $67;$w$0 = $92;
    }
    $93 = ($w$0|0)<(0);
    if ($93) {
     $94 = $fl$062 | 8192;
     $95 = (0 - ($w$0))|0;
     $fl$1 = $94;$fmt42 = $storemerge13;$l10n$3 = $l10n$2;$w$1 = $95;
    } else {
     $fl$1 = $fl$062;$fmt42 = $storemerge13;$l10n$3 = $l10n$2;$w$1 = $w$0;
    }
   } else {
    $96 = $65 << 24 >> 24;
    $isdigittmp1$i = (($96) + -48)|0;
    $isdigit2$i = ($isdigittmp1$i>>>0)<(10);
    if ($isdigit2$i) {
     $100 = $storemerge860;$i$03$i = 0;$isdigittmp4$i = $isdigittmp1$i;
     while(1) {
      $97 = ($i$03$i*10)|0;
      $98 = (($97) + ($isdigittmp4$i))|0;
      $99 = ((($100)) + 1|0);
      $101 = HEAP8[$99>>0]|0;
      $102 = $101 << 24 >> 24;
      $isdigittmp$i = (($102) + -48)|0;
      $isdigit$i = ($isdigittmp$i>>>0)<(10);
      if ($isdigit$i) {
       $100 = $99;$i$03$i = $98;$isdigittmp4$i = $isdigittmp$i;
      } else {
       $$lcssa = $98;$$lcssa318 = $99;
       break;
      }
     }
     $103 = ($$lcssa|0)<(0);
     if ($103) {
      $$0 = -1;
      break L1;
     } else {
      $fl$1 = $fl$062;$fmt42 = $$lcssa318;$l10n$3 = $l10n$1;$w$1 = $$lcssa;
     }
    } else {
     $fl$1 = $fl$062;$fmt42 = $storemerge860;$l10n$3 = $l10n$1;$w$1 = 0;
    }
   }
  } while(0);
  $104 = HEAP8[$fmt42>>0]|0;
  $105 = ($104<<24>>24)==(46);
  L46: do {
   if ($105) {
    $106 = ((($fmt42)) + 1|0);
    $107 = HEAP8[$106>>0]|0;
    $108 = ($107<<24>>24)==(42);
    if (!($108)) {
     $135 = $107 << 24 >> 24;
     $isdigittmp1$i22 = (($135) + -48)|0;
     $isdigit2$i23 = ($isdigittmp1$i22>>>0)<(10);
     if ($isdigit2$i23) {
      $139 = $106;$i$03$i25 = 0;$isdigittmp4$i24 = $isdigittmp1$i22;
     } else {
      $fmt45 = $106;$p$0 = 0;
      break;
     }
     while(1) {
      $136 = ($i$03$i25*10)|0;
      $137 = (($136) + ($isdigittmp4$i24))|0;
      $138 = ((($139)) + 1|0);
      $140 = HEAP8[$138>>0]|0;
      $141 = $140 << 24 >> 24;
      $isdigittmp$i26 = (($141) + -48)|0;
      $isdigit$i27 = ($isdigittmp$i26>>>0)<(10);
      if ($isdigit$i27) {
       $139 = $138;$i$03$i25 = $137;$isdigittmp4$i24 = $isdigittmp$i26;
      } else {
       $fmt45 = $138;$p$0 = $137;
       break L46;
      }
     }
    }
    $109 = ((($fmt42)) + 2|0);
    $110 = HEAP8[$109>>0]|0;
    $111 = $110 << 24 >> 24;
    $isdigittmp9 = (($111) + -48)|0;
    $isdigit10 = ($isdigittmp9>>>0)<(10);
    if ($isdigit10) {
     $112 = ((($fmt42)) + 3|0);
     $113 = HEAP8[$112>>0]|0;
     $114 = ($113<<24>>24)==(36);
     if ($114) {
      $115 = (($nl_type) + ($isdigittmp9<<2)|0);
      HEAP32[$115>>2] = 10;
      $116 = HEAP8[$109>>0]|0;
      $117 = $116 << 24 >> 24;
      $118 = (($117) + -48)|0;
      $119 = (($nl_arg) + ($118<<3)|0);
      $120 = $119;
      $121 = $120;
      $122 = HEAP32[$121>>2]|0;
      $123 = (($120) + 4)|0;
      $124 = $123;
      $125 = HEAP32[$124>>2]|0;
      $126 = ((($fmt42)) + 4|0);
      $fmt45 = $126;$p$0 = $122;
      break;
     }
    }
    $127 = ($l10n$3|0)==(0);
    if (!($127)) {
     $$0 = -1;
     break L1;
    }
    if ($0) {
     $arglist_current2 = HEAP32[$ap>>2]|0;
     $128 = $arglist_current2;
     $129 = ((0) + 4|0);
     $expanded11 = $129;
     $expanded10 = (($expanded11) - 1)|0;
     $130 = (($128) + ($expanded10))|0;
     $131 = ((0) + 4|0);
     $expanded15 = $131;
     $expanded14 = (($expanded15) - 1)|0;
     $expanded13 = $expanded14 ^ -1;
     $132 = $130 & $expanded13;
     $133 = $132;
     $134 = HEAP32[$133>>2]|0;
     $arglist_next3 = ((($133)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next3;
     $fmt45 = $109;$p$0 = $134;
    } else {
     $fmt45 = $109;$p$0 = 0;
    }
   } else {
    $fmt45 = $fmt42;$p$0 = -1;
   }
  } while(0);
  $fmt44 = $fmt45;$st$0 = 0;
  while(1) {
   $142 = HEAP8[$fmt44>>0]|0;
   $143 = $142 << 24 >> 24;
   $144 = (($143) + -65)|0;
   $145 = ($144>>>0)>(57);
   if ($145) {
    $$0 = -1;
    break L1;
   }
   $146 = ((($fmt44)) + 1|0);
   $147 = ((464849 + (($st$0*58)|0)|0) + ($144)|0);
   $148 = HEAP8[$147>>0]|0;
   $149 = $148&255;
   $150 = (($149) + -1)|0;
   $151 = ($150>>>0)<(8);
   if ($151) {
    $fmt44 = $146;$st$0 = $149;
   } else {
    $$lcssa323 = $146;$$lcssa324 = $148;$$lcssa325 = $149;$fmt44$lcssa321 = $fmt44;$st$0$lcssa322 = $st$0;
    break;
   }
  }
  $152 = ($$lcssa324<<24>>24)==(0);
  if ($152) {
   $$0 = -1;
   break;
  }
  $153 = ($$lcssa324<<24>>24)==(19);
  $154 = ($argpos$0|0)>(-1);
  do {
   if ($153) {
    if ($154) {
     $$0 = -1;
     break L1;
    } else {
     label = 52;
    }
   } else {
    if ($154) {
     $155 = (($nl_type) + ($argpos$0<<2)|0);
     HEAP32[$155>>2] = $$lcssa325;
     $156 = (($nl_arg) + ($argpos$0<<3)|0);
     $157 = $156;
     $158 = $157;
     $159 = HEAP32[$158>>2]|0;
     $160 = (($157) + 4)|0;
     $161 = $160;
     $162 = HEAP32[$161>>2]|0;
     $163 = $arg;
     $164 = $163;
     HEAP32[$164>>2] = $159;
     $165 = (($163) + 4)|0;
     $166 = $165;
     HEAP32[$166>>2] = $162;
     label = 52;
     break;
    }
    if (!($0)) {
     $$0 = 0;
     break L1;
    }
    _pop_arg($arg,$$lcssa325,$ap);
   }
  } while(0);
  if ((label|0) == 52) {
   label = 0;
   if (!($0)) {
    $cnt$0 = $cnt$1;$fmt41 = $$lcssa323;$l$0 = $34;$l10n$0 = $l10n$3;
    continue;
   }
  }
  $167 = HEAP8[$fmt44$lcssa321>>0]|0;
  $168 = $167 << 24 >> 24;
  $169 = ($st$0$lcssa322|0)!=(0);
  $170 = $168 & 15;
  $171 = ($170|0)==(3);
  $or$cond15 = $169 & $171;
  $172 = $168 & -33;
  $t$0 = $or$cond15 ? $172 : $168;
  $173 = $fl$1 & 8192;
  $174 = ($173|0)==(0);
  $175 = $fl$1 & -65537;
  $fl$1$ = $174 ? $fl$1 : $175;
  L75: do {
   switch ($t$0|0) {
   case 110:  {
    switch ($st$0$lcssa322|0) {
    case 0:  {
     $182 = HEAP32[$arg>>2]|0;
     HEAP32[$182>>2] = $cnt$1;
     $cnt$0 = $cnt$1;$fmt41 = $$lcssa323;$l$0 = $34;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 1:  {
     $183 = HEAP32[$arg>>2]|0;
     HEAP32[$183>>2] = $cnt$1;
     $cnt$0 = $cnt$1;$fmt41 = $$lcssa323;$l$0 = $34;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 2:  {
     $184 = ($cnt$1|0)<(0);
     $185 = $184 << 31 >> 31;
     $186 = HEAP32[$arg>>2]|0;
     $187 = $186;
     $188 = $187;
     HEAP32[$188>>2] = $cnt$1;
     $189 = (($187) + 4)|0;
     $190 = $189;
     HEAP32[$190>>2] = $185;
     $cnt$0 = $cnt$1;$fmt41 = $$lcssa323;$l$0 = $34;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 3:  {
     $191 = $cnt$1&65535;
     $192 = HEAP32[$arg>>2]|0;
     HEAP16[$192>>1] = $191;
     $cnt$0 = $cnt$1;$fmt41 = $$lcssa323;$l$0 = $34;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 4:  {
     $193 = $cnt$1&255;
     $194 = HEAP32[$arg>>2]|0;
     HEAP8[$194>>0] = $193;
     $cnt$0 = $cnt$1;$fmt41 = $$lcssa323;$l$0 = $34;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 6:  {
     $195 = HEAP32[$arg>>2]|0;
     HEAP32[$195>>2] = $cnt$1;
     $cnt$0 = $cnt$1;$fmt41 = $$lcssa323;$l$0 = $34;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 7:  {
     $196 = ($cnt$1|0)<(0);
     $197 = $196 << 31 >> 31;
     $198 = HEAP32[$arg>>2]|0;
     $199 = $198;
     $200 = $199;
     HEAP32[$200>>2] = $cnt$1;
     $201 = (($199) + 4)|0;
     $202 = $201;
     HEAP32[$202>>2] = $197;
     $cnt$0 = $cnt$1;$fmt41 = $$lcssa323;$l$0 = $34;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    default: {
     $cnt$0 = $cnt$1;$fmt41 = $$lcssa323;$l$0 = $34;$l10n$0 = $l10n$3;
     continue L1;
    }
    }
    break;
   }
   case 112:  {
    $203 = ($p$0>>>0)>(8);
    $204 = $203 ? $p$0 : 8;
    $205 = $fl$1$ | 8;
    $fl$3 = $205;$p$1 = $204;$t$1 = 120;
    label = 64;
    break;
   }
   case 88: case 120:  {
    $fl$3 = $fl$1$;$p$1 = $p$0;$t$1 = $t$0;
    label = 64;
    break;
   }
   case 111:  {
    $243 = $arg;
    $244 = $243;
    $245 = HEAP32[$244>>2]|0;
    $246 = (($243) + 4)|0;
    $247 = $246;
    $248 = HEAP32[$247>>2]|0;
    $249 = ($245|0)==(0);
    $250 = ($248|0)==(0);
    $251 = $249 & $250;
    if ($251) {
     $$0$lcssa$i = $1;
    } else {
     $$03$i33 = $1;$253 = $245;$257 = $248;
     while(1) {
      $252 = $253 & 7;
      $254 = $252 | 48;
      $255 = $254&255;
      $256 = ((($$03$i33)) + -1|0);
      HEAP8[$256>>0] = $255;
      $258 = (_bitshift64Lshr(($253|0),($257|0),3)|0);
      $259 = tempRet0;
      $260 = ($258|0)==(0);
      $261 = ($259|0)==(0);
      $262 = $260 & $261;
      if ($262) {
       $$0$lcssa$i = $256;
       break;
      } else {
       $$03$i33 = $256;$253 = $258;$257 = $259;
      }
     }
    }
    $263 = $fl$1$ & 8;
    $264 = ($263|0)==(0);
    if ($264) {
     $a$0 = $$0$lcssa$i;$fl$4 = $fl$1$;$p$2 = $p$0;$pl$1 = 0;$prefix$1 = 465329;
     label = 77;
    } else {
     $265 = $$0$lcssa$i;
     $266 = (($2) - ($265))|0;
     $267 = (($266) + 1)|0;
     $268 = ($p$0|0)<($267|0);
     $$p$0 = $268 ? $267 : $p$0;
     $a$0 = $$0$lcssa$i;$fl$4 = $fl$1$;$p$2 = $$p$0;$pl$1 = 0;$prefix$1 = 465329;
     label = 77;
    }
    break;
   }
   case 105: case 100:  {
    $269 = $arg;
    $270 = $269;
    $271 = HEAP32[$270>>2]|0;
    $272 = (($269) + 4)|0;
    $273 = $272;
    $274 = HEAP32[$273>>2]|0;
    $275 = ($274|0)<(0);
    if ($275) {
     $276 = (_i64Subtract(0,0,($271|0),($274|0))|0);
     $277 = tempRet0;
     $278 = $arg;
     $279 = $278;
     HEAP32[$279>>2] = $276;
     $280 = (($278) + 4)|0;
     $281 = $280;
     HEAP32[$281>>2] = $277;
     $286 = $276;$287 = $277;$pl$0 = 1;$prefix$0 = 465329;
     label = 76;
     break L75;
    }
    $282 = $fl$1$ & 2048;
    $283 = ($282|0)==(0);
    if ($283) {
     $284 = $fl$1$ & 1;
     $285 = ($284|0)==(0);
     $$ = $285 ? 465329 : (465331);
     $286 = $271;$287 = $274;$pl$0 = $284;$prefix$0 = $$;
     label = 76;
    } else {
     $286 = $271;$287 = $274;$pl$0 = 1;$prefix$0 = (465330);
     label = 76;
    }
    break;
   }
   case 117:  {
    $176 = $arg;
    $177 = $176;
    $178 = HEAP32[$177>>2]|0;
    $179 = (($176) + 4)|0;
    $180 = $179;
    $181 = HEAP32[$180>>2]|0;
    $286 = $178;$287 = $181;$pl$0 = 0;$prefix$0 = 465329;
    label = 76;
    break;
   }
   case 99:  {
    $307 = $arg;
    $308 = $307;
    $309 = HEAP32[$308>>2]|0;
    $310 = (($307) + 4)|0;
    $311 = $310;
    $312 = HEAP32[$311>>2]|0;
    $313 = $309&255;
    HEAP8[$3>>0] = $313;
    $a$2 = $3;$fl$6 = $175;$p$5 = 1;$pl$2 = 0;$prefix$2 = 465329;$z$2 = $1;
    break;
   }
   case 109:  {
    $314 = (___errno_location()|0);
    $315 = HEAP32[$314>>2]|0;
    $316 = (_strerror($315)|0);
    $a$1 = $316;
    label = 82;
    break;
   }
   case 115:  {
    $317 = HEAP32[$arg>>2]|0;
    $318 = ($317|0)!=(0|0);
    $319 = $318 ? $317 : 465339;
    $a$1 = $319;
    label = 82;
    break;
   }
   case 67:  {
    $326 = $arg;
    $327 = $326;
    $328 = HEAP32[$327>>2]|0;
    $329 = (($326) + 4)|0;
    $330 = $329;
    $331 = HEAP32[$330>>2]|0;
    HEAP32[$wc>>2] = $328;
    HEAP32[$4>>2] = 0;
    HEAP32[$arg>>2] = $wc;
    $p$4198 = -1;
    label = 86;
    break;
   }
   case 83:  {
    $332 = ($p$0|0)==(0);
    if ($332) {
     _pad($f,32,$w$1,0,$fl$1$);
     $i$0$lcssa200 = 0;
     label = 98;
    } else {
     $p$4198 = $p$0;
     label = 86;
    }
    break;
   }
   case 65: case 71: case 70: case 69: case 97: case 103: case 102: case 101:  {
    $359 = +HEAPF64[$arg>>3];
    HEAP32[$e2$i>>2] = 0;
    HEAPF64[tempDoublePtr>>3] = $359;$360 = HEAP32[tempDoublePtr>>2]|0;
    $361 = HEAP32[tempDoublePtr+4>>2]|0;
    $362 = ($361|0)<(0);
    if ($362) {
     $363 = -$359;
     $$07$i = $363;$pl$0$i = 1;$prefix$0$i = 465346;
    } else {
     $364 = $fl$1$ & 2048;
     $365 = ($364|0)==(0);
     if ($365) {
      $366 = $fl$1$ & 1;
      $367 = ($366|0)==(0);
      $$$i = $367 ? (465347) : (465352);
      $$07$i = $359;$pl$0$i = $366;$prefix$0$i = $$$i;
     } else {
      $$07$i = $359;$pl$0$i = 1;$prefix$0$i = (465349);
     }
    }
    HEAPF64[tempDoublePtr>>3] = $$07$i;$368 = HEAP32[tempDoublePtr>>2]|0;
    $369 = HEAP32[tempDoublePtr+4>>2]|0;
    $370 = $369 & 2146435072;
    $371 = ($370>>>0)<(2146435072);
    $372 = (0)<(0);
    $373 = ($370|0)==(2146435072);
    $374 = $373 & $372;
    $375 = $371 | $374;
    do {
     if ($375) {
      $391 = (+_frexpl($$07$i,$e2$i));
      $392 = $391 * 2.0;
      $393 = $392 != 0.0;
      if ($393) {
       $394 = HEAP32[$e2$i>>2]|0;
       $395 = (($394) + -1)|0;
       HEAP32[$e2$i>>2] = $395;
      }
      $396 = $t$0 | 32;
      $397 = ($396|0)==(97);
      if ($397) {
       $398 = $t$0 & 32;
       $399 = ($398|0)==(0);
       $400 = ((($prefix$0$i)) + 9|0);
       $prefix$0$$i = $399 ? $prefix$0$i : $400;
       $401 = $pl$0$i | 2;
       $402 = ($p$0>>>0)>(11);
       $403 = (12 - ($p$0))|0;
       $404 = ($403|0)==(0);
       $405 = $402 | $404;
       do {
        if ($405) {
         $$1$i = $392;
        } else {
         $re$169$i = $403;$round$068$i = 8.0;
         while(1) {
          $406 = (($re$169$i) + -1)|0;
          $407 = $round$068$i * 16.0;
          $408 = ($406|0)==(0);
          if ($408) {
           $$lcssa342 = $407;
           break;
          } else {
           $re$169$i = $406;$round$068$i = $407;
          }
         }
         $409 = HEAP8[$prefix$0$$i>>0]|0;
         $410 = ($409<<24>>24)==(45);
         if ($410) {
          $411 = -$392;
          $412 = $411 - $$lcssa342;
          $413 = $$lcssa342 + $412;
          $414 = -$413;
          $$1$i = $414;
          break;
         } else {
          $415 = $392 + $$lcssa342;
          $416 = $415 - $$lcssa342;
          $$1$i = $416;
          break;
         }
        }
       } while(0);
       $417 = HEAP32[$e2$i>>2]|0;
       $418 = ($417|0)<(0);
       $419 = (0 - ($417))|0;
       $420 = $418 ? $419 : $417;
       $421 = ($420|0)<(0);
       $422 = $421 << 31 >> 31;
       $423 = (_fmt_u($420,$422,$5)|0);
       $424 = ($423|0)==($5|0);
       if ($424) {
        HEAP8[$6>>0] = 48;
        $estr$0$i = $6;
       } else {
        $estr$0$i = $423;
       }
       $425 = $417 >> 31;
       $426 = $425 & 2;
       $427 = (($426) + 43)|0;
       $428 = $427&255;
       $429 = ((($estr$0$i)) + -1|0);
       HEAP8[$429>>0] = $428;
       $430 = (($t$0) + 15)|0;
       $431 = $430&255;
       $432 = ((($estr$0$i)) + -2|0);
       HEAP8[$432>>0] = $431;
       $notrhs$i = ($p$0|0)<(1);
       $433 = $fl$1$ & 8;
       $434 = ($433|0)==(0);
       $$2$i = $$1$i;$s$0$i = $buf$i;
       while(1) {
        $435 = (~~(($$2$i)));
        $436 = (465313 + ($435)|0);
        $437 = HEAP8[$436>>0]|0;
        $438 = $437&255;
        $439 = $438 | $398;
        $440 = $439&255;
        $441 = ((($s$0$i)) + 1|0);
        HEAP8[$s$0$i>>0] = $440;
        $442 = (+($435|0));
        $443 = $$2$i - $442;
        $444 = $443 * 16.0;
        $445 = $441;
        $446 = (($445) - ($7))|0;
        $447 = ($446|0)==(1);
        do {
         if ($447) {
          $notlhs$i = $444 == 0.0;
          $or$cond3$not$i = $notrhs$i & $notlhs$i;
          $or$cond$i = $434 & $or$cond3$not$i;
          if ($or$cond$i) {
           $s$1$i = $441;
           break;
          }
          $448 = ((($s$0$i)) + 2|0);
          HEAP8[$441>>0] = 46;
          $s$1$i = $448;
         } else {
          $s$1$i = $441;
         }
        } while(0);
        $449 = $444 != 0.0;
        if ($449) {
         $$2$i = $444;$s$0$i = $s$1$i;
        } else {
         $s$1$i$lcssa = $s$1$i;
         break;
        }
       }
       $450 = ($p$0|0)!=(0);
       $$pre182$i = $s$1$i$lcssa;
       $451 = (($10) + ($$pre182$i))|0;
       $452 = ($451|0)<($p$0|0);
       $or$cond240 = $450 & $452;
       $453 = $432;
       $454 = (($11) + ($p$0))|0;
       $455 = (($454) - ($453))|0;
       $456 = $432;
       $457 = (($9) - ($456))|0;
       $458 = (($457) + ($$pre182$i))|0;
       $l$0$i = $or$cond240 ? $455 : $458;
       $459 = (($l$0$i) + ($401))|0;
       _pad($f,32,$w$1,$459,$fl$1$);
       $460 = HEAP32[$f>>2]|0;
       $461 = $460 & 32;
       $462 = ($461|0)==(0);
       if ($462) {
        (___fwritex($prefix$0$$i,$401,$f)|0);
       }
       $463 = $fl$1$ ^ 65536;
       _pad($f,48,$w$1,$459,$463);
       $464 = (($$pre182$i) - ($7))|0;
       $465 = HEAP32[$f>>2]|0;
       $466 = $465 & 32;
       $467 = ($466|0)==(0);
       if ($467) {
        (___fwritex($buf$i,$464,$f)|0);
       }
       $468 = $432;
       $469 = (($8) - ($468))|0;
       $sum = (($464) + ($469))|0;
       $470 = (($l$0$i) - ($sum))|0;
       _pad($f,48,$470,0,0);
       $471 = HEAP32[$f>>2]|0;
       $472 = $471 & 32;
       $473 = ($472|0)==(0);
       if ($473) {
        (___fwritex($432,$469,$f)|0);
       }
       $474 = $fl$1$ ^ 8192;
       _pad($f,32,$w$1,$459,$474);
       $475 = ($459|0)<($w$1|0);
       $w$$i = $475 ? $w$1 : $459;
       $$0$i = $w$$i;
       break;
      }
      $476 = ($p$0|0)<(0);
      $$p$i = $476 ? 6 : $p$0;
      if ($393) {
       $477 = $392 * 268435456.0;
       $478 = HEAP32[$e2$i>>2]|0;
       $479 = (($478) + -28)|0;
       HEAP32[$e2$i>>2] = $479;
       $$3$i = $477;$480 = $479;
      } else {
       $$pre179$i = HEAP32[$e2$i>>2]|0;
       $$3$i = $392;$480 = $$pre179$i;
      }
      $481 = ($480|0)<(0);
      $$31$i = $481 ? $big$i : $12;
      $482 = $$31$i;
      $$4$i = $$3$i;$z$0$i = $$31$i;
      while(1) {
       $483 = (~~(($$4$i))>>>0);
       HEAP32[$z$0$i>>2] = $483;
       $484 = ((($z$0$i)) + 4|0);
       $485 = (+($483>>>0));
       $486 = $$4$i - $485;
       $487 = $486 * 1.0E+9;
       $488 = $487 != 0.0;
       if ($488) {
        $$4$i = $487;$z$0$i = $484;
       } else {
        $$lcssa326 = $484;
        break;
       }
      }
      $$pr$i = HEAP32[$e2$i>>2]|0;
      $489 = ($$pr$i|0)>(0);
      if ($489) {
       $490 = $$pr$i;$a$1147$i = $$31$i;$z$1146$i = $$lcssa326;
       while(1) {
        $491 = ($490|0)>(29);
        $492 = $491 ? 29 : $490;
        $d$0139$i = ((($z$1146$i)) + -4|0);
        $493 = ($d$0139$i>>>0)<($a$1147$i>>>0);
        do {
         if ($493) {
          $a$2$ph$i = $a$1147$i;
         } else {
          $carry$0140$i = 0;$d$0141$i = $d$0139$i;
          while(1) {
           $494 = HEAP32[$d$0141$i>>2]|0;
           $495 = (_bitshift64Shl(($494|0),0,($492|0))|0);
           $496 = tempRet0;
           $497 = (_i64Add(($495|0),($496|0),($carry$0140$i|0),0)|0);
           $498 = tempRet0;
           $499 = (___uremdi3(($497|0),($498|0),1000000000,0)|0);
           $500 = tempRet0;
           HEAP32[$d$0141$i>>2] = $499;
           $501 = (___udivdi3(($497|0),($498|0),1000000000,0)|0);
           $502 = tempRet0;
           $d$0$i = ((($d$0141$i)) + -4|0);
           $503 = ($d$0$i>>>0)<($a$1147$i>>>0);
           if ($503) {
            $$lcssa327 = $501;
            break;
           } else {
            $carry$0140$i = $501;$d$0141$i = $d$0$i;
           }
          }
          $504 = ($$lcssa327|0)==(0);
          if ($504) {
           $a$2$ph$i = $a$1147$i;
           break;
          }
          $505 = ((($a$1147$i)) + -4|0);
          HEAP32[$505>>2] = $$lcssa327;
          $a$2$ph$i = $505;
         }
        } while(0);
        $z$2$i = $z$1146$i;
        while(1) {
         $506 = ($z$2$i>>>0)>($a$2$ph$i>>>0);
         if (!($506)) {
          $z$2$i$lcssa = $z$2$i;
          break;
         }
         $507 = ((($z$2$i)) + -4|0);
         $508 = HEAP32[$507>>2]|0;
         $509 = ($508|0)==(0);
         if ($509) {
          $z$2$i = $507;
         } else {
          $z$2$i$lcssa = $z$2$i;
          break;
         }
        }
        $510 = HEAP32[$e2$i>>2]|0;
        $511 = (($510) - ($492))|0;
        HEAP32[$e2$i>>2] = $511;
        $512 = ($511|0)>(0);
        if ($512) {
         $490 = $511;$a$1147$i = $a$2$ph$i;$z$1146$i = $z$2$i$lcssa;
        } else {
         $$pr47$i = $511;$a$1$lcssa$i = $a$2$ph$i;$z$1$lcssa$i = $z$2$i$lcssa;
         break;
        }
       }
      } else {
       $$pr47$i = $$pr$i;$a$1$lcssa$i = $$31$i;$z$1$lcssa$i = $$lcssa326;
      }
      $513 = ($$pr47$i|0)<(0);
      if ($513) {
       $514 = (($$p$i) + 25)|0;
       $515 = (($514|0) / 9)&-1;
       $516 = (($515) + 1)|0;
       $517 = ($396|0)==(102);
       $519 = $$pr47$i;$a$3134$i = $a$1$lcssa$i;$z$3133$i = $z$1$lcssa$i;
       while(1) {
        $518 = (0 - ($519))|0;
        $520 = ($518|0)>(9);
        $521 = $520 ? 9 : $518;
        $522 = ($a$3134$i>>>0)<($z$3133$i>>>0);
        do {
         if ($522) {
          $526 = 1 << $521;
          $527 = (($526) + -1)|0;
          $528 = 1000000000 >>> $521;
          $carry3$0128$i = 0;$d$1127$i = $a$3134$i;
          while(1) {
           $529 = HEAP32[$d$1127$i>>2]|0;
           $530 = $529 & $527;
           $531 = $529 >>> $521;
           $532 = (($531) + ($carry3$0128$i))|0;
           HEAP32[$d$1127$i>>2] = $532;
           $533 = Math_imul($530, $528)|0;
           $534 = ((($d$1127$i)) + 4|0);
           $535 = ($534>>>0)<($z$3133$i>>>0);
           if ($535) {
            $carry3$0128$i = $533;$d$1127$i = $534;
           } else {
            $$lcssa329 = $533;
            break;
           }
          }
          $536 = HEAP32[$a$3134$i>>2]|0;
          $537 = ($536|0)==(0);
          $538 = ((($a$3134$i)) + 4|0);
          $$a$3$i = $537 ? $538 : $a$3134$i;
          $539 = ($$lcssa329|0)==(0);
          if ($539) {
           $$a$3186$i = $$a$3$i;$z$4$i = $z$3133$i;
           break;
          }
          $540 = ((($z$3133$i)) + 4|0);
          HEAP32[$z$3133$i>>2] = $$lcssa329;
          $$a$3186$i = $$a$3$i;$z$4$i = $540;
         } else {
          $523 = HEAP32[$a$3134$i>>2]|0;
          $524 = ($523|0)==(0);
          $525 = ((($a$3134$i)) + 4|0);
          $$a$3185$i = $524 ? $525 : $a$3134$i;
          $$a$3186$i = $$a$3185$i;$z$4$i = $z$3133$i;
         }
        } while(0);
        $541 = $517 ? $$31$i : $$a$3186$i;
        $542 = $z$4$i;
        $543 = $541;
        $544 = (($542) - ($543))|0;
        $545 = $544 >> 2;
        $546 = ($545|0)>($516|0);
        $547 = (($541) + ($516<<2)|0);
        $$z$4$i = $546 ? $547 : $z$4$i;
        $548 = HEAP32[$e2$i>>2]|0;
        $549 = (($548) + ($521))|0;
        HEAP32[$e2$i>>2] = $549;
        $550 = ($549|0)<(0);
        if ($550) {
         $519 = $549;$a$3134$i = $$a$3186$i;$z$3133$i = $$z$4$i;
        } else {
         $a$3$lcssa$i = $$a$3186$i;$z$3$lcssa$i = $$z$4$i;
         break;
        }
       }
      } else {
       $a$3$lcssa$i = $a$1$lcssa$i;$z$3$lcssa$i = $z$1$lcssa$i;
      }
      $551 = ($a$3$lcssa$i>>>0)<($z$3$lcssa$i>>>0);
      do {
       if ($551) {
        $552 = $a$3$lcssa$i;
        $553 = (($482) - ($552))|0;
        $554 = $553 >> 2;
        $555 = ($554*9)|0;
        $556 = HEAP32[$a$3$lcssa$i>>2]|0;
        $557 = ($556>>>0)<(10);
        if ($557) {
         $e$1$i = $555;
         break;
        } else {
         $e$0123$i = $555;$i$0122$i = 10;
        }
        while(1) {
         $558 = ($i$0122$i*10)|0;
         $559 = (($e$0123$i) + 1)|0;
         $560 = ($556>>>0)<($558>>>0);
         if ($560) {
          $e$1$i = $559;
          break;
         } else {
          $e$0123$i = $559;$i$0122$i = $558;
         }
        }
       } else {
        $e$1$i = 0;
       }
      } while(0);
      $561 = ($396|0)!=(102);
      $562 = $561 ? $e$1$i : 0;
      $563 = (($$p$i) - ($562))|0;
      $564 = ($396|0)==(103);
      $565 = ($$p$i|0)!=(0);
      $566 = $565 & $564;
      $$neg52$i = $566 << 31 >> 31;
      $567 = (($563) + ($$neg52$i))|0;
      $568 = $z$3$lcssa$i;
      $569 = (($568) - ($482))|0;
      $570 = $569 >> 2;
      $571 = ($570*9)|0;
      $572 = (($571) + -9)|0;
      $573 = ($567|0)<($572|0);
      if ($573) {
       $574 = (($567) + 9216)|0;
       $575 = (($574|0) / 9)&-1;
       $$sum$i = (($575) + -1023)|0;
       $576 = (($$31$i) + ($$sum$i<<2)|0);
       $577 = (($574|0) % 9)&-1;
       $j$0115$i = (($577) + 1)|0;
       $578 = ($j$0115$i|0)<(9);
       if ($578) {
        $i$1116$i = 10;$j$0117$i = $j$0115$i;
        while(1) {
         $579 = ($i$1116$i*10)|0;
         $j$0$i = (($j$0117$i) + 1)|0;
         $exitcond$i = ($j$0$i|0)==(9);
         if ($exitcond$i) {
          $i$1$lcssa$i = $579;
          break;
         } else {
          $i$1116$i = $579;$j$0117$i = $j$0$i;
         }
        }
       } else {
        $i$1$lcssa$i = 10;
       }
       $580 = HEAP32[$576>>2]|0;
       $581 = (($580>>>0) % ($i$1$lcssa$i>>>0))&-1;
       $582 = ($581|0)==(0);
       if ($582) {
        $$sum15$i = (($575) + -1022)|0;
        $583 = (($$31$i) + ($$sum15$i<<2)|0);
        $584 = ($583|0)==($z$3$lcssa$i|0);
        if ($584) {
         $a$7$i = $a$3$lcssa$i;$d$3$i = $576;$e$3$i = $e$1$i;
        } else {
         label = 163;
        }
       } else {
        label = 163;
       }
       do {
        if ((label|0) == 163) {
         label = 0;
         $585 = (($580>>>0) / ($i$1$lcssa$i>>>0))&-1;
         $586 = $585 & 1;
         $587 = ($586|0)==(0);
         $$20$i = $587 ? 9007199254740992.0 : 9007199254740994.0;
         $588 = (($i$1$lcssa$i|0) / 2)&-1;
         $589 = ($581>>>0)<($588>>>0);
         do {
          if ($589) {
           $small$0$i = 0.5;
          } else {
           $590 = ($581|0)==($588|0);
           if ($590) {
            $$sum16$i = (($575) + -1022)|0;
            $591 = (($$31$i) + ($$sum16$i<<2)|0);
            $592 = ($591|0)==($z$3$lcssa$i|0);
            if ($592) {
             $small$0$i = 1.0;
             break;
            }
           }
           $small$0$i = 1.5;
          }
         } while(0);
         $593 = ($pl$0$i|0)==(0);
         do {
          if ($593) {
           $round6$1$i = $$20$i;$small$1$i = $small$0$i;
          } else {
           $594 = HEAP8[$prefix$0$i>>0]|0;
           $595 = ($594<<24>>24)==(45);
           if (!($595)) {
            $round6$1$i = $$20$i;$small$1$i = $small$0$i;
            break;
           }
           $596 = -$$20$i;
           $597 = -$small$0$i;
           $round6$1$i = $596;$small$1$i = $597;
          }
         } while(0);
         $598 = (($580) - ($581))|0;
         HEAP32[$576>>2] = $598;
         $599 = $round6$1$i + $small$1$i;
         $600 = $599 != $round6$1$i;
         if (!($600)) {
          $a$7$i = $a$3$lcssa$i;$d$3$i = $576;$e$3$i = $e$1$i;
          break;
         }
         $601 = (($598) + ($i$1$lcssa$i))|0;
         HEAP32[$576>>2] = $601;
         $602 = ($601>>>0)>(999999999);
         if ($602) {
          $a$5109$i = $a$3$lcssa$i;$d$2108$i = $576;
          while(1) {
           $603 = ((($d$2108$i)) + -4|0);
           HEAP32[$d$2108$i>>2] = 0;
           $604 = ($603>>>0)<($a$5109$i>>>0);
           if ($604) {
            $605 = ((($a$5109$i)) + -4|0);
            HEAP32[$605>>2] = 0;
            $a$6$i = $605;
           } else {
            $a$6$i = $a$5109$i;
           }
           $606 = HEAP32[$603>>2]|0;
           $607 = (($606) + 1)|0;
           HEAP32[$603>>2] = $607;
           $608 = ($607>>>0)>(999999999);
           if ($608) {
            $a$5109$i = $a$6$i;$d$2108$i = $603;
           } else {
            $a$5$lcssa$i = $a$6$i;$d$2$lcssa$i = $603;
            break;
           }
          }
         } else {
          $a$5$lcssa$i = $a$3$lcssa$i;$d$2$lcssa$i = $576;
         }
         $609 = $a$5$lcssa$i;
         $610 = (($482) - ($609))|0;
         $611 = $610 >> 2;
         $612 = ($611*9)|0;
         $613 = HEAP32[$a$5$lcssa$i>>2]|0;
         $614 = ($613>>>0)<(10);
         if ($614) {
          $a$7$i = $a$5$lcssa$i;$d$3$i = $d$2$lcssa$i;$e$3$i = $612;
          break;
         } else {
          $e$2104$i = $612;$i$2103$i = 10;
         }
         while(1) {
          $615 = ($i$2103$i*10)|0;
          $616 = (($e$2104$i) + 1)|0;
          $617 = ($613>>>0)<($615>>>0);
          if ($617) {
           $a$7$i = $a$5$lcssa$i;$d$3$i = $d$2$lcssa$i;$e$3$i = $616;
           break;
          } else {
           $e$2104$i = $616;$i$2103$i = $615;
          }
         }
        }
       } while(0);
       $618 = ((($d$3$i)) + 4|0);
       $619 = ($z$3$lcssa$i>>>0)>($618>>>0);
       $$z$3$i = $619 ? $618 : $z$3$lcssa$i;
       $a$8$ph$i = $a$7$i;$e$4$ph$i = $e$3$i;$z$6$ph$i = $$z$3$i;
      } else {
       $a$8$ph$i = $a$3$lcssa$i;$e$4$ph$i = $e$1$i;$z$6$ph$i = $z$3$lcssa$i;
      }
      $620 = (0 - ($e$4$ph$i))|0;
      $z$6$i = $z$6$ph$i;
      while(1) {
       $621 = ($z$6$i>>>0)>($a$8$ph$i>>>0);
       if (!($621)) {
        $$lcssa159$i = 0;$z$6$i$lcssa = $z$6$i;
        break;
       }
       $622 = ((($z$6$i)) + -4|0);
       $623 = HEAP32[$622>>2]|0;
       $624 = ($623|0)==(0);
       if ($624) {
        $z$6$i = $622;
       } else {
        $$lcssa159$i = 1;$z$6$i$lcssa = $z$6$i;
        break;
       }
      }
      do {
       if ($564) {
        $625 = $565&1;
        $626 = $625 ^ 1;
        $$p$$i = (($626) + ($$p$i))|0;
        $627 = ($$p$$i|0)>($e$4$ph$i|0);
        $628 = ($e$4$ph$i|0)>(-5);
        $or$cond6$i = $627 & $628;
        if ($or$cond6$i) {
         $629 = (($t$0) + -1)|0;
         $$neg53$i = (($$p$$i) + -1)|0;
         $630 = (($$neg53$i) - ($e$4$ph$i))|0;
         $$013$i = $629;$$210$i = $630;
        } else {
         $631 = (($t$0) + -2)|0;
         $632 = (($$p$$i) + -1)|0;
         $$013$i = $631;$$210$i = $632;
        }
        $633 = $fl$1$ & 8;
        $634 = ($633|0)==(0);
        if (!($634)) {
         $$114$i = $$013$i;$$311$i = $$210$i;$$pre$phi184$iZ2D = $633;
         break;
        }
        do {
         if ($$lcssa159$i) {
          $635 = ((($z$6$i$lcssa)) + -4|0);
          $636 = HEAP32[$635>>2]|0;
          $637 = ($636|0)==(0);
          if ($637) {
           $j$2$i = 9;
           break;
          }
          $638 = (($636>>>0) % 10)&-1;
          $639 = ($638|0)==(0);
          if ($639) {
           $i$399$i = 10;$j$1100$i = 0;
          } else {
           $j$2$i = 0;
           break;
          }
          while(1) {
           $640 = ($i$399$i*10)|0;
           $641 = (($j$1100$i) + 1)|0;
           $642 = (($636>>>0) % ($640>>>0))&-1;
           $643 = ($642|0)==(0);
           if ($643) {
            $i$399$i = $640;$j$1100$i = $641;
           } else {
            $j$2$i = $641;
            break;
           }
          }
         } else {
          $j$2$i = 9;
         }
        } while(0);
        $644 = $$013$i | 32;
        $645 = ($644|0)==(102);
        $646 = $z$6$i$lcssa;
        $647 = (($646) - ($482))|0;
        $648 = $647 >> 2;
        $649 = ($648*9)|0;
        $650 = (($649) + -9)|0;
        if ($645) {
         $651 = (($650) - ($j$2$i))|0;
         $652 = ($651|0)<(0);
         $$21$i = $652 ? 0 : $651;
         $653 = ($$210$i|0)<($$21$i|0);
         $$210$$22$i = $653 ? $$210$i : $$21$i;
         $$114$i = $$013$i;$$311$i = $$210$$22$i;$$pre$phi184$iZ2D = 0;
         break;
        } else {
         $654 = (($650) + ($e$4$ph$i))|0;
         $655 = (($654) - ($j$2$i))|0;
         $656 = ($655|0)<(0);
         $$23$i = $656 ? 0 : $655;
         $657 = ($$210$i|0)<($$23$i|0);
         $$210$$24$i = $657 ? $$210$i : $$23$i;
         $$114$i = $$013$i;$$311$i = $$210$$24$i;$$pre$phi184$iZ2D = 0;
         break;
        }
       } else {
        $$pre183$i = $fl$1$ & 8;
        $$114$i = $t$0;$$311$i = $$p$i;$$pre$phi184$iZ2D = $$pre183$i;
       }
      } while(0);
      $658 = $$311$i | $$pre$phi184$iZ2D;
      $659 = ($658|0)!=(0);
      $660 = $659&1;
      $661 = $$114$i | 32;
      $662 = ($661|0)==(102);
      if ($662) {
       $663 = ($e$4$ph$i|0)>(0);
       $664 = $663 ? $e$4$ph$i : 0;
       $$pn$i = $664;$estr$2$i = 0;
      } else {
       $665 = ($e$4$ph$i|0)<(0);
       $666 = $665 ? $620 : $e$4$ph$i;
       $667 = ($666|0)<(0);
       $668 = $667 << 31 >> 31;
       $669 = (_fmt_u($666,$668,$5)|0);
       $670 = $669;
       $671 = (($8) - ($670))|0;
       $672 = ($671|0)<(2);
       if ($672) {
        $estr$193$i = $669;
        while(1) {
         $673 = ((($estr$193$i)) + -1|0);
         HEAP8[$673>>0] = 48;
         $674 = $673;
         $675 = (($8) - ($674))|0;
         $676 = ($675|0)<(2);
         if ($676) {
          $estr$193$i = $673;
         } else {
          $estr$1$lcssa$i = $673;
          break;
         }
        }
       } else {
        $estr$1$lcssa$i = $669;
       }
       $677 = $e$4$ph$i >> 31;
       $678 = $677 & 2;
       $679 = (($678) + 43)|0;
       $680 = $679&255;
       $681 = ((($estr$1$lcssa$i)) + -1|0);
       HEAP8[$681>>0] = $680;
       $682 = $$114$i&255;
       $683 = ((($estr$1$lcssa$i)) + -2|0);
       HEAP8[$683>>0] = $682;
       $684 = $683;
       $685 = (($8) - ($684))|0;
       $$pn$i = $685;$estr$2$i = $683;
      }
      $686 = (($pl$0$i) + 1)|0;
      $687 = (($686) + ($$311$i))|0;
      $l$1$i = (($687) + ($660))|0;
      $688 = (($l$1$i) + ($$pn$i))|0;
      _pad($f,32,$w$1,$688,$fl$1$);
      $689 = HEAP32[$f>>2]|0;
      $690 = $689 & 32;
      $691 = ($690|0)==(0);
      if ($691) {
       (___fwritex($prefix$0$i,$pl$0$i,$f)|0);
      }
      $692 = $fl$1$ ^ 65536;
      _pad($f,48,$w$1,$688,$692);
      do {
       if ($662) {
        $693 = ($a$8$ph$i>>>0)>($$31$i>>>0);
        $r$0$a$8$i = $693 ? $$31$i : $a$8$ph$i;
        $d$482$i = $r$0$a$8$i;
        while(1) {
         $694 = HEAP32[$d$482$i>>2]|0;
         $695 = (_fmt_u($694,0,$13)|0);
         $696 = ($d$482$i|0)==($r$0$a$8$i|0);
         do {
          if ($696) {
           $700 = ($695|0)==($13|0);
           if (!($700)) {
            $s7$1$i = $695;
            break;
           }
           HEAP8[$15>>0] = 48;
           $s7$1$i = $15;
          } else {
           $697 = ($695>>>0)>($buf$i>>>0);
           if ($697) {
            $s7$079$i = $695;
           } else {
            $s7$1$i = $695;
            break;
           }
           while(1) {
            $698 = ((($s7$079$i)) + -1|0);
            HEAP8[$698>>0] = 48;
            $699 = ($698>>>0)>($buf$i>>>0);
            if ($699) {
             $s7$079$i = $698;
            } else {
             $s7$1$i = $698;
             break;
            }
           }
          }
         } while(0);
         $701 = HEAP32[$f>>2]|0;
         $702 = $701 & 32;
         $703 = ($702|0)==(0);
         if ($703) {
          $704 = $s7$1$i;
          $705 = (($14) - ($704))|0;
          (___fwritex($s7$1$i,$705,$f)|0);
         }
         $706 = ((($d$482$i)) + 4|0);
         $707 = ($706>>>0)>($$31$i>>>0);
         if ($707) {
          $$lcssa339 = $706;
          break;
         } else {
          $d$482$i = $706;
         }
        }
        $708 = ($658|0)==(0);
        do {
         if (!($708)) {
          $709 = HEAP32[$f>>2]|0;
          $710 = $709 & 32;
          $711 = ($710|0)==(0);
          if (!($711)) {
           break;
          }
          (___fwritex(465381,1,$f)|0);
         }
        } while(0);
        $712 = ($$lcssa339>>>0)<($z$6$i$lcssa>>>0);
        $713 = ($$311$i|0)>(0);
        $714 = $713 & $712;
        if ($714) {
         $$41276$i = $$311$i;$d$575$i = $$lcssa339;
         while(1) {
          $715 = HEAP32[$d$575$i>>2]|0;
          $716 = (_fmt_u($715,0,$13)|0);
          $717 = ($716>>>0)>($buf$i>>>0);
          if ($717) {
           $s8$070$i = $716;
           while(1) {
            $718 = ((($s8$070$i)) + -1|0);
            HEAP8[$718>>0] = 48;
            $719 = ($718>>>0)>($buf$i>>>0);
            if ($719) {
             $s8$070$i = $718;
            } else {
             $s8$0$lcssa$i = $718;
             break;
            }
           }
          } else {
           $s8$0$lcssa$i = $716;
          }
          $720 = HEAP32[$f>>2]|0;
          $721 = $720 & 32;
          $722 = ($721|0)==(0);
          if ($722) {
           $723 = ($$41276$i|0)>(9);
           $724 = $723 ? 9 : $$41276$i;
           (___fwritex($s8$0$lcssa$i,$724,$f)|0);
          }
          $725 = ((($d$575$i)) + 4|0);
          $726 = (($$41276$i) + -9)|0;
          $727 = ($725>>>0)<($z$6$i$lcssa>>>0);
          $728 = ($$41276$i|0)>(9);
          $729 = $728 & $727;
          if ($729) {
           $$41276$i = $726;$d$575$i = $725;
          } else {
           $$412$lcssa$i = $726;
           break;
          }
         }
        } else {
         $$412$lcssa$i = $$311$i;
        }
        $730 = (($$412$lcssa$i) + 9)|0;
        _pad($f,48,$730,9,0);
       } else {
        $731 = ((($a$8$ph$i)) + 4|0);
        $z$6$$i = $$lcssa159$i ? $z$6$i$lcssa : $731;
        $732 = ($$311$i|0)>(-1);
        if ($732) {
         $733 = ($$pre$phi184$iZ2D|0)==(0);
         $$587$i = $$311$i;$d$686$i = $a$8$ph$i;
         while(1) {
          $734 = HEAP32[$d$686$i>>2]|0;
          $735 = (_fmt_u($734,0,$13)|0);
          $736 = ($735|0)==($13|0);
          if ($736) {
           HEAP8[$15>>0] = 48;
           $s9$0$i = $15;
          } else {
           $s9$0$i = $735;
          }
          $737 = ($d$686$i|0)==($a$8$ph$i|0);
          do {
           if ($737) {
            $741 = ((($s9$0$i)) + 1|0);
            $742 = HEAP32[$f>>2]|0;
            $743 = $742 & 32;
            $744 = ($743|0)==(0);
            if ($744) {
             (___fwritex($s9$0$i,1,$f)|0);
            }
            $745 = ($$587$i|0)<(1);
            $or$cond29$i = $733 & $745;
            if ($or$cond29$i) {
             $s9$2$i = $741;
             break;
            }
            $746 = HEAP32[$f>>2]|0;
            $747 = $746 & 32;
            $748 = ($747|0)==(0);
            if (!($748)) {
             $s9$2$i = $741;
             break;
            }
            (___fwritex(465381,1,$f)|0);
            $s9$2$i = $741;
           } else {
            $738 = ($s9$0$i>>>0)>($buf$i>>>0);
            if ($738) {
             $s9$183$i = $s9$0$i;
            } else {
             $s9$2$i = $s9$0$i;
             break;
            }
            while(1) {
             $739 = ((($s9$183$i)) + -1|0);
             HEAP8[$739>>0] = 48;
             $740 = ($739>>>0)>($buf$i>>>0);
             if ($740) {
              $s9$183$i = $739;
             } else {
              $s9$2$i = $739;
              break;
             }
            }
           }
          } while(0);
          $749 = $s9$2$i;
          $750 = (($14) - ($749))|0;
          $751 = HEAP32[$f>>2]|0;
          $752 = $751 & 32;
          $753 = ($752|0)==(0);
          if ($753) {
           $754 = ($$587$i|0)>($750|0);
           $755 = $754 ? $750 : $$587$i;
           (___fwritex($s9$2$i,$755,$f)|0);
          }
          $756 = (($$587$i) - ($750))|0;
          $757 = ((($d$686$i)) + 4|0);
          $758 = ($757>>>0)<($z$6$$i>>>0);
          $759 = ($756|0)>(-1);
          $760 = $758 & $759;
          if ($760) {
           $$587$i = $756;$d$686$i = $757;
          } else {
           $$5$lcssa$i = $756;
           break;
          }
         }
        } else {
         $$5$lcssa$i = $$311$i;
        }
        $761 = (($$5$lcssa$i) + 18)|0;
        _pad($f,48,$761,18,0);
        $762 = HEAP32[$f>>2]|0;
        $763 = $762 & 32;
        $764 = ($763|0)==(0);
        if (!($764)) {
         break;
        }
        $765 = $estr$2$i;
        $766 = (($8) - ($765))|0;
        (___fwritex($estr$2$i,$766,$f)|0);
       }
      } while(0);
      $767 = $fl$1$ ^ 8192;
      _pad($f,32,$w$1,$688,$767);
      $768 = ($688|0)<($w$1|0);
      $w$30$i = $768 ? $w$1 : $688;
      $$0$i = $w$30$i;
     } else {
      $376 = $t$0 & 32;
      $377 = ($376|0)!=(0);
      $378 = $377 ? 465365 : 465369;
      $379 = ($$07$i != $$07$i) | (0.0 != 0.0);
      $380 = $377 ? 465373 : 465377;
      $pl$1$i = $379 ? 0 : $pl$0$i;
      $s1$0$i = $379 ? $380 : $378;
      $381 = (($pl$1$i) + 3)|0;
      _pad($f,32,$w$1,$381,$175);
      $382 = HEAP32[$f>>2]|0;
      $383 = $382 & 32;
      $384 = ($383|0)==(0);
      if ($384) {
       (___fwritex($prefix$0$i,$pl$1$i,$f)|0);
       $$pre$i = HEAP32[$f>>2]|0;
       $386 = $$pre$i;
      } else {
       $386 = $382;
      }
      $385 = $386 & 32;
      $387 = ($385|0)==(0);
      if ($387) {
       (___fwritex($s1$0$i,3,$f)|0);
      }
      $388 = $fl$1$ ^ 8192;
      _pad($f,32,$w$1,$381,$388);
      $389 = ($381|0)<($w$1|0);
      $390 = $389 ? $w$1 : $381;
      $$0$i = $390;
     }
    } while(0);
    $cnt$0 = $cnt$1;$fmt41 = $$lcssa323;$l$0 = $$0$i;$l10n$0 = $l10n$3;
    continue L1;
    break;
   }
   default: {
    $a$2 = $fmt41;$fl$6 = $fl$1$;$p$5 = $p$0;$pl$2 = 0;$prefix$2 = 465329;$z$2 = $1;
   }
   }
  } while(0);
  L313: do {
   if ((label|0) == 64) {
    label = 0;
    $206 = $arg;
    $207 = $206;
    $208 = HEAP32[$207>>2]|0;
    $209 = (($206) + 4)|0;
    $210 = $209;
    $211 = HEAP32[$210>>2]|0;
    $212 = $t$1 & 32;
    $213 = ($208|0)==(0);
    $214 = ($211|0)==(0);
    $215 = $213 & $214;
    if ($215) {
     $a$0 = $1;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 0;$prefix$1 = 465329;
     label = 77;
    } else {
     $$012$i = $1;$217 = $208;$224 = $211;
     while(1) {
      $216 = $217 & 15;
      $218 = (465313 + ($216)|0);
      $219 = HEAP8[$218>>0]|0;
      $220 = $219&255;
      $221 = $220 | $212;
      $222 = $221&255;
      $223 = ((($$012$i)) + -1|0);
      HEAP8[$223>>0] = $222;
      $225 = (_bitshift64Lshr(($217|0),($224|0),4)|0);
      $226 = tempRet0;
      $227 = ($225|0)==(0);
      $228 = ($226|0)==(0);
      $229 = $227 & $228;
      if ($229) {
       $$lcssa344 = $223;
       break;
      } else {
       $$012$i = $223;$217 = $225;$224 = $226;
      }
     }
     $230 = $arg;
     $231 = $230;
     $232 = HEAP32[$231>>2]|0;
     $233 = (($230) + 4)|0;
     $234 = $233;
     $235 = HEAP32[$234>>2]|0;
     $236 = ($232|0)==(0);
     $237 = ($235|0)==(0);
     $238 = $236 & $237;
     $239 = $fl$3 & 8;
     $240 = ($239|0)==(0);
     $or$cond17 = $240 | $238;
     if ($or$cond17) {
      $a$0 = $$lcssa344;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 0;$prefix$1 = 465329;
      label = 77;
     } else {
      $241 = $t$1 >> 4;
      $242 = (465329 + ($241)|0);
      $a$0 = $$lcssa344;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 2;$prefix$1 = $242;
      label = 77;
     }
    }
   }
   else if ((label|0) == 76) {
    label = 0;
    $288 = (_fmt_u($286,$287,$1)|0);
    $a$0 = $288;$fl$4 = $fl$1$;$p$2 = $p$0;$pl$1 = $pl$0;$prefix$1 = $prefix$0;
    label = 77;
   }
   else if ((label|0) == 82) {
    label = 0;
    $320 = (_memchr($a$1,0,$p$0)|0);
    $321 = ($320|0)==(0|0);
    $322 = $320;
    $323 = $a$1;
    $324 = (($322) - ($323))|0;
    $325 = (($a$1) + ($p$0)|0);
    $z$1 = $321 ? $325 : $320;
    $p$3 = $321 ? $p$0 : $324;
    $a$2 = $a$1;$fl$6 = $175;$p$5 = $p$3;$pl$2 = 0;$prefix$2 = 465329;$z$2 = $z$1;
   }
   else if ((label|0) == 86) {
    label = 0;
    $333 = HEAP32[$arg>>2]|0;
    $i$0114 = 0;$l$1113 = 0;$ws$0115 = $333;
    while(1) {
     $334 = HEAP32[$ws$0115>>2]|0;
     $335 = ($334|0)==(0);
     if ($335) {
      $i$0$lcssa = $i$0114;$l$2 = $l$1113;
      break;
     }
     $336 = (_wctomb($mb,$334)|0);
     $337 = ($336|0)<(0);
     $338 = (($p$4198) - ($i$0114))|0;
     $339 = ($336>>>0)>($338>>>0);
     $or$cond20 = $337 | $339;
     if ($or$cond20) {
      $i$0$lcssa = $i$0114;$l$2 = $336;
      break;
     }
     $340 = ((($ws$0115)) + 4|0);
     $341 = (($336) + ($i$0114))|0;
     $342 = ($p$4198>>>0)>($341>>>0);
     if ($342) {
      $i$0114 = $341;$l$1113 = $336;$ws$0115 = $340;
     } else {
      $i$0$lcssa = $341;$l$2 = $336;
      break;
     }
    }
    $343 = ($l$2|0)<(0);
    if ($343) {
     $$0 = -1;
     break L1;
    }
    _pad($f,32,$w$1,$i$0$lcssa,$fl$1$);
    $344 = ($i$0$lcssa|0)==(0);
    if ($344) {
     $i$0$lcssa200 = 0;
     label = 98;
    } else {
     $345 = HEAP32[$arg>>2]|0;
     $i$1125 = 0;$ws$1126 = $345;
     while(1) {
      $346 = HEAP32[$ws$1126>>2]|0;
      $347 = ($346|0)==(0);
      if ($347) {
       $i$0$lcssa200 = $i$0$lcssa;
       label = 98;
       break L313;
      }
      $348 = ((($ws$1126)) + 4|0);
      $349 = (_wctomb($mb,$346)|0);
      $350 = (($349) + ($i$1125))|0;
      $351 = ($350|0)>($i$0$lcssa|0);
      if ($351) {
       $i$0$lcssa200 = $i$0$lcssa;
       label = 98;
       break L313;
      }
      $352 = HEAP32[$f>>2]|0;
      $353 = $352 & 32;
      $354 = ($353|0)==(0);
      if ($354) {
       (___fwritex($mb,$349,$f)|0);
      }
      $355 = ($350>>>0)<($i$0$lcssa>>>0);
      if ($355) {
       $i$1125 = $350;$ws$1126 = $348;
      } else {
       $i$0$lcssa200 = $i$0$lcssa;
       label = 98;
       break;
      }
     }
    }
   }
  } while(0);
  if ((label|0) == 98) {
   label = 0;
   $356 = $fl$1$ ^ 8192;
   _pad($f,32,$w$1,$i$0$lcssa200,$356);
   $357 = ($w$1|0)>($i$0$lcssa200|0);
   $358 = $357 ? $w$1 : $i$0$lcssa200;
   $cnt$0 = $cnt$1;$fmt41 = $$lcssa323;$l$0 = $358;$l10n$0 = $l10n$3;
   continue;
  }
  if ((label|0) == 77) {
   label = 0;
   $289 = ($p$2|0)>(-1);
   $290 = $fl$4 & -65537;
   $$fl$4 = $289 ? $290 : $fl$4;
   $291 = $arg;
   $292 = $291;
   $293 = HEAP32[$292>>2]|0;
   $294 = (($291) + 4)|0;
   $295 = $294;
   $296 = HEAP32[$295>>2]|0;
   $297 = ($293|0)!=(0);
   $298 = ($296|0)!=(0);
   $299 = $297 | $298;
   $300 = ($p$2|0)!=(0);
   $or$cond = $300 | $299;
   if ($or$cond) {
    $301 = $a$0;
    $302 = (($2) - ($301))|0;
    $303 = $299&1;
    $304 = $303 ^ 1;
    $305 = (($304) + ($302))|0;
    $306 = ($p$2|0)>($305|0);
    $p$2$ = $306 ? $p$2 : $305;
    $a$2 = $a$0;$fl$6 = $$fl$4;$p$5 = $p$2$;$pl$2 = $pl$1;$prefix$2 = $prefix$1;$z$2 = $1;
   } else {
    $a$2 = $1;$fl$6 = $$fl$4;$p$5 = 0;$pl$2 = $pl$1;$prefix$2 = $prefix$1;$z$2 = $1;
   }
  }
  $769 = $z$2;
  $770 = $a$2;
  $771 = (($769) - ($770))|0;
  $772 = ($p$5|0)<($771|0);
  $$p$5 = $772 ? $771 : $p$5;
  $773 = (($pl$2) + ($$p$5))|0;
  $774 = ($w$1|0)<($773|0);
  $w$2 = $774 ? $773 : $w$1;
  _pad($f,32,$w$2,$773,$fl$6);
  $775 = HEAP32[$f>>2]|0;
  $776 = $775 & 32;
  $777 = ($776|0)==(0);
  if ($777) {
   (___fwritex($prefix$2,$pl$2,$f)|0);
  }
  $778 = $fl$6 ^ 65536;
  _pad($f,48,$w$2,$773,$778);
  _pad($f,48,$$p$5,$771,0);
  $779 = HEAP32[$f>>2]|0;
  $780 = $779 & 32;
  $781 = ($780|0)==(0);
  if ($781) {
   (___fwritex($a$2,$771,$f)|0);
  }
  $782 = $fl$6 ^ 8192;
  _pad($f,32,$w$2,$773,$782);
  $cnt$0 = $cnt$1;$fmt41 = $$lcssa323;$l$0 = $w$2;$l10n$0 = $l10n$3;
 }
 L348: do {
  if ((label|0) == 245) {
   $783 = ($f|0)==(0|0);
   if ($783) {
    $784 = ($l10n$0$lcssa|0)==(0);
    if ($784) {
     $$0 = 0;
    } else {
     $i$2100 = 1;
     while(1) {
      $785 = (($nl_type) + ($i$2100<<2)|0);
      $786 = HEAP32[$785>>2]|0;
      $787 = ($786|0)==(0);
      if ($787) {
       $i$2100$lcssa = $i$2100;
       break;
      }
      $789 = (($nl_arg) + ($i$2100<<3)|0);
      _pop_arg($789,$786,$ap);
      $790 = (($i$2100) + 1)|0;
      $791 = ($790|0)<(10);
      if ($791) {
       $i$2100 = $790;
      } else {
       $$0 = 1;
       break L348;
      }
     }
     $788 = ($i$2100$lcssa|0)<(10);
     if ($788) {
      $i$398 = $i$2100$lcssa;
      while(1) {
       $794 = (($nl_type) + ($i$398<<2)|0);
       $795 = HEAP32[$794>>2]|0;
       $796 = ($795|0)==(0);
       $792 = (($i$398) + 1)|0;
       if (!($796)) {
        $$0 = -1;
        break L348;
       }
       $793 = ($792|0)<(10);
       if ($793) {
        $i$398 = $792;
       } else {
        $$0 = 1;
        break;
       }
      }
     } else {
      $$0 = 1;
     }
    }
   } else {
    $$0 = $cnt$1$lcssa;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _cleanup521($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($p)) + 68|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  ___unlockfile($p);
 }
 return;
}
function _cleanup526($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($p)) + 68|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  ___unlockfile($p);
 }
 return;
}
function _pop_arg($arg,$type,$ap) {
 $arg = $arg|0;
 $type = $type|0;
 $ap = $ap|0;
 var $$mask = 0, $$mask1 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0.0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0.0;
 var $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $arglist_current = 0, $arglist_current11 = 0, $arglist_current14 = 0, $arglist_current17 = 0;
 var $arglist_current2 = 0, $arglist_current20 = 0, $arglist_current23 = 0, $arglist_current26 = 0, $arglist_current5 = 0, $arglist_current8 = 0, $arglist_next = 0, $arglist_next12 = 0, $arglist_next15 = 0, $arglist_next18 = 0, $arglist_next21 = 0, $arglist_next24 = 0, $arglist_next27 = 0, $arglist_next3 = 0, $arglist_next6 = 0, $arglist_next9 = 0, $expanded = 0, $expanded28 = 0, $expanded30 = 0, $expanded31 = 0;
 var $expanded32 = 0, $expanded34 = 0, $expanded35 = 0, $expanded37 = 0, $expanded38 = 0, $expanded39 = 0, $expanded41 = 0, $expanded42 = 0, $expanded44 = 0, $expanded45 = 0, $expanded46 = 0, $expanded48 = 0, $expanded49 = 0, $expanded51 = 0, $expanded52 = 0, $expanded53 = 0, $expanded55 = 0, $expanded56 = 0, $expanded58 = 0, $expanded59 = 0;
 var $expanded60 = 0, $expanded62 = 0, $expanded63 = 0, $expanded65 = 0, $expanded66 = 0, $expanded67 = 0, $expanded69 = 0, $expanded70 = 0, $expanded72 = 0, $expanded73 = 0, $expanded74 = 0, $expanded76 = 0, $expanded77 = 0, $expanded79 = 0, $expanded80 = 0, $expanded81 = 0, $expanded83 = 0, $expanded84 = 0, $expanded86 = 0, $expanded87 = 0;
 var $expanded88 = 0, $expanded90 = 0, $expanded91 = 0, $expanded93 = 0, $expanded94 = 0, $expanded95 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($type>>>0)>(20);
 L1: do {
  if (!($0)) {
   do {
    switch ($type|0) {
    case 9:  {
     $arglist_current = HEAP32[$ap>>2]|0;
     $1 = $arglist_current;
     $2 = ((0) + 4|0);
     $expanded28 = $2;
     $expanded = (($expanded28) - 1)|0;
     $3 = (($1) + ($expanded))|0;
     $4 = ((0) + 4|0);
     $expanded32 = $4;
     $expanded31 = (($expanded32) - 1)|0;
     $expanded30 = $expanded31 ^ -1;
     $5 = $3 & $expanded30;
     $6 = $5;
     $7 = HEAP32[$6>>2]|0;
     $arglist_next = ((($6)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next;
     HEAP32[$arg>>2] = $7;
     break L1;
     break;
    }
    case 10:  {
     $arglist_current2 = HEAP32[$ap>>2]|0;
     $8 = $arglist_current2;
     $9 = ((0) + 4|0);
     $expanded35 = $9;
     $expanded34 = (($expanded35) - 1)|0;
     $10 = (($8) + ($expanded34))|0;
     $11 = ((0) + 4|0);
     $expanded39 = $11;
     $expanded38 = (($expanded39) - 1)|0;
     $expanded37 = $expanded38 ^ -1;
     $12 = $10 & $expanded37;
     $13 = $12;
     $14 = HEAP32[$13>>2]|0;
     $arglist_next3 = ((($13)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next3;
     $15 = ($14|0)<(0);
     $16 = $15 << 31 >> 31;
     $17 = $arg;
     $18 = $17;
     HEAP32[$18>>2] = $14;
     $19 = (($17) + 4)|0;
     $20 = $19;
     HEAP32[$20>>2] = $16;
     break L1;
     break;
    }
    case 11:  {
     $arglist_current5 = HEAP32[$ap>>2]|0;
     $21 = $arglist_current5;
     $22 = ((0) + 4|0);
     $expanded42 = $22;
     $expanded41 = (($expanded42) - 1)|0;
     $23 = (($21) + ($expanded41))|0;
     $24 = ((0) + 4|0);
     $expanded46 = $24;
     $expanded45 = (($expanded46) - 1)|0;
     $expanded44 = $expanded45 ^ -1;
     $25 = $23 & $expanded44;
     $26 = $25;
     $27 = HEAP32[$26>>2]|0;
     $arglist_next6 = ((($26)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next6;
     $28 = $arg;
     $29 = $28;
     HEAP32[$29>>2] = $27;
     $30 = (($28) + 4)|0;
     $31 = $30;
     HEAP32[$31>>2] = 0;
     break L1;
     break;
    }
    case 12:  {
     $arglist_current8 = HEAP32[$ap>>2]|0;
     $32 = $arglist_current8;
     $33 = ((0) + 8|0);
     $expanded49 = $33;
     $expanded48 = (($expanded49) - 1)|0;
     $34 = (($32) + ($expanded48))|0;
     $35 = ((0) + 8|0);
     $expanded53 = $35;
     $expanded52 = (($expanded53) - 1)|0;
     $expanded51 = $expanded52 ^ -1;
     $36 = $34 & $expanded51;
     $37 = $36;
     $38 = $37;
     $39 = $38;
     $40 = HEAP32[$39>>2]|0;
     $41 = (($38) + 4)|0;
     $42 = $41;
     $43 = HEAP32[$42>>2]|0;
     $arglist_next9 = ((($37)) + 8|0);
     HEAP32[$ap>>2] = $arglist_next9;
     $44 = $arg;
     $45 = $44;
     HEAP32[$45>>2] = $40;
     $46 = (($44) + 4)|0;
     $47 = $46;
     HEAP32[$47>>2] = $43;
     break L1;
     break;
    }
    case 13:  {
     $arglist_current11 = HEAP32[$ap>>2]|0;
     $48 = $arglist_current11;
     $49 = ((0) + 4|0);
     $expanded56 = $49;
     $expanded55 = (($expanded56) - 1)|0;
     $50 = (($48) + ($expanded55))|0;
     $51 = ((0) + 4|0);
     $expanded60 = $51;
     $expanded59 = (($expanded60) - 1)|0;
     $expanded58 = $expanded59 ^ -1;
     $52 = $50 & $expanded58;
     $53 = $52;
     $54 = HEAP32[$53>>2]|0;
     $arglist_next12 = ((($53)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next12;
     $55 = $54&65535;
     $56 = $55 << 16 >> 16;
     $57 = ($56|0)<(0);
     $58 = $57 << 31 >> 31;
     $59 = $arg;
     $60 = $59;
     HEAP32[$60>>2] = $56;
     $61 = (($59) + 4)|0;
     $62 = $61;
     HEAP32[$62>>2] = $58;
     break L1;
     break;
    }
    case 14:  {
     $arglist_current14 = HEAP32[$ap>>2]|0;
     $63 = $arglist_current14;
     $64 = ((0) + 4|0);
     $expanded63 = $64;
     $expanded62 = (($expanded63) - 1)|0;
     $65 = (($63) + ($expanded62))|0;
     $66 = ((0) + 4|0);
     $expanded67 = $66;
     $expanded66 = (($expanded67) - 1)|0;
     $expanded65 = $expanded66 ^ -1;
     $67 = $65 & $expanded65;
     $68 = $67;
     $69 = HEAP32[$68>>2]|0;
     $arglist_next15 = ((($68)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next15;
     $$mask1 = $69 & 65535;
     $70 = $arg;
     $71 = $70;
     HEAP32[$71>>2] = $$mask1;
     $72 = (($70) + 4)|0;
     $73 = $72;
     HEAP32[$73>>2] = 0;
     break L1;
     break;
    }
    case 15:  {
     $arglist_current17 = HEAP32[$ap>>2]|0;
     $74 = $arglist_current17;
     $75 = ((0) + 4|0);
     $expanded70 = $75;
     $expanded69 = (($expanded70) - 1)|0;
     $76 = (($74) + ($expanded69))|0;
     $77 = ((0) + 4|0);
     $expanded74 = $77;
     $expanded73 = (($expanded74) - 1)|0;
     $expanded72 = $expanded73 ^ -1;
     $78 = $76 & $expanded72;
     $79 = $78;
     $80 = HEAP32[$79>>2]|0;
     $arglist_next18 = ((($79)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next18;
     $81 = $80&255;
     $82 = $81 << 24 >> 24;
     $83 = ($82|0)<(0);
     $84 = $83 << 31 >> 31;
     $85 = $arg;
     $86 = $85;
     HEAP32[$86>>2] = $82;
     $87 = (($85) + 4)|0;
     $88 = $87;
     HEAP32[$88>>2] = $84;
     break L1;
     break;
    }
    case 16:  {
     $arglist_current20 = HEAP32[$ap>>2]|0;
     $89 = $arglist_current20;
     $90 = ((0) + 4|0);
     $expanded77 = $90;
     $expanded76 = (($expanded77) - 1)|0;
     $91 = (($89) + ($expanded76))|0;
     $92 = ((0) + 4|0);
     $expanded81 = $92;
     $expanded80 = (($expanded81) - 1)|0;
     $expanded79 = $expanded80 ^ -1;
     $93 = $91 & $expanded79;
     $94 = $93;
     $95 = HEAP32[$94>>2]|0;
     $arglist_next21 = ((($94)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next21;
     $$mask = $95 & 255;
     $96 = $arg;
     $97 = $96;
     HEAP32[$97>>2] = $$mask;
     $98 = (($96) + 4)|0;
     $99 = $98;
     HEAP32[$99>>2] = 0;
     break L1;
     break;
    }
    case 17:  {
     $arglist_current23 = HEAP32[$ap>>2]|0;
     $100 = $arglist_current23;
     $101 = ((0) + 8|0);
     $expanded84 = $101;
     $expanded83 = (($expanded84) - 1)|0;
     $102 = (($100) + ($expanded83))|0;
     $103 = ((0) + 8|0);
     $expanded88 = $103;
     $expanded87 = (($expanded88) - 1)|0;
     $expanded86 = $expanded87 ^ -1;
     $104 = $102 & $expanded86;
     $105 = $104;
     $106 = +HEAPF64[$105>>3];
     $arglist_next24 = ((($105)) + 8|0);
     HEAP32[$ap>>2] = $arglist_next24;
     HEAPF64[$arg>>3] = $106;
     break L1;
     break;
    }
    case 18:  {
     $arglist_current26 = HEAP32[$ap>>2]|0;
     $107 = $arglist_current26;
     $108 = ((0) + 8|0);
     $expanded91 = $108;
     $expanded90 = (($expanded91) - 1)|0;
     $109 = (($107) + ($expanded90))|0;
     $110 = ((0) + 8|0);
     $expanded95 = $110;
     $expanded94 = (($expanded95) - 1)|0;
     $expanded93 = $expanded94 ^ -1;
     $111 = $109 & $expanded93;
     $112 = $111;
     $113 = +HEAPF64[$112>>3];
     $arglist_next27 = ((($112)) + 8|0);
     HEAP32[$ap>>2] = $arglist_next27;
     HEAPF64[$arg>>3] = $113;
     break L1;
     break;
    }
    default: {
     break L1;
    }
    }
   } while(0);
  }
 } while(0);
 return;
}
function _fmt_u($0,$1,$s) {
 $0 = $0|0;
 $1 = $1|0;
 $s = $s|0;
 var $$0$lcssa = 0, $$01$lcssa$off0 = 0, $$05 = 0, $$1$lcssa = 0, $$12 = 0, $$lcssa20 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $y$03 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1>>>0)>(0);
 $3 = ($0>>>0)>(4294967295);
 $4 = ($1|0)==(0);
 $5 = $4 & $3;
 $6 = $2 | $5;
 if ($6) {
  $$05 = $s;$7 = $0;$8 = $1;
  while(1) {
   $9 = (___uremdi3(($7|0),($8|0),10,0)|0);
   $10 = tempRet0;
   $11 = $9 | 48;
   $12 = $11&255;
   $13 = ((($$05)) + -1|0);
   HEAP8[$13>>0] = $12;
   $14 = (___udivdi3(($7|0),($8|0),10,0)|0);
   $15 = tempRet0;
   $16 = ($8>>>0)>(9);
   $17 = ($7>>>0)>(4294967295);
   $18 = ($8|0)==(9);
   $19 = $18 & $17;
   $20 = $16 | $19;
   if ($20) {
    $$05 = $13;$7 = $14;$8 = $15;
   } else {
    $$lcssa20 = $13;$28 = $14;$29 = $15;
    break;
   }
  }
  $$0$lcssa = $$lcssa20;$$01$lcssa$off0 = $28;
 } else {
  $$0$lcssa = $s;$$01$lcssa$off0 = $0;
 }
 $21 = ($$01$lcssa$off0|0)==(0);
 if ($21) {
  $$1$lcssa = $$0$lcssa;
 } else {
  $$12 = $$0$lcssa;$y$03 = $$01$lcssa$off0;
  while(1) {
   $22 = (($y$03>>>0) % 10)&-1;
   $23 = $22 | 48;
   $24 = $23&255;
   $25 = ((($$12)) + -1|0);
   HEAP8[$25>>0] = $24;
   $26 = (($y$03>>>0) / 10)&-1;
   $27 = ($y$03>>>0)<(10);
   if ($27) {
    $$1$lcssa = $25;
    break;
   } else {
    $$12 = $25;$y$03 = $26;
   }
  }
 }
 return ($$1$lcssa|0);
}
function _pad($f,$c,$w,$l,$fl) {
 $f = $f|0;
 $c = $c|0;
 $w = $w|0;
 $l = $l|0;
 $fl = $fl|0;
 var $$0$lcssa6 = 0, $$02 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $or$cond = 0, $pad = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $pad = sp;
 $0 = $fl & 73728;
 $1 = ($0|0)==(0);
 $2 = ($w|0)>($l|0);
 $or$cond = $2 & $1;
 do {
  if ($or$cond) {
   $3 = (($w) - ($l))|0;
   $4 = ($3>>>0)>(256);
   $5 = $4 ? 256 : $3;
   _memset(($pad|0),($c|0),($5|0))|0;
   $6 = ($3>>>0)>(255);
   $7 = HEAP32[$f>>2]|0;
   $8 = $7 & 32;
   $9 = ($8|0)==(0);
   if ($6) {
    $10 = (($w) - ($l))|0;
    $$02 = $3;$17 = $7;$18 = $9;
    while(1) {
     if ($18) {
      (___fwritex($pad,256,$f)|0);
      $$pre = HEAP32[$f>>2]|0;
      $14 = $$pre;
     } else {
      $14 = $17;
     }
     $11 = (($$02) + -256)|0;
     $12 = ($11>>>0)>(255);
     $13 = $14 & 32;
     $15 = ($13|0)==(0);
     if ($12) {
      $$02 = $11;$17 = $14;$18 = $15;
     } else {
      break;
     }
    }
    $16 = $10 & 255;
    if ($15) {
     $$0$lcssa6 = $16;
    } else {
     break;
    }
   } else {
    if ($9) {
     $$0$lcssa6 = $3;
    } else {
     break;
    }
   }
   (___fwritex($pad,$$0$lcssa6,$f)|0);
  }
 } while(0);
 STACKTOP = sp;return;
}
function _malloc($bytes) {
 $bytes = $bytes|0;
 var $$3$i = 0, $$lcssa = 0, $$lcssa211 = 0, $$lcssa215 = 0, $$lcssa216 = 0, $$lcssa217 = 0, $$lcssa219 = 0, $$lcssa222 = 0, $$lcssa224 = 0, $$lcssa226 = 0, $$lcssa228 = 0, $$lcssa230 = 0, $$lcssa232 = 0, $$pre = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$i22$i = 0, $$pre$i25 = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi$i23$iZ2D = 0;
 var $$pre$phi$i26Z2D = 0, $$pre$phi$iZ2D = 0, $$pre$phi58$i$iZ2D = 0, $$pre$phiZ2D = 0, $$pre105 = 0, $$pre106 = 0, $$pre14$i$i = 0, $$pre43$i = 0, $$pre56$i$i = 0, $$pre57$i$i = 0, $$pre8$i = 0, $$rsize$0$i = 0, $$rsize$3$i = 0, $$sum = 0, $$sum$i$i = 0, $$sum$i$i$i = 0, $$sum$i13$i = 0, $$sum$i14$i = 0, $$sum$i17$i = 0, $$sum$i19$i = 0;
 var $$sum$i2334 = 0, $$sum$i32 = 0, $$sum$i35 = 0, $$sum1 = 0, $$sum1$i = 0, $$sum1$i$i = 0, $$sum1$i15$i = 0, $$sum1$i20$i = 0, $$sum1$i24 = 0, $$sum10 = 0, $$sum10$i = 0, $$sum10$i$i = 0, $$sum11$i = 0, $$sum11$i$i = 0, $$sum1112 = 0, $$sum112$i = 0, $$sum113$i = 0, $$sum114$i = 0, $$sum115$i = 0, $$sum116$i = 0;
 var $$sum117$i = 0, $$sum118$i = 0, $$sum119$i = 0, $$sum12$i = 0, $$sum12$i$i = 0, $$sum120$i = 0, $$sum121$i = 0, $$sum122$i = 0, $$sum123$i = 0, $$sum124$i = 0, $$sum125$i = 0, $$sum13$i = 0, $$sum13$i$i = 0, $$sum14$i$i = 0, $$sum15$i = 0, $$sum15$i$i = 0, $$sum16$i = 0, $$sum16$i$i = 0, $$sum17$i = 0, $$sum17$i$i = 0;
 var $$sum18$i = 0, $$sum1819$i$i = 0, $$sum2 = 0, $$sum2$i = 0, $$sum2$i$i = 0, $$sum2$i$i$i = 0, $$sum2$i16$i = 0, $$sum2$i18$i = 0, $$sum2$i21$i = 0, $$sum20$i$i = 0, $$sum21$i$i = 0, $$sum22$i$i = 0, $$sum23$i$i = 0, $$sum24$i$i = 0, $$sum25$i$i = 0, $$sum27$i$i = 0, $$sum28$i$i = 0, $$sum29$i$i = 0, $$sum3$i = 0, $$sum3$i27 = 0;
 var $$sum30$i$i = 0, $$sum3132$i$i = 0, $$sum34$i$i = 0, $$sum3536$i$i = 0, $$sum3738$i$i = 0, $$sum39$i$i = 0, $$sum4 = 0, $$sum4$i = 0, $$sum4$i$i = 0, $$sum4$i28 = 0, $$sum40$i$i = 0, $$sum41$i$i = 0, $$sum42$i$i = 0, $$sum5$i = 0, $$sum5$i$i = 0, $$sum56 = 0, $$sum6$i = 0, $$sum67$i$i = 0, $$sum7$i = 0, $$sum8$i = 0;
 var $$sum9 = 0, $$sum9$i = 0, $$sum9$i$i = 0, $$tsize$1$i = 0, $$v$0$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0;
 var $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0;
 var $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0;
 var $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0;
 var $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0;
 var $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0;
 var $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0;
 var $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0;
 var $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0;
 var $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0;
 var $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0;
 var $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0;
 var $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0;
 var $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0;
 var $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0;
 var $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0;
 var $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0;
 var $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0;
 var $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0;
 var $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0;
 var $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0;
 var $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0;
 var $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0;
 var $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0;
 var $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0;
 var $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0;
 var $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0;
 var $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0;
 var $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0;
 var $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0;
 var $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0;
 var $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0;
 var $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0;
 var $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0;
 var $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0;
 var $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0;
 var $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0;
 var $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0;
 var $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0;
 var $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0;
 var $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0;
 var $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0;
 var $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0;
 var $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0;
 var $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0;
 var $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0;
 var $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0;
 var $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0;
 var $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0;
 var $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0;
 var $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0;
 var $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0;
 var $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0;
 var $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $F$0$i$i = 0, $F1$0$i = 0, $F4$0 = 0, $F4$0$i$i = 0;
 var $F5$0$i = 0, $I1$0$i$i = 0, $I7$0$i = 0, $I7$0$i$i = 0, $K12$029$i = 0, $K2$07$i$i = 0, $K8$051$i$i = 0, $R$0$i = 0, $R$0$i$i = 0, $R$0$i$i$lcssa = 0, $R$0$i$lcssa = 0, $R$0$i18 = 0, $R$0$i18$lcssa = 0, $R$1$i = 0, $R$1$i$i = 0, $R$1$i20 = 0, $RP$0$i = 0, $RP$0$i$i = 0, $RP$0$i$i$lcssa = 0, $RP$0$i$lcssa = 0;
 var $RP$0$i17 = 0, $RP$0$i17$lcssa = 0, $T$0$lcssa$i = 0, $T$0$lcssa$i$i = 0, $T$0$lcssa$i25$i = 0, $T$028$i = 0, $T$028$i$lcssa = 0, $T$050$i$i = 0, $T$050$i$i$lcssa = 0, $T$06$i$i = 0, $T$06$i$i$lcssa = 0, $br$0$ph$i = 0, $cond$i = 0, $cond$i$i = 0, $cond$i21 = 0, $exitcond$i$i = 0, $i$02$i$i = 0, $idx$0$i = 0, $mem$0 = 0, $nb$0 = 0;
 var $not$$i = 0, $not$$i$i = 0, $not$$i26$i = 0, $oldfirst$0$i$i = 0, $or$cond$i = 0, $or$cond$i30 = 0, $or$cond1$i = 0, $or$cond19$i = 0, $or$cond2$i = 0, $or$cond3$i = 0, $or$cond5$i = 0, $or$cond57$i = 0, $or$cond6$i = 0, $or$cond8$i = 0, $or$cond9$i = 0, $qsize$0$i$i = 0, $rsize$0$i = 0, $rsize$0$i$lcssa = 0, $rsize$0$i15 = 0, $rsize$1$i = 0;
 var $rsize$2$i = 0, $rsize$3$lcssa$i = 0, $rsize$331$i = 0, $rst$0$i = 0, $rst$1$i = 0, $sizebits$0$i = 0, $sp$0$i$i = 0, $sp$0$i$i$i = 0, $sp$084$i = 0, $sp$084$i$lcssa = 0, $sp$183$i = 0, $sp$183$i$lcssa = 0, $ssize$0$$i = 0, $ssize$0$i = 0, $ssize$1$ph$i = 0, $ssize$2$i = 0, $t$0$i = 0, $t$0$i14 = 0, $t$1$i = 0, $t$2$ph$i = 0;
 var $t$2$v$3$i = 0, $t$230$i = 0, $tbase$255$i = 0, $tsize$0$ph$i = 0, $tsize$0323944$i = 0, $tsize$1$i = 0, $tsize$254$i = 0, $v$0$i = 0, $v$0$i$lcssa = 0, $v$0$i16 = 0, $v$1$i = 0, $v$2$i = 0, $v$3$lcssa$i = 0, $v$3$ph$i = 0, $v$332$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($bytes>>>0)<(245);
 do {
  if ($0) {
   $1 = ($bytes>>>0)<(11);
   $2 = (($bytes) + 11)|0;
   $3 = $2 & -8;
   $4 = $1 ? 16 : $3;
   $5 = $4 >>> 3;
   $6 = HEAP32[429060>>2]|0;
   $7 = $6 >>> $5;
   $8 = $7 & 3;
   $9 = ($8|0)==(0);
   if (!($9)) {
    $10 = $7 & 1;
    $11 = $10 ^ 1;
    $12 = (($11) + ($5))|0;
    $13 = $12 << 1;
    $14 = (429100 + ($13<<2)|0);
    $$sum10 = (($13) + 2)|0;
    $15 = (429100 + ($$sum10<<2)|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = ((($16)) + 8|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ($14|0)==($18|0);
    do {
     if ($19) {
      $20 = 1 << $12;
      $21 = $20 ^ -1;
      $22 = $6 & $21;
      HEAP32[429060>>2] = $22;
     } else {
      $23 = HEAP32[(429076)>>2]|0;
      $24 = ($18>>>0)<($23>>>0);
      if ($24) {
       _abort();
       // unreachable;
      }
      $25 = ((($18)) + 12|0);
      $26 = HEAP32[$25>>2]|0;
      $27 = ($26|0)==($16|0);
      if ($27) {
       HEAP32[$25>>2] = $14;
       HEAP32[$15>>2] = $18;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $28 = $12 << 3;
    $29 = $28 | 3;
    $30 = ((($16)) + 4|0);
    HEAP32[$30>>2] = $29;
    $$sum1112 = $28 | 4;
    $31 = (($16) + ($$sum1112)|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = $32 | 1;
    HEAP32[$31>>2] = $33;
    $mem$0 = $17;
    return ($mem$0|0);
   }
   $34 = HEAP32[(429068)>>2]|0;
   $35 = ($4>>>0)>($34>>>0);
   if ($35) {
    $36 = ($7|0)==(0);
    if (!($36)) {
     $37 = $7 << $5;
     $38 = 2 << $5;
     $39 = (0 - ($38))|0;
     $40 = $38 | $39;
     $41 = $37 & $40;
     $42 = (0 - ($41))|0;
     $43 = $41 & $42;
     $44 = (($43) + -1)|0;
     $45 = $44 >>> 12;
     $46 = $45 & 16;
     $47 = $44 >>> $46;
     $48 = $47 >>> 5;
     $49 = $48 & 8;
     $50 = $49 | $46;
     $51 = $47 >>> $49;
     $52 = $51 >>> 2;
     $53 = $52 & 4;
     $54 = $50 | $53;
     $55 = $51 >>> $53;
     $56 = $55 >>> 1;
     $57 = $56 & 2;
     $58 = $54 | $57;
     $59 = $55 >>> $57;
     $60 = $59 >>> 1;
     $61 = $60 & 1;
     $62 = $58 | $61;
     $63 = $59 >>> $61;
     $64 = (($62) + ($63))|0;
     $65 = $64 << 1;
     $66 = (429100 + ($65<<2)|0);
     $$sum4 = (($65) + 2)|0;
     $67 = (429100 + ($$sum4<<2)|0);
     $68 = HEAP32[$67>>2]|0;
     $69 = ((($68)) + 8|0);
     $70 = HEAP32[$69>>2]|0;
     $71 = ($66|0)==($70|0);
     do {
      if ($71) {
       $72 = 1 << $64;
       $73 = $72 ^ -1;
       $74 = $6 & $73;
       HEAP32[429060>>2] = $74;
       $88 = $34;
      } else {
       $75 = HEAP32[(429076)>>2]|0;
       $76 = ($70>>>0)<($75>>>0);
       if ($76) {
        _abort();
        // unreachable;
       }
       $77 = ((($70)) + 12|0);
       $78 = HEAP32[$77>>2]|0;
       $79 = ($78|0)==($68|0);
       if ($79) {
        HEAP32[$77>>2] = $66;
        HEAP32[$67>>2] = $70;
        $$pre = HEAP32[(429068)>>2]|0;
        $88 = $$pre;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $80 = $64 << 3;
     $81 = (($80) - ($4))|0;
     $82 = $4 | 3;
     $83 = ((($68)) + 4|0);
     HEAP32[$83>>2] = $82;
     $84 = (($68) + ($4)|0);
     $85 = $81 | 1;
     $$sum56 = $4 | 4;
     $86 = (($68) + ($$sum56)|0);
     HEAP32[$86>>2] = $85;
     $87 = (($68) + ($80)|0);
     HEAP32[$87>>2] = $81;
     $89 = ($88|0)==(0);
     if (!($89)) {
      $90 = HEAP32[(429080)>>2]|0;
      $91 = $88 >>> 3;
      $92 = $91 << 1;
      $93 = (429100 + ($92<<2)|0);
      $94 = HEAP32[429060>>2]|0;
      $95 = 1 << $91;
      $96 = $94 & $95;
      $97 = ($96|0)==(0);
      if ($97) {
       $98 = $94 | $95;
       HEAP32[429060>>2] = $98;
       $$pre105 = (($92) + 2)|0;
       $$pre106 = (429100 + ($$pre105<<2)|0);
       $$pre$phiZ2D = $$pre106;$F4$0 = $93;
      } else {
       $$sum9 = (($92) + 2)|0;
       $99 = (429100 + ($$sum9<<2)|0);
       $100 = HEAP32[$99>>2]|0;
       $101 = HEAP32[(429076)>>2]|0;
       $102 = ($100>>>0)<($101>>>0);
       if ($102) {
        _abort();
        // unreachable;
       } else {
        $$pre$phiZ2D = $99;$F4$0 = $100;
       }
      }
      HEAP32[$$pre$phiZ2D>>2] = $90;
      $103 = ((($F4$0)) + 12|0);
      HEAP32[$103>>2] = $90;
      $104 = ((($90)) + 8|0);
      HEAP32[$104>>2] = $F4$0;
      $105 = ((($90)) + 12|0);
      HEAP32[$105>>2] = $93;
     }
     HEAP32[(429068)>>2] = $81;
     HEAP32[(429080)>>2] = $84;
     $mem$0 = $69;
     return ($mem$0|0);
    }
    $106 = HEAP32[(429064)>>2]|0;
    $107 = ($106|0)==(0);
    if ($107) {
     $nb$0 = $4;
    } else {
     $108 = (0 - ($106))|0;
     $109 = $106 & $108;
     $110 = (($109) + -1)|0;
     $111 = $110 >>> 12;
     $112 = $111 & 16;
     $113 = $110 >>> $112;
     $114 = $113 >>> 5;
     $115 = $114 & 8;
     $116 = $115 | $112;
     $117 = $113 >>> $115;
     $118 = $117 >>> 2;
     $119 = $118 & 4;
     $120 = $116 | $119;
     $121 = $117 >>> $119;
     $122 = $121 >>> 1;
     $123 = $122 & 2;
     $124 = $120 | $123;
     $125 = $121 >>> $123;
     $126 = $125 >>> 1;
     $127 = $126 & 1;
     $128 = $124 | $127;
     $129 = $125 >>> $127;
     $130 = (($128) + ($129))|0;
     $131 = (429364 + ($130<<2)|0);
     $132 = HEAP32[$131>>2]|0;
     $133 = ((($132)) + 4|0);
     $134 = HEAP32[$133>>2]|0;
     $135 = $134 & -8;
     $136 = (($135) - ($4))|0;
     $rsize$0$i = $136;$t$0$i = $132;$v$0$i = $132;
     while(1) {
      $137 = ((($t$0$i)) + 16|0);
      $138 = HEAP32[$137>>2]|0;
      $139 = ($138|0)==(0|0);
      if ($139) {
       $140 = ((($t$0$i)) + 20|0);
       $141 = HEAP32[$140>>2]|0;
       $142 = ($141|0)==(0|0);
       if ($142) {
        $rsize$0$i$lcssa = $rsize$0$i;$v$0$i$lcssa = $v$0$i;
        break;
       } else {
        $144 = $141;
       }
      } else {
       $144 = $138;
      }
      $143 = ((($144)) + 4|0);
      $145 = HEAP32[$143>>2]|0;
      $146 = $145 & -8;
      $147 = (($146) - ($4))|0;
      $148 = ($147>>>0)<($rsize$0$i>>>0);
      $$rsize$0$i = $148 ? $147 : $rsize$0$i;
      $$v$0$i = $148 ? $144 : $v$0$i;
      $rsize$0$i = $$rsize$0$i;$t$0$i = $144;$v$0$i = $$v$0$i;
     }
     $149 = HEAP32[(429076)>>2]|0;
     $150 = ($v$0$i$lcssa>>>0)<($149>>>0);
     if ($150) {
      _abort();
      // unreachable;
     }
     $151 = (($v$0$i$lcssa) + ($4)|0);
     $152 = ($v$0$i$lcssa>>>0)<($151>>>0);
     if (!($152)) {
      _abort();
      // unreachable;
     }
     $153 = ((($v$0$i$lcssa)) + 24|0);
     $154 = HEAP32[$153>>2]|0;
     $155 = ((($v$0$i$lcssa)) + 12|0);
     $156 = HEAP32[$155>>2]|0;
     $157 = ($156|0)==($v$0$i$lcssa|0);
     do {
      if ($157) {
       $167 = ((($v$0$i$lcssa)) + 20|0);
       $168 = HEAP32[$167>>2]|0;
       $169 = ($168|0)==(0|0);
       if ($169) {
        $170 = ((($v$0$i$lcssa)) + 16|0);
        $171 = HEAP32[$170>>2]|0;
        $172 = ($171|0)==(0|0);
        if ($172) {
         $R$1$i = 0;
         break;
        } else {
         $R$0$i = $171;$RP$0$i = $170;
        }
       } else {
        $R$0$i = $168;$RP$0$i = $167;
       }
       while(1) {
        $173 = ((($R$0$i)) + 20|0);
        $174 = HEAP32[$173>>2]|0;
        $175 = ($174|0)==(0|0);
        if (!($175)) {
         $R$0$i = $174;$RP$0$i = $173;
         continue;
        }
        $176 = ((($R$0$i)) + 16|0);
        $177 = HEAP32[$176>>2]|0;
        $178 = ($177|0)==(0|0);
        if ($178) {
         $R$0$i$lcssa = $R$0$i;$RP$0$i$lcssa = $RP$0$i;
         break;
        } else {
         $R$0$i = $177;$RP$0$i = $176;
        }
       }
       $179 = ($RP$0$i$lcssa>>>0)<($149>>>0);
       if ($179) {
        _abort();
        // unreachable;
       } else {
        HEAP32[$RP$0$i$lcssa>>2] = 0;
        $R$1$i = $R$0$i$lcssa;
        break;
       }
      } else {
       $158 = ((($v$0$i$lcssa)) + 8|0);
       $159 = HEAP32[$158>>2]|0;
       $160 = ($159>>>0)<($149>>>0);
       if ($160) {
        _abort();
        // unreachable;
       }
       $161 = ((($159)) + 12|0);
       $162 = HEAP32[$161>>2]|0;
       $163 = ($162|0)==($v$0$i$lcssa|0);
       if (!($163)) {
        _abort();
        // unreachable;
       }
       $164 = ((($156)) + 8|0);
       $165 = HEAP32[$164>>2]|0;
       $166 = ($165|0)==($v$0$i$lcssa|0);
       if ($166) {
        HEAP32[$161>>2] = $156;
        HEAP32[$164>>2] = $159;
        $R$1$i = $156;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $180 = ($154|0)==(0|0);
     do {
      if (!($180)) {
       $181 = ((($v$0$i$lcssa)) + 28|0);
       $182 = HEAP32[$181>>2]|0;
       $183 = (429364 + ($182<<2)|0);
       $184 = HEAP32[$183>>2]|0;
       $185 = ($v$0$i$lcssa|0)==($184|0);
       if ($185) {
        HEAP32[$183>>2] = $R$1$i;
        $cond$i = ($R$1$i|0)==(0|0);
        if ($cond$i) {
         $186 = 1 << $182;
         $187 = $186 ^ -1;
         $188 = HEAP32[(429064)>>2]|0;
         $189 = $188 & $187;
         HEAP32[(429064)>>2] = $189;
         break;
        }
       } else {
        $190 = HEAP32[(429076)>>2]|0;
        $191 = ($154>>>0)<($190>>>0);
        if ($191) {
         _abort();
         // unreachable;
        }
        $192 = ((($154)) + 16|0);
        $193 = HEAP32[$192>>2]|0;
        $194 = ($193|0)==($v$0$i$lcssa|0);
        if ($194) {
         HEAP32[$192>>2] = $R$1$i;
        } else {
         $195 = ((($154)) + 20|0);
         HEAP32[$195>>2] = $R$1$i;
        }
        $196 = ($R$1$i|0)==(0|0);
        if ($196) {
         break;
        }
       }
       $197 = HEAP32[(429076)>>2]|0;
       $198 = ($R$1$i>>>0)<($197>>>0);
       if ($198) {
        _abort();
        // unreachable;
       }
       $199 = ((($R$1$i)) + 24|0);
       HEAP32[$199>>2] = $154;
       $200 = ((($v$0$i$lcssa)) + 16|0);
       $201 = HEAP32[$200>>2]|0;
       $202 = ($201|0)==(0|0);
       do {
        if (!($202)) {
         $203 = ($201>>>0)<($197>>>0);
         if ($203) {
          _abort();
          // unreachable;
         } else {
          $204 = ((($R$1$i)) + 16|0);
          HEAP32[$204>>2] = $201;
          $205 = ((($201)) + 24|0);
          HEAP32[$205>>2] = $R$1$i;
          break;
         }
        }
       } while(0);
       $206 = ((($v$0$i$lcssa)) + 20|0);
       $207 = HEAP32[$206>>2]|0;
       $208 = ($207|0)==(0|0);
       if (!($208)) {
        $209 = HEAP32[(429076)>>2]|0;
        $210 = ($207>>>0)<($209>>>0);
        if ($210) {
         _abort();
         // unreachable;
        } else {
         $211 = ((($R$1$i)) + 20|0);
         HEAP32[$211>>2] = $207;
         $212 = ((($207)) + 24|0);
         HEAP32[$212>>2] = $R$1$i;
         break;
        }
       }
      }
     } while(0);
     $213 = ($rsize$0$i$lcssa>>>0)<(16);
     if ($213) {
      $214 = (($rsize$0$i$lcssa) + ($4))|0;
      $215 = $214 | 3;
      $216 = ((($v$0$i$lcssa)) + 4|0);
      HEAP32[$216>>2] = $215;
      $$sum4$i = (($214) + 4)|0;
      $217 = (($v$0$i$lcssa) + ($$sum4$i)|0);
      $218 = HEAP32[$217>>2]|0;
      $219 = $218 | 1;
      HEAP32[$217>>2] = $219;
     } else {
      $220 = $4 | 3;
      $221 = ((($v$0$i$lcssa)) + 4|0);
      HEAP32[$221>>2] = $220;
      $222 = $rsize$0$i$lcssa | 1;
      $$sum$i35 = $4 | 4;
      $223 = (($v$0$i$lcssa) + ($$sum$i35)|0);
      HEAP32[$223>>2] = $222;
      $$sum1$i = (($rsize$0$i$lcssa) + ($4))|0;
      $224 = (($v$0$i$lcssa) + ($$sum1$i)|0);
      HEAP32[$224>>2] = $rsize$0$i$lcssa;
      $225 = HEAP32[(429068)>>2]|0;
      $226 = ($225|0)==(0);
      if (!($226)) {
       $227 = HEAP32[(429080)>>2]|0;
       $228 = $225 >>> 3;
       $229 = $228 << 1;
       $230 = (429100 + ($229<<2)|0);
       $231 = HEAP32[429060>>2]|0;
       $232 = 1 << $228;
       $233 = $231 & $232;
       $234 = ($233|0)==(0);
       if ($234) {
        $235 = $231 | $232;
        HEAP32[429060>>2] = $235;
        $$pre$i = (($229) + 2)|0;
        $$pre8$i = (429100 + ($$pre$i<<2)|0);
        $$pre$phi$iZ2D = $$pre8$i;$F1$0$i = $230;
       } else {
        $$sum3$i = (($229) + 2)|0;
        $236 = (429100 + ($$sum3$i<<2)|0);
        $237 = HEAP32[$236>>2]|0;
        $238 = HEAP32[(429076)>>2]|0;
        $239 = ($237>>>0)<($238>>>0);
        if ($239) {
         _abort();
         // unreachable;
        } else {
         $$pre$phi$iZ2D = $236;$F1$0$i = $237;
        }
       }
       HEAP32[$$pre$phi$iZ2D>>2] = $227;
       $240 = ((($F1$0$i)) + 12|0);
       HEAP32[$240>>2] = $227;
       $241 = ((($227)) + 8|0);
       HEAP32[$241>>2] = $F1$0$i;
       $242 = ((($227)) + 12|0);
       HEAP32[$242>>2] = $230;
      }
      HEAP32[(429068)>>2] = $rsize$0$i$lcssa;
      HEAP32[(429080)>>2] = $151;
     }
     $243 = ((($v$0$i$lcssa)) + 8|0);
     $mem$0 = $243;
     return ($mem$0|0);
    }
   } else {
    $nb$0 = $4;
   }
  } else {
   $244 = ($bytes>>>0)>(4294967231);
   if ($244) {
    $nb$0 = -1;
   } else {
    $245 = (($bytes) + 11)|0;
    $246 = $245 & -8;
    $247 = HEAP32[(429064)>>2]|0;
    $248 = ($247|0)==(0);
    if ($248) {
     $nb$0 = $246;
    } else {
     $249 = (0 - ($246))|0;
     $250 = $245 >>> 8;
     $251 = ($250|0)==(0);
     if ($251) {
      $idx$0$i = 0;
     } else {
      $252 = ($246>>>0)>(16777215);
      if ($252) {
       $idx$0$i = 31;
      } else {
       $253 = (($250) + 1048320)|0;
       $254 = $253 >>> 16;
       $255 = $254 & 8;
       $256 = $250 << $255;
       $257 = (($256) + 520192)|0;
       $258 = $257 >>> 16;
       $259 = $258 & 4;
       $260 = $259 | $255;
       $261 = $256 << $259;
       $262 = (($261) + 245760)|0;
       $263 = $262 >>> 16;
       $264 = $263 & 2;
       $265 = $260 | $264;
       $266 = (14 - ($265))|0;
       $267 = $261 << $264;
       $268 = $267 >>> 15;
       $269 = (($266) + ($268))|0;
       $270 = $269 << 1;
       $271 = (($269) + 7)|0;
       $272 = $246 >>> $271;
       $273 = $272 & 1;
       $274 = $273 | $270;
       $idx$0$i = $274;
      }
     }
     $275 = (429364 + ($idx$0$i<<2)|0);
     $276 = HEAP32[$275>>2]|0;
     $277 = ($276|0)==(0|0);
     L123: do {
      if ($277) {
       $rsize$2$i = $249;$t$1$i = 0;$v$2$i = 0;
       label = 86;
      } else {
       $278 = ($idx$0$i|0)==(31);
       $279 = $idx$0$i >>> 1;
       $280 = (25 - ($279))|0;
       $281 = $278 ? 0 : $280;
       $282 = $246 << $281;
       $rsize$0$i15 = $249;$rst$0$i = 0;$sizebits$0$i = $282;$t$0$i14 = $276;$v$0$i16 = 0;
       while(1) {
        $283 = ((($t$0$i14)) + 4|0);
        $284 = HEAP32[$283>>2]|0;
        $285 = $284 & -8;
        $286 = (($285) - ($246))|0;
        $287 = ($286>>>0)<($rsize$0$i15>>>0);
        if ($287) {
         $288 = ($285|0)==($246|0);
         if ($288) {
          $rsize$331$i = $286;$t$230$i = $t$0$i14;$v$332$i = $t$0$i14;
          label = 90;
          break L123;
         } else {
          $rsize$1$i = $286;$v$1$i = $t$0$i14;
         }
        } else {
         $rsize$1$i = $rsize$0$i15;$v$1$i = $v$0$i16;
        }
        $289 = ((($t$0$i14)) + 20|0);
        $290 = HEAP32[$289>>2]|0;
        $291 = $sizebits$0$i >>> 31;
        $292 = (((($t$0$i14)) + 16|0) + ($291<<2)|0);
        $293 = HEAP32[$292>>2]|0;
        $294 = ($290|0)==(0|0);
        $295 = ($290|0)==($293|0);
        $or$cond19$i = $294 | $295;
        $rst$1$i = $or$cond19$i ? $rst$0$i : $290;
        $296 = ($293|0)==(0|0);
        $297 = $sizebits$0$i << 1;
        if ($296) {
         $rsize$2$i = $rsize$1$i;$t$1$i = $rst$1$i;$v$2$i = $v$1$i;
         label = 86;
         break;
        } else {
         $rsize$0$i15 = $rsize$1$i;$rst$0$i = $rst$1$i;$sizebits$0$i = $297;$t$0$i14 = $293;$v$0$i16 = $v$1$i;
        }
       }
      }
     } while(0);
     if ((label|0) == 86) {
      $298 = ($t$1$i|0)==(0|0);
      $299 = ($v$2$i|0)==(0|0);
      $or$cond$i = $298 & $299;
      if ($or$cond$i) {
       $300 = 2 << $idx$0$i;
       $301 = (0 - ($300))|0;
       $302 = $300 | $301;
       $303 = $247 & $302;
       $304 = ($303|0)==(0);
       if ($304) {
        $nb$0 = $246;
        break;
       }
       $305 = (0 - ($303))|0;
       $306 = $303 & $305;
       $307 = (($306) + -1)|0;
       $308 = $307 >>> 12;
       $309 = $308 & 16;
       $310 = $307 >>> $309;
       $311 = $310 >>> 5;
       $312 = $311 & 8;
       $313 = $312 | $309;
       $314 = $310 >>> $312;
       $315 = $314 >>> 2;
       $316 = $315 & 4;
       $317 = $313 | $316;
       $318 = $314 >>> $316;
       $319 = $318 >>> 1;
       $320 = $319 & 2;
       $321 = $317 | $320;
       $322 = $318 >>> $320;
       $323 = $322 >>> 1;
       $324 = $323 & 1;
       $325 = $321 | $324;
       $326 = $322 >>> $324;
       $327 = (($325) + ($326))|0;
       $328 = (429364 + ($327<<2)|0);
       $329 = HEAP32[$328>>2]|0;
       $t$2$ph$i = $329;$v$3$ph$i = 0;
      } else {
       $t$2$ph$i = $t$1$i;$v$3$ph$i = $v$2$i;
      }
      $330 = ($t$2$ph$i|0)==(0|0);
      if ($330) {
       $rsize$3$lcssa$i = $rsize$2$i;$v$3$lcssa$i = $v$3$ph$i;
      } else {
       $rsize$331$i = $rsize$2$i;$t$230$i = $t$2$ph$i;$v$332$i = $v$3$ph$i;
       label = 90;
      }
     }
     if ((label|0) == 90) {
      while(1) {
       label = 0;
       $331 = ((($t$230$i)) + 4|0);
       $332 = HEAP32[$331>>2]|0;
       $333 = $332 & -8;
       $334 = (($333) - ($246))|0;
       $335 = ($334>>>0)<($rsize$331$i>>>0);
       $$rsize$3$i = $335 ? $334 : $rsize$331$i;
       $t$2$v$3$i = $335 ? $t$230$i : $v$332$i;
       $336 = ((($t$230$i)) + 16|0);
       $337 = HEAP32[$336>>2]|0;
       $338 = ($337|0)==(0|0);
       if (!($338)) {
        $rsize$331$i = $$rsize$3$i;$t$230$i = $337;$v$332$i = $t$2$v$3$i;
        label = 90;
        continue;
       }
       $339 = ((($t$230$i)) + 20|0);
       $340 = HEAP32[$339>>2]|0;
       $341 = ($340|0)==(0|0);
       if ($341) {
        $rsize$3$lcssa$i = $$rsize$3$i;$v$3$lcssa$i = $t$2$v$3$i;
        break;
       } else {
        $rsize$331$i = $$rsize$3$i;$t$230$i = $340;$v$332$i = $t$2$v$3$i;
        label = 90;
       }
      }
     }
     $342 = ($v$3$lcssa$i|0)==(0|0);
     if ($342) {
      $nb$0 = $246;
     } else {
      $343 = HEAP32[(429068)>>2]|0;
      $344 = (($343) - ($246))|0;
      $345 = ($rsize$3$lcssa$i>>>0)<($344>>>0);
      if ($345) {
       $346 = HEAP32[(429076)>>2]|0;
       $347 = ($v$3$lcssa$i>>>0)<($346>>>0);
       if ($347) {
        _abort();
        // unreachable;
       }
       $348 = (($v$3$lcssa$i) + ($246)|0);
       $349 = ($v$3$lcssa$i>>>0)<($348>>>0);
       if (!($349)) {
        _abort();
        // unreachable;
       }
       $350 = ((($v$3$lcssa$i)) + 24|0);
       $351 = HEAP32[$350>>2]|0;
       $352 = ((($v$3$lcssa$i)) + 12|0);
       $353 = HEAP32[$352>>2]|0;
       $354 = ($353|0)==($v$3$lcssa$i|0);
       do {
        if ($354) {
         $364 = ((($v$3$lcssa$i)) + 20|0);
         $365 = HEAP32[$364>>2]|0;
         $366 = ($365|0)==(0|0);
         if ($366) {
          $367 = ((($v$3$lcssa$i)) + 16|0);
          $368 = HEAP32[$367>>2]|0;
          $369 = ($368|0)==(0|0);
          if ($369) {
           $R$1$i20 = 0;
           break;
          } else {
           $R$0$i18 = $368;$RP$0$i17 = $367;
          }
         } else {
          $R$0$i18 = $365;$RP$0$i17 = $364;
         }
         while(1) {
          $370 = ((($R$0$i18)) + 20|0);
          $371 = HEAP32[$370>>2]|0;
          $372 = ($371|0)==(0|0);
          if (!($372)) {
           $R$0$i18 = $371;$RP$0$i17 = $370;
           continue;
          }
          $373 = ((($R$0$i18)) + 16|0);
          $374 = HEAP32[$373>>2]|0;
          $375 = ($374|0)==(0|0);
          if ($375) {
           $R$0$i18$lcssa = $R$0$i18;$RP$0$i17$lcssa = $RP$0$i17;
           break;
          } else {
           $R$0$i18 = $374;$RP$0$i17 = $373;
          }
         }
         $376 = ($RP$0$i17$lcssa>>>0)<($346>>>0);
         if ($376) {
          _abort();
          // unreachable;
         } else {
          HEAP32[$RP$0$i17$lcssa>>2] = 0;
          $R$1$i20 = $R$0$i18$lcssa;
          break;
         }
        } else {
         $355 = ((($v$3$lcssa$i)) + 8|0);
         $356 = HEAP32[$355>>2]|0;
         $357 = ($356>>>0)<($346>>>0);
         if ($357) {
          _abort();
          // unreachable;
         }
         $358 = ((($356)) + 12|0);
         $359 = HEAP32[$358>>2]|0;
         $360 = ($359|0)==($v$3$lcssa$i|0);
         if (!($360)) {
          _abort();
          // unreachable;
         }
         $361 = ((($353)) + 8|0);
         $362 = HEAP32[$361>>2]|0;
         $363 = ($362|0)==($v$3$lcssa$i|0);
         if ($363) {
          HEAP32[$358>>2] = $353;
          HEAP32[$361>>2] = $356;
          $R$1$i20 = $353;
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       } while(0);
       $377 = ($351|0)==(0|0);
       do {
        if (!($377)) {
         $378 = ((($v$3$lcssa$i)) + 28|0);
         $379 = HEAP32[$378>>2]|0;
         $380 = (429364 + ($379<<2)|0);
         $381 = HEAP32[$380>>2]|0;
         $382 = ($v$3$lcssa$i|0)==($381|0);
         if ($382) {
          HEAP32[$380>>2] = $R$1$i20;
          $cond$i21 = ($R$1$i20|0)==(0|0);
          if ($cond$i21) {
           $383 = 1 << $379;
           $384 = $383 ^ -1;
           $385 = HEAP32[(429064)>>2]|0;
           $386 = $385 & $384;
           HEAP32[(429064)>>2] = $386;
           break;
          }
         } else {
          $387 = HEAP32[(429076)>>2]|0;
          $388 = ($351>>>0)<($387>>>0);
          if ($388) {
           _abort();
           // unreachable;
          }
          $389 = ((($351)) + 16|0);
          $390 = HEAP32[$389>>2]|0;
          $391 = ($390|0)==($v$3$lcssa$i|0);
          if ($391) {
           HEAP32[$389>>2] = $R$1$i20;
          } else {
           $392 = ((($351)) + 20|0);
           HEAP32[$392>>2] = $R$1$i20;
          }
          $393 = ($R$1$i20|0)==(0|0);
          if ($393) {
           break;
          }
         }
         $394 = HEAP32[(429076)>>2]|0;
         $395 = ($R$1$i20>>>0)<($394>>>0);
         if ($395) {
          _abort();
          // unreachable;
         }
         $396 = ((($R$1$i20)) + 24|0);
         HEAP32[$396>>2] = $351;
         $397 = ((($v$3$lcssa$i)) + 16|0);
         $398 = HEAP32[$397>>2]|0;
         $399 = ($398|0)==(0|0);
         do {
          if (!($399)) {
           $400 = ($398>>>0)<($394>>>0);
           if ($400) {
            _abort();
            // unreachable;
           } else {
            $401 = ((($R$1$i20)) + 16|0);
            HEAP32[$401>>2] = $398;
            $402 = ((($398)) + 24|0);
            HEAP32[$402>>2] = $R$1$i20;
            break;
           }
          }
         } while(0);
         $403 = ((($v$3$lcssa$i)) + 20|0);
         $404 = HEAP32[$403>>2]|0;
         $405 = ($404|0)==(0|0);
         if (!($405)) {
          $406 = HEAP32[(429076)>>2]|0;
          $407 = ($404>>>0)<($406>>>0);
          if ($407) {
           _abort();
           // unreachable;
          } else {
           $408 = ((($R$1$i20)) + 20|0);
           HEAP32[$408>>2] = $404;
           $409 = ((($404)) + 24|0);
           HEAP32[$409>>2] = $R$1$i20;
           break;
          }
         }
        }
       } while(0);
       $410 = ($rsize$3$lcssa$i>>>0)<(16);
       L199: do {
        if ($410) {
         $411 = (($rsize$3$lcssa$i) + ($246))|0;
         $412 = $411 | 3;
         $413 = ((($v$3$lcssa$i)) + 4|0);
         HEAP32[$413>>2] = $412;
         $$sum18$i = (($411) + 4)|0;
         $414 = (($v$3$lcssa$i) + ($$sum18$i)|0);
         $415 = HEAP32[$414>>2]|0;
         $416 = $415 | 1;
         HEAP32[$414>>2] = $416;
        } else {
         $417 = $246 | 3;
         $418 = ((($v$3$lcssa$i)) + 4|0);
         HEAP32[$418>>2] = $417;
         $419 = $rsize$3$lcssa$i | 1;
         $$sum$i2334 = $246 | 4;
         $420 = (($v$3$lcssa$i) + ($$sum$i2334)|0);
         HEAP32[$420>>2] = $419;
         $$sum1$i24 = (($rsize$3$lcssa$i) + ($246))|0;
         $421 = (($v$3$lcssa$i) + ($$sum1$i24)|0);
         HEAP32[$421>>2] = $rsize$3$lcssa$i;
         $422 = $rsize$3$lcssa$i >>> 3;
         $423 = ($rsize$3$lcssa$i>>>0)<(256);
         if ($423) {
          $424 = $422 << 1;
          $425 = (429100 + ($424<<2)|0);
          $426 = HEAP32[429060>>2]|0;
          $427 = 1 << $422;
          $428 = $426 & $427;
          $429 = ($428|0)==(0);
          if ($429) {
           $430 = $426 | $427;
           HEAP32[429060>>2] = $430;
           $$pre$i25 = (($424) + 2)|0;
           $$pre43$i = (429100 + ($$pre$i25<<2)|0);
           $$pre$phi$i26Z2D = $$pre43$i;$F5$0$i = $425;
          } else {
           $$sum17$i = (($424) + 2)|0;
           $431 = (429100 + ($$sum17$i<<2)|0);
           $432 = HEAP32[$431>>2]|0;
           $433 = HEAP32[(429076)>>2]|0;
           $434 = ($432>>>0)<($433>>>0);
           if ($434) {
            _abort();
            // unreachable;
           } else {
            $$pre$phi$i26Z2D = $431;$F5$0$i = $432;
           }
          }
          HEAP32[$$pre$phi$i26Z2D>>2] = $348;
          $435 = ((($F5$0$i)) + 12|0);
          HEAP32[$435>>2] = $348;
          $$sum15$i = (($246) + 8)|0;
          $436 = (($v$3$lcssa$i) + ($$sum15$i)|0);
          HEAP32[$436>>2] = $F5$0$i;
          $$sum16$i = (($246) + 12)|0;
          $437 = (($v$3$lcssa$i) + ($$sum16$i)|0);
          HEAP32[$437>>2] = $425;
          break;
         }
         $438 = $rsize$3$lcssa$i >>> 8;
         $439 = ($438|0)==(0);
         if ($439) {
          $I7$0$i = 0;
         } else {
          $440 = ($rsize$3$lcssa$i>>>0)>(16777215);
          if ($440) {
           $I7$0$i = 31;
          } else {
           $441 = (($438) + 1048320)|0;
           $442 = $441 >>> 16;
           $443 = $442 & 8;
           $444 = $438 << $443;
           $445 = (($444) + 520192)|0;
           $446 = $445 >>> 16;
           $447 = $446 & 4;
           $448 = $447 | $443;
           $449 = $444 << $447;
           $450 = (($449) + 245760)|0;
           $451 = $450 >>> 16;
           $452 = $451 & 2;
           $453 = $448 | $452;
           $454 = (14 - ($453))|0;
           $455 = $449 << $452;
           $456 = $455 >>> 15;
           $457 = (($454) + ($456))|0;
           $458 = $457 << 1;
           $459 = (($457) + 7)|0;
           $460 = $rsize$3$lcssa$i >>> $459;
           $461 = $460 & 1;
           $462 = $461 | $458;
           $I7$0$i = $462;
          }
         }
         $463 = (429364 + ($I7$0$i<<2)|0);
         $$sum2$i = (($246) + 28)|0;
         $464 = (($v$3$lcssa$i) + ($$sum2$i)|0);
         HEAP32[$464>>2] = $I7$0$i;
         $$sum3$i27 = (($246) + 16)|0;
         $465 = (($v$3$lcssa$i) + ($$sum3$i27)|0);
         $$sum4$i28 = (($246) + 20)|0;
         $466 = (($v$3$lcssa$i) + ($$sum4$i28)|0);
         HEAP32[$466>>2] = 0;
         HEAP32[$465>>2] = 0;
         $467 = HEAP32[(429064)>>2]|0;
         $468 = 1 << $I7$0$i;
         $469 = $467 & $468;
         $470 = ($469|0)==(0);
         if ($470) {
          $471 = $467 | $468;
          HEAP32[(429064)>>2] = $471;
          HEAP32[$463>>2] = $348;
          $$sum5$i = (($246) + 24)|0;
          $472 = (($v$3$lcssa$i) + ($$sum5$i)|0);
          HEAP32[$472>>2] = $463;
          $$sum6$i = (($246) + 12)|0;
          $473 = (($v$3$lcssa$i) + ($$sum6$i)|0);
          HEAP32[$473>>2] = $348;
          $$sum7$i = (($246) + 8)|0;
          $474 = (($v$3$lcssa$i) + ($$sum7$i)|0);
          HEAP32[$474>>2] = $348;
          break;
         }
         $475 = HEAP32[$463>>2]|0;
         $476 = ((($475)) + 4|0);
         $477 = HEAP32[$476>>2]|0;
         $478 = $477 & -8;
         $479 = ($478|0)==($rsize$3$lcssa$i|0);
         L217: do {
          if ($479) {
           $T$0$lcssa$i = $475;
          } else {
           $480 = ($I7$0$i|0)==(31);
           $481 = $I7$0$i >>> 1;
           $482 = (25 - ($481))|0;
           $483 = $480 ? 0 : $482;
           $484 = $rsize$3$lcssa$i << $483;
           $K12$029$i = $484;$T$028$i = $475;
           while(1) {
            $491 = $K12$029$i >>> 31;
            $492 = (((($T$028$i)) + 16|0) + ($491<<2)|0);
            $487 = HEAP32[$492>>2]|0;
            $493 = ($487|0)==(0|0);
            if ($493) {
             $$lcssa232 = $492;$T$028$i$lcssa = $T$028$i;
             break;
            }
            $485 = $K12$029$i << 1;
            $486 = ((($487)) + 4|0);
            $488 = HEAP32[$486>>2]|0;
            $489 = $488 & -8;
            $490 = ($489|0)==($rsize$3$lcssa$i|0);
            if ($490) {
             $T$0$lcssa$i = $487;
             break L217;
            } else {
             $K12$029$i = $485;$T$028$i = $487;
            }
           }
           $494 = HEAP32[(429076)>>2]|0;
           $495 = ($$lcssa232>>>0)<($494>>>0);
           if ($495) {
            _abort();
            // unreachable;
           } else {
            HEAP32[$$lcssa232>>2] = $348;
            $$sum11$i = (($246) + 24)|0;
            $496 = (($v$3$lcssa$i) + ($$sum11$i)|0);
            HEAP32[$496>>2] = $T$028$i$lcssa;
            $$sum12$i = (($246) + 12)|0;
            $497 = (($v$3$lcssa$i) + ($$sum12$i)|0);
            HEAP32[$497>>2] = $348;
            $$sum13$i = (($246) + 8)|0;
            $498 = (($v$3$lcssa$i) + ($$sum13$i)|0);
            HEAP32[$498>>2] = $348;
            break L199;
           }
          }
         } while(0);
         $499 = ((($T$0$lcssa$i)) + 8|0);
         $500 = HEAP32[$499>>2]|0;
         $501 = HEAP32[(429076)>>2]|0;
         $502 = ($500>>>0)>=($501>>>0);
         $not$$i = ($T$0$lcssa$i>>>0)>=($501>>>0);
         $503 = $502 & $not$$i;
         if ($503) {
          $504 = ((($500)) + 12|0);
          HEAP32[$504>>2] = $348;
          HEAP32[$499>>2] = $348;
          $$sum8$i = (($246) + 8)|0;
          $505 = (($v$3$lcssa$i) + ($$sum8$i)|0);
          HEAP32[$505>>2] = $500;
          $$sum9$i = (($246) + 12)|0;
          $506 = (($v$3$lcssa$i) + ($$sum9$i)|0);
          HEAP32[$506>>2] = $T$0$lcssa$i;
          $$sum10$i = (($246) + 24)|0;
          $507 = (($v$3$lcssa$i) + ($$sum10$i)|0);
          HEAP32[$507>>2] = 0;
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       } while(0);
       $508 = ((($v$3$lcssa$i)) + 8|0);
       $mem$0 = $508;
       return ($mem$0|0);
      } else {
       $nb$0 = $246;
      }
     }
    }
   }
  }
 } while(0);
 $509 = HEAP32[(429068)>>2]|0;
 $510 = ($509>>>0)<($nb$0>>>0);
 if (!($510)) {
  $511 = (($509) - ($nb$0))|0;
  $512 = HEAP32[(429080)>>2]|0;
  $513 = ($511>>>0)>(15);
  if ($513) {
   $514 = (($512) + ($nb$0)|0);
   HEAP32[(429080)>>2] = $514;
   HEAP32[(429068)>>2] = $511;
   $515 = $511 | 1;
   $$sum2 = (($nb$0) + 4)|0;
   $516 = (($512) + ($$sum2)|0);
   HEAP32[$516>>2] = $515;
   $517 = (($512) + ($509)|0);
   HEAP32[$517>>2] = $511;
   $518 = $nb$0 | 3;
   $519 = ((($512)) + 4|0);
   HEAP32[$519>>2] = $518;
  } else {
   HEAP32[(429068)>>2] = 0;
   HEAP32[(429080)>>2] = 0;
   $520 = $509 | 3;
   $521 = ((($512)) + 4|0);
   HEAP32[$521>>2] = $520;
   $$sum1 = (($509) + 4)|0;
   $522 = (($512) + ($$sum1)|0);
   $523 = HEAP32[$522>>2]|0;
   $524 = $523 | 1;
   HEAP32[$522>>2] = $524;
  }
  $525 = ((($512)) + 8|0);
  $mem$0 = $525;
  return ($mem$0|0);
 }
 $526 = HEAP32[(429072)>>2]|0;
 $527 = ($526>>>0)>($nb$0>>>0);
 if ($527) {
  $528 = (($526) - ($nb$0))|0;
  HEAP32[(429072)>>2] = $528;
  $529 = HEAP32[(429084)>>2]|0;
  $530 = (($529) + ($nb$0)|0);
  HEAP32[(429084)>>2] = $530;
  $531 = $528 | 1;
  $$sum = (($nb$0) + 4)|0;
  $532 = (($529) + ($$sum)|0);
  HEAP32[$532>>2] = $531;
  $533 = $nb$0 | 3;
  $534 = ((($529)) + 4|0);
  HEAP32[$534>>2] = $533;
  $535 = ((($529)) + 8|0);
  $mem$0 = $535;
  return ($mem$0|0);
 }
 $536 = HEAP32[429532>>2]|0;
 $537 = ($536|0)==(0);
 do {
  if ($537) {
   $538 = (_sysconf(30)|0);
   $539 = (($538) + -1)|0;
   $540 = $539 & $538;
   $541 = ($540|0)==(0);
   if ($541) {
    HEAP32[(429540)>>2] = $538;
    HEAP32[(429536)>>2] = $538;
    HEAP32[(429544)>>2] = -1;
    HEAP32[(429548)>>2] = -1;
    HEAP32[(429552)>>2] = 0;
    HEAP32[(429504)>>2] = 0;
    $542 = (_time((0|0))|0);
    $543 = $542 & -16;
    $544 = $543 ^ 1431655768;
    HEAP32[429532>>2] = $544;
    break;
   } else {
    _abort();
    // unreachable;
   }
  }
 } while(0);
 $545 = (($nb$0) + 48)|0;
 $546 = HEAP32[(429540)>>2]|0;
 $547 = (($nb$0) + 47)|0;
 $548 = (($546) + ($547))|0;
 $549 = (0 - ($546))|0;
 $550 = $548 & $549;
 $551 = ($550>>>0)>($nb$0>>>0);
 if (!($551)) {
  $mem$0 = 0;
  return ($mem$0|0);
 }
 $552 = HEAP32[(429500)>>2]|0;
 $553 = ($552|0)==(0);
 if (!($553)) {
  $554 = HEAP32[(429492)>>2]|0;
  $555 = (($554) + ($550))|0;
  $556 = ($555>>>0)<=($554>>>0);
  $557 = ($555>>>0)>($552>>>0);
  $or$cond1$i = $556 | $557;
  if ($or$cond1$i) {
   $mem$0 = 0;
   return ($mem$0|0);
  }
 }
 $558 = HEAP32[(429504)>>2]|0;
 $559 = $558 & 4;
 $560 = ($559|0)==(0);
 L258: do {
  if ($560) {
   $561 = HEAP32[(429084)>>2]|0;
   $562 = ($561|0)==(0|0);
   L260: do {
    if ($562) {
     label = 174;
    } else {
     $sp$0$i$i = (429508);
     while(1) {
      $563 = HEAP32[$sp$0$i$i>>2]|0;
      $564 = ($563>>>0)>($561>>>0);
      if (!($564)) {
       $565 = ((($sp$0$i$i)) + 4|0);
       $566 = HEAP32[$565>>2]|0;
       $567 = (($563) + ($566)|0);
       $568 = ($567>>>0)>($561>>>0);
       if ($568) {
        $$lcssa228 = $sp$0$i$i;$$lcssa230 = $565;
        break;
       }
      }
      $569 = ((($sp$0$i$i)) + 8|0);
      $570 = HEAP32[$569>>2]|0;
      $571 = ($570|0)==(0|0);
      if ($571) {
       label = 174;
       break L260;
      } else {
       $sp$0$i$i = $570;
      }
     }
     $594 = HEAP32[(429072)>>2]|0;
     $595 = (($548) - ($594))|0;
     $596 = $595 & $549;
     $597 = ($596>>>0)<(2147483647);
     if ($597) {
      $598 = (_sbrk(($596|0))|0);
      $599 = HEAP32[$$lcssa228>>2]|0;
      $600 = HEAP32[$$lcssa230>>2]|0;
      $601 = (($599) + ($600)|0);
      $602 = ($598|0)==($601|0);
      $$3$i = $602 ? $596 : 0;
      if ($602) {
       $603 = ($598|0)==((-1)|0);
       if ($603) {
        $tsize$0323944$i = $$3$i;
       } else {
        $tbase$255$i = $598;$tsize$254$i = $$3$i;
        label = 194;
        break L258;
       }
      } else {
       $br$0$ph$i = $598;$ssize$1$ph$i = $596;$tsize$0$ph$i = $$3$i;
       label = 184;
      }
     } else {
      $tsize$0323944$i = 0;
     }
    }
   } while(0);
   do {
    if ((label|0) == 174) {
     $572 = (_sbrk(0)|0);
     $573 = ($572|0)==((-1)|0);
     if ($573) {
      $tsize$0323944$i = 0;
     } else {
      $574 = $572;
      $575 = HEAP32[(429536)>>2]|0;
      $576 = (($575) + -1)|0;
      $577 = $576 & $574;
      $578 = ($577|0)==(0);
      if ($578) {
       $ssize$0$i = $550;
      } else {
       $579 = (($576) + ($574))|0;
       $580 = (0 - ($575))|0;
       $581 = $579 & $580;
       $582 = (($550) - ($574))|0;
       $583 = (($582) + ($581))|0;
       $ssize$0$i = $583;
      }
      $584 = HEAP32[(429492)>>2]|0;
      $585 = (($584) + ($ssize$0$i))|0;
      $586 = ($ssize$0$i>>>0)>($nb$0>>>0);
      $587 = ($ssize$0$i>>>0)<(2147483647);
      $or$cond$i30 = $586 & $587;
      if ($or$cond$i30) {
       $588 = HEAP32[(429500)>>2]|0;
       $589 = ($588|0)==(0);
       if (!($589)) {
        $590 = ($585>>>0)<=($584>>>0);
        $591 = ($585>>>0)>($588>>>0);
        $or$cond2$i = $590 | $591;
        if ($or$cond2$i) {
         $tsize$0323944$i = 0;
         break;
        }
       }
       $592 = (_sbrk(($ssize$0$i|0))|0);
       $593 = ($592|0)==($572|0);
       $ssize$0$$i = $593 ? $ssize$0$i : 0;
       if ($593) {
        $tbase$255$i = $572;$tsize$254$i = $ssize$0$$i;
        label = 194;
        break L258;
       } else {
        $br$0$ph$i = $592;$ssize$1$ph$i = $ssize$0$i;$tsize$0$ph$i = $ssize$0$$i;
        label = 184;
       }
      } else {
       $tsize$0323944$i = 0;
      }
     }
    }
   } while(0);
   L280: do {
    if ((label|0) == 184) {
     $604 = (0 - ($ssize$1$ph$i))|0;
     $605 = ($br$0$ph$i|0)!=((-1)|0);
     $606 = ($ssize$1$ph$i>>>0)<(2147483647);
     $or$cond5$i = $606 & $605;
     $607 = ($545>>>0)>($ssize$1$ph$i>>>0);
     $or$cond6$i = $607 & $or$cond5$i;
     do {
      if ($or$cond6$i) {
       $608 = HEAP32[(429540)>>2]|0;
       $609 = (($547) - ($ssize$1$ph$i))|0;
       $610 = (($609) + ($608))|0;
       $611 = (0 - ($608))|0;
       $612 = $610 & $611;
       $613 = ($612>>>0)<(2147483647);
       if ($613) {
        $614 = (_sbrk(($612|0))|0);
        $615 = ($614|0)==((-1)|0);
        if ($615) {
         (_sbrk(($604|0))|0);
         $tsize$0323944$i = $tsize$0$ph$i;
         break L280;
        } else {
         $616 = (($612) + ($ssize$1$ph$i))|0;
         $ssize$2$i = $616;
         break;
        }
       } else {
        $ssize$2$i = $ssize$1$ph$i;
       }
      } else {
       $ssize$2$i = $ssize$1$ph$i;
      }
     } while(0);
     $617 = ($br$0$ph$i|0)==((-1)|0);
     if ($617) {
      $tsize$0323944$i = $tsize$0$ph$i;
     } else {
      $tbase$255$i = $br$0$ph$i;$tsize$254$i = $ssize$2$i;
      label = 194;
      break L258;
     }
    }
   } while(0);
   $618 = HEAP32[(429504)>>2]|0;
   $619 = $618 | 4;
   HEAP32[(429504)>>2] = $619;
   $tsize$1$i = $tsize$0323944$i;
   label = 191;
  } else {
   $tsize$1$i = 0;
   label = 191;
  }
 } while(0);
 if ((label|0) == 191) {
  $620 = ($550>>>0)<(2147483647);
  if ($620) {
   $621 = (_sbrk(($550|0))|0);
   $622 = (_sbrk(0)|0);
   $623 = ($621|0)!=((-1)|0);
   $624 = ($622|0)!=((-1)|0);
   $or$cond3$i = $623 & $624;
   $625 = ($621>>>0)<($622>>>0);
   $or$cond8$i = $625 & $or$cond3$i;
   if ($or$cond8$i) {
    $626 = $622;
    $627 = $621;
    $628 = (($626) - ($627))|0;
    $629 = (($nb$0) + 40)|0;
    $630 = ($628>>>0)>($629>>>0);
    $$tsize$1$i = $630 ? $628 : $tsize$1$i;
    if ($630) {
     $tbase$255$i = $621;$tsize$254$i = $$tsize$1$i;
     label = 194;
    }
   }
  }
 }
 if ((label|0) == 194) {
  $631 = HEAP32[(429492)>>2]|0;
  $632 = (($631) + ($tsize$254$i))|0;
  HEAP32[(429492)>>2] = $632;
  $633 = HEAP32[(429496)>>2]|0;
  $634 = ($632>>>0)>($633>>>0);
  if ($634) {
   HEAP32[(429496)>>2] = $632;
  }
  $635 = HEAP32[(429084)>>2]|0;
  $636 = ($635|0)==(0|0);
  L299: do {
   if ($636) {
    $637 = HEAP32[(429076)>>2]|0;
    $638 = ($637|0)==(0|0);
    $639 = ($tbase$255$i>>>0)<($637>>>0);
    $or$cond9$i = $638 | $639;
    if ($or$cond9$i) {
     HEAP32[(429076)>>2] = $tbase$255$i;
    }
    HEAP32[(429508)>>2] = $tbase$255$i;
    HEAP32[(429512)>>2] = $tsize$254$i;
    HEAP32[(429520)>>2] = 0;
    $640 = HEAP32[429532>>2]|0;
    HEAP32[(429096)>>2] = $640;
    HEAP32[(429092)>>2] = -1;
    $i$02$i$i = 0;
    while(1) {
     $641 = $i$02$i$i << 1;
     $642 = (429100 + ($641<<2)|0);
     $$sum$i$i = (($641) + 3)|0;
     $643 = (429100 + ($$sum$i$i<<2)|0);
     HEAP32[$643>>2] = $642;
     $$sum1$i$i = (($641) + 2)|0;
     $644 = (429100 + ($$sum1$i$i<<2)|0);
     HEAP32[$644>>2] = $642;
     $645 = (($i$02$i$i) + 1)|0;
     $exitcond$i$i = ($645|0)==(32);
     if ($exitcond$i$i) {
      break;
     } else {
      $i$02$i$i = $645;
     }
    }
    $646 = (($tsize$254$i) + -40)|0;
    $647 = ((($tbase$255$i)) + 8|0);
    $648 = $647;
    $649 = $648 & 7;
    $650 = ($649|0)==(0);
    $651 = (0 - ($648))|0;
    $652 = $651 & 7;
    $653 = $650 ? 0 : $652;
    $654 = (($tbase$255$i) + ($653)|0);
    $655 = (($646) - ($653))|0;
    HEAP32[(429084)>>2] = $654;
    HEAP32[(429072)>>2] = $655;
    $656 = $655 | 1;
    $$sum$i13$i = (($653) + 4)|0;
    $657 = (($tbase$255$i) + ($$sum$i13$i)|0);
    HEAP32[$657>>2] = $656;
    $$sum2$i$i = (($tsize$254$i) + -36)|0;
    $658 = (($tbase$255$i) + ($$sum2$i$i)|0);
    HEAP32[$658>>2] = 40;
    $659 = HEAP32[(429548)>>2]|0;
    HEAP32[(429088)>>2] = $659;
   } else {
    $sp$084$i = (429508);
    while(1) {
     $660 = HEAP32[$sp$084$i>>2]|0;
     $661 = ((($sp$084$i)) + 4|0);
     $662 = HEAP32[$661>>2]|0;
     $663 = (($660) + ($662)|0);
     $664 = ($tbase$255$i|0)==($663|0);
     if ($664) {
      $$lcssa222 = $660;$$lcssa224 = $661;$$lcssa226 = $662;$sp$084$i$lcssa = $sp$084$i;
      label = 204;
      break;
     }
     $665 = ((($sp$084$i)) + 8|0);
     $666 = HEAP32[$665>>2]|0;
     $667 = ($666|0)==(0|0);
     if ($667) {
      break;
     } else {
      $sp$084$i = $666;
     }
    }
    if ((label|0) == 204) {
     $668 = ((($sp$084$i$lcssa)) + 12|0);
     $669 = HEAP32[$668>>2]|0;
     $670 = $669 & 8;
     $671 = ($670|0)==(0);
     if ($671) {
      $672 = ($635>>>0)>=($$lcssa222>>>0);
      $673 = ($635>>>0)<($tbase$255$i>>>0);
      $or$cond57$i = $673 & $672;
      if ($or$cond57$i) {
       $674 = (($$lcssa226) + ($tsize$254$i))|0;
       HEAP32[$$lcssa224>>2] = $674;
       $675 = HEAP32[(429072)>>2]|0;
       $676 = (($675) + ($tsize$254$i))|0;
       $677 = ((($635)) + 8|0);
       $678 = $677;
       $679 = $678 & 7;
       $680 = ($679|0)==(0);
       $681 = (0 - ($678))|0;
       $682 = $681 & 7;
       $683 = $680 ? 0 : $682;
       $684 = (($635) + ($683)|0);
       $685 = (($676) - ($683))|0;
       HEAP32[(429084)>>2] = $684;
       HEAP32[(429072)>>2] = $685;
       $686 = $685 | 1;
       $$sum$i17$i = (($683) + 4)|0;
       $687 = (($635) + ($$sum$i17$i)|0);
       HEAP32[$687>>2] = $686;
       $$sum2$i18$i = (($676) + 4)|0;
       $688 = (($635) + ($$sum2$i18$i)|0);
       HEAP32[$688>>2] = 40;
       $689 = HEAP32[(429548)>>2]|0;
       HEAP32[(429088)>>2] = $689;
       break;
      }
     }
    }
    $690 = HEAP32[(429076)>>2]|0;
    $691 = ($tbase$255$i>>>0)<($690>>>0);
    if ($691) {
     HEAP32[(429076)>>2] = $tbase$255$i;
     $755 = $tbase$255$i;
    } else {
     $755 = $690;
    }
    $692 = (($tbase$255$i) + ($tsize$254$i)|0);
    $sp$183$i = (429508);
    while(1) {
     $693 = HEAP32[$sp$183$i>>2]|0;
     $694 = ($693|0)==($692|0);
     if ($694) {
      $$lcssa219 = $sp$183$i;$sp$183$i$lcssa = $sp$183$i;
      label = 212;
      break;
     }
     $695 = ((($sp$183$i)) + 8|0);
     $696 = HEAP32[$695>>2]|0;
     $697 = ($696|0)==(0|0);
     if ($697) {
      $sp$0$i$i$i = (429508);
      break;
     } else {
      $sp$183$i = $696;
     }
    }
    if ((label|0) == 212) {
     $698 = ((($sp$183$i$lcssa)) + 12|0);
     $699 = HEAP32[$698>>2]|0;
     $700 = $699 & 8;
     $701 = ($700|0)==(0);
     if ($701) {
      HEAP32[$$lcssa219>>2] = $tbase$255$i;
      $702 = ((($sp$183$i$lcssa)) + 4|0);
      $703 = HEAP32[$702>>2]|0;
      $704 = (($703) + ($tsize$254$i))|0;
      HEAP32[$702>>2] = $704;
      $705 = ((($tbase$255$i)) + 8|0);
      $706 = $705;
      $707 = $706 & 7;
      $708 = ($707|0)==(0);
      $709 = (0 - ($706))|0;
      $710 = $709 & 7;
      $711 = $708 ? 0 : $710;
      $712 = (($tbase$255$i) + ($711)|0);
      $$sum112$i = (($tsize$254$i) + 8)|0;
      $713 = (($tbase$255$i) + ($$sum112$i)|0);
      $714 = $713;
      $715 = $714 & 7;
      $716 = ($715|0)==(0);
      $717 = (0 - ($714))|0;
      $718 = $717 & 7;
      $719 = $716 ? 0 : $718;
      $$sum113$i = (($719) + ($tsize$254$i))|0;
      $720 = (($tbase$255$i) + ($$sum113$i)|0);
      $721 = $720;
      $722 = $712;
      $723 = (($721) - ($722))|0;
      $$sum$i19$i = (($711) + ($nb$0))|0;
      $724 = (($tbase$255$i) + ($$sum$i19$i)|0);
      $725 = (($723) - ($nb$0))|0;
      $726 = $nb$0 | 3;
      $$sum1$i20$i = (($711) + 4)|0;
      $727 = (($tbase$255$i) + ($$sum1$i20$i)|0);
      HEAP32[$727>>2] = $726;
      $728 = ($720|0)==($635|0);
      L324: do {
       if ($728) {
        $729 = HEAP32[(429072)>>2]|0;
        $730 = (($729) + ($725))|0;
        HEAP32[(429072)>>2] = $730;
        HEAP32[(429084)>>2] = $724;
        $731 = $730 | 1;
        $$sum42$i$i = (($$sum$i19$i) + 4)|0;
        $732 = (($tbase$255$i) + ($$sum42$i$i)|0);
        HEAP32[$732>>2] = $731;
       } else {
        $733 = HEAP32[(429080)>>2]|0;
        $734 = ($720|0)==($733|0);
        if ($734) {
         $735 = HEAP32[(429068)>>2]|0;
         $736 = (($735) + ($725))|0;
         HEAP32[(429068)>>2] = $736;
         HEAP32[(429080)>>2] = $724;
         $737 = $736 | 1;
         $$sum40$i$i = (($$sum$i19$i) + 4)|0;
         $738 = (($tbase$255$i) + ($$sum40$i$i)|0);
         HEAP32[$738>>2] = $737;
         $$sum41$i$i = (($736) + ($$sum$i19$i))|0;
         $739 = (($tbase$255$i) + ($$sum41$i$i)|0);
         HEAP32[$739>>2] = $736;
         break;
        }
        $$sum2$i21$i = (($tsize$254$i) + 4)|0;
        $$sum114$i = (($$sum2$i21$i) + ($719))|0;
        $740 = (($tbase$255$i) + ($$sum114$i)|0);
        $741 = HEAP32[$740>>2]|0;
        $742 = $741 & 3;
        $743 = ($742|0)==(1);
        if ($743) {
         $744 = $741 & -8;
         $745 = $741 >>> 3;
         $746 = ($741>>>0)<(256);
         L332: do {
          if ($746) {
           $$sum3738$i$i = $719 | 8;
           $$sum124$i = (($$sum3738$i$i) + ($tsize$254$i))|0;
           $747 = (($tbase$255$i) + ($$sum124$i)|0);
           $748 = HEAP32[$747>>2]|0;
           $$sum39$i$i = (($tsize$254$i) + 12)|0;
           $$sum125$i = (($$sum39$i$i) + ($719))|0;
           $749 = (($tbase$255$i) + ($$sum125$i)|0);
           $750 = HEAP32[$749>>2]|0;
           $751 = $745 << 1;
           $752 = (429100 + ($751<<2)|0);
           $753 = ($748|0)==($752|0);
           do {
            if (!($753)) {
             $754 = ($748>>>0)<($755>>>0);
             if ($754) {
              _abort();
              // unreachable;
             }
             $756 = ((($748)) + 12|0);
             $757 = HEAP32[$756>>2]|0;
             $758 = ($757|0)==($720|0);
             if ($758) {
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $759 = ($750|0)==($748|0);
           if ($759) {
            $760 = 1 << $745;
            $761 = $760 ^ -1;
            $762 = HEAP32[429060>>2]|0;
            $763 = $762 & $761;
            HEAP32[429060>>2] = $763;
            break;
           }
           $764 = ($750|0)==($752|0);
           do {
            if ($764) {
             $$pre57$i$i = ((($750)) + 8|0);
             $$pre$phi58$i$iZ2D = $$pre57$i$i;
            } else {
             $765 = ($750>>>0)<($755>>>0);
             if ($765) {
              _abort();
              // unreachable;
             }
             $766 = ((($750)) + 8|0);
             $767 = HEAP32[$766>>2]|0;
             $768 = ($767|0)==($720|0);
             if ($768) {
              $$pre$phi58$i$iZ2D = $766;
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $769 = ((($748)) + 12|0);
           HEAP32[$769>>2] = $750;
           HEAP32[$$pre$phi58$i$iZ2D>>2] = $748;
          } else {
           $$sum34$i$i = $719 | 24;
           $$sum115$i = (($$sum34$i$i) + ($tsize$254$i))|0;
           $770 = (($tbase$255$i) + ($$sum115$i)|0);
           $771 = HEAP32[$770>>2]|0;
           $$sum5$i$i = (($tsize$254$i) + 12)|0;
           $$sum116$i = (($$sum5$i$i) + ($719))|0;
           $772 = (($tbase$255$i) + ($$sum116$i)|0);
           $773 = HEAP32[$772>>2]|0;
           $774 = ($773|0)==($720|0);
           do {
            if ($774) {
             $$sum67$i$i = $719 | 16;
             $$sum122$i = (($$sum2$i21$i) + ($$sum67$i$i))|0;
             $784 = (($tbase$255$i) + ($$sum122$i)|0);
             $785 = HEAP32[$784>>2]|0;
             $786 = ($785|0)==(0|0);
             if ($786) {
              $$sum123$i = (($$sum67$i$i) + ($tsize$254$i))|0;
              $787 = (($tbase$255$i) + ($$sum123$i)|0);
              $788 = HEAP32[$787>>2]|0;
              $789 = ($788|0)==(0|0);
              if ($789) {
               $R$1$i$i = 0;
               break;
              } else {
               $R$0$i$i = $788;$RP$0$i$i = $787;
              }
             } else {
              $R$0$i$i = $785;$RP$0$i$i = $784;
             }
             while(1) {
              $790 = ((($R$0$i$i)) + 20|0);
              $791 = HEAP32[$790>>2]|0;
              $792 = ($791|0)==(0|0);
              if (!($792)) {
               $R$0$i$i = $791;$RP$0$i$i = $790;
               continue;
              }
              $793 = ((($R$0$i$i)) + 16|0);
              $794 = HEAP32[$793>>2]|0;
              $795 = ($794|0)==(0|0);
              if ($795) {
               $R$0$i$i$lcssa = $R$0$i$i;$RP$0$i$i$lcssa = $RP$0$i$i;
               break;
              } else {
               $R$0$i$i = $794;$RP$0$i$i = $793;
              }
             }
             $796 = ($RP$0$i$i$lcssa>>>0)<($755>>>0);
             if ($796) {
              _abort();
              // unreachable;
             } else {
              HEAP32[$RP$0$i$i$lcssa>>2] = 0;
              $R$1$i$i = $R$0$i$i$lcssa;
              break;
             }
            } else {
             $$sum3536$i$i = $719 | 8;
             $$sum117$i = (($$sum3536$i$i) + ($tsize$254$i))|0;
             $775 = (($tbase$255$i) + ($$sum117$i)|0);
             $776 = HEAP32[$775>>2]|0;
             $777 = ($776>>>0)<($755>>>0);
             if ($777) {
              _abort();
              // unreachable;
             }
             $778 = ((($776)) + 12|0);
             $779 = HEAP32[$778>>2]|0;
             $780 = ($779|0)==($720|0);
             if (!($780)) {
              _abort();
              // unreachable;
             }
             $781 = ((($773)) + 8|0);
             $782 = HEAP32[$781>>2]|0;
             $783 = ($782|0)==($720|0);
             if ($783) {
              HEAP32[$778>>2] = $773;
              HEAP32[$781>>2] = $776;
              $R$1$i$i = $773;
              break;
             } else {
              _abort();
              // unreachable;
             }
            }
           } while(0);
           $797 = ($771|0)==(0|0);
           if ($797) {
            break;
           }
           $$sum30$i$i = (($tsize$254$i) + 28)|0;
           $$sum118$i = (($$sum30$i$i) + ($719))|0;
           $798 = (($tbase$255$i) + ($$sum118$i)|0);
           $799 = HEAP32[$798>>2]|0;
           $800 = (429364 + ($799<<2)|0);
           $801 = HEAP32[$800>>2]|0;
           $802 = ($720|0)==($801|0);
           do {
            if ($802) {
             HEAP32[$800>>2] = $R$1$i$i;
             $cond$i$i = ($R$1$i$i|0)==(0|0);
             if (!($cond$i$i)) {
              break;
             }
             $803 = 1 << $799;
             $804 = $803 ^ -1;
             $805 = HEAP32[(429064)>>2]|0;
             $806 = $805 & $804;
             HEAP32[(429064)>>2] = $806;
             break L332;
            } else {
             $807 = HEAP32[(429076)>>2]|0;
             $808 = ($771>>>0)<($807>>>0);
             if ($808) {
              _abort();
              // unreachable;
             }
             $809 = ((($771)) + 16|0);
             $810 = HEAP32[$809>>2]|0;
             $811 = ($810|0)==($720|0);
             if ($811) {
              HEAP32[$809>>2] = $R$1$i$i;
             } else {
              $812 = ((($771)) + 20|0);
              HEAP32[$812>>2] = $R$1$i$i;
             }
             $813 = ($R$1$i$i|0)==(0|0);
             if ($813) {
              break L332;
             }
            }
           } while(0);
           $814 = HEAP32[(429076)>>2]|0;
           $815 = ($R$1$i$i>>>0)<($814>>>0);
           if ($815) {
            _abort();
            // unreachable;
           }
           $816 = ((($R$1$i$i)) + 24|0);
           HEAP32[$816>>2] = $771;
           $$sum3132$i$i = $719 | 16;
           $$sum119$i = (($$sum3132$i$i) + ($tsize$254$i))|0;
           $817 = (($tbase$255$i) + ($$sum119$i)|0);
           $818 = HEAP32[$817>>2]|0;
           $819 = ($818|0)==(0|0);
           do {
            if (!($819)) {
             $820 = ($818>>>0)<($814>>>0);
             if ($820) {
              _abort();
              // unreachable;
             } else {
              $821 = ((($R$1$i$i)) + 16|0);
              HEAP32[$821>>2] = $818;
              $822 = ((($818)) + 24|0);
              HEAP32[$822>>2] = $R$1$i$i;
              break;
             }
            }
           } while(0);
           $$sum120$i = (($$sum2$i21$i) + ($$sum3132$i$i))|0;
           $823 = (($tbase$255$i) + ($$sum120$i)|0);
           $824 = HEAP32[$823>>2]|0;
           $825 = ($824|0)==(0|0);
           if ($825) {
            break;
           }
           $826 = HEAP32[(429076)>>2]|0;
           $827 = ($824>>>0)<($826>>>0);
           if ($827) {
            _abort();
            // unreachable;
           } else {
            $828 = ((($R$1$i$i)) + 20|0);
            HEAP32[$828>>2] = $824;
            $829 = ((($824)) + 24|0);
            HEAP32[$829>>2] = $R$1$i$i;
            break;
           }
          }
         } while(0);
         $$sum9$i$i = $744 | $719;
         $$sum121$i = (($$sum9$i$i) + ($tsize$254$i))|0;
         $830 = (($tbase$255$i) + ($$sum121$i)|0);
         $831 = (($744) + ($725))|0;
         $oldfirst$0$i$i = $830;$qsize$0$i$i = $831;
        } else {
         $oldfirst$0$i$i = $720;$qsize$0$i$i = $725;
        }
        $832 = ((($oldfirst$0$i$i)) + 4|0);
        $833 = HEAP32[$832>>2]|0;
        $834 = $833 & -2;
        HEAP32[$832>>2] = $834;
        $835 = $qsize$0$i$i | 1;
        $$sum10$i$i = (($$sum$i19$i) + 4)|0;
        $836 = (($tbase$255$i) + ($$sum10$i$i)|0);
        HEAP32[$836>>2] = $835;
        $$sum11$i$i = (($qsize$0$i$i) + ($$sum$i19$i))|0;
        $837 = (($tbase$255$i) + ($$sum11$i$i)|0);
        HEAP32[$837>>2] = $qsize$0$i$i;
        $838 = $qsize$0$i$i >>> 3;
        $839 = ($qsize$0$i$i>>>0)<(256);
        if ($839) {
         $840 = $838 << 1;
         $841 = (429100 + ($840<<2)|0);
         $842 = HEAP32[429060>>2]|0;
         $843 = 1 << $838;
         $844 = $842 & $843;
         $845 = ($844|0)==(0);
         do {
          if ($845) {
           $846 = $842 | $843;
           HEAP32[429060>>2] = $846;
           $$pre$i22$i = (($840) + 2)|0;
           $$pre56$i$i = (429100 + ($$pre$i22$i<<2)|0);
           $$pre$phi$i23$iZ2D = $$pre56$i$i;$F4$0$i$i = $841;
          } else {
           $$sum29$i$i = (($840) + 2)|0;
           $847 = (429100 + ($$sum29$i$i<<2)|0);
           $848 = HEAP32[$847>>2]|0;
           $849 = HEAP32[(429076)>>2]|0;
           $850 = ($848>>>0)<($849>>>0);
           if (!($850)) {
            $$pre$phi$i23$iZ2D = $847;$F4$0$i$i = $848;
            break;
           }
           _abort();
           // unreachable;
          }
         } while(0);
         HEAP32[$$pre$phi$i23$iZ2D>>2] = $724;
         $851 = ((($F4$0$i$i)) + 12|0);
         HEAP32[$851>>2] = $724;
         $$sum27$i$i = (($$sum$i19$i) + 8)|0;
         $852 = (($tbase$255$i) + ($$sum27$i$i)|0);
         HEAP32[$852>>2] = $F4$0$i$i;
         $$sum28$i$i = (($$sum$i19$i) + 12)|0;
         $853 = (($tbase$255$i) + ($$sum28$i$i)|0);
         HEAP32[$853>>2] = $841;
         break;
        }
        $854 = $qsize$0$i$i >>> 8;
        $855 = ($854|0)==(0);
        do {
         if ($855) {
          $I7$0$i$i = 0;
         } else {
          $856 = ($qsize$0$i$i>>>0)>(16777215);
          if ($856) {
           $I7$0$i$i = 31;
           break;
          }
          $857 = (($854) + 1048320)|0;
          $858 = $857 >>> 16;
          $859 = $858 & 8;
          $860 = $854 << $859;
          $861 = (($860) + 520192)|0;
          $862 = $861 >>> 16;
          $863 = $862 & 4;
          $864 = $863 | $859;
          $865 = $860 << $863;
          $866 = (($865) + 245760)|0;
          $867 = $866 >>> 16;
          $868 = $867 & 2;
          $869 = $864 | $868;
          $870 = (14 - ($869))|0;
          $871 = $865 << $868;
          $872 = $871 >>> 15;
          $873 = (($870) + ($872))|0;
          $874 = $873 << 1;
          $875 = (($873) + 7)|0;
          $876 = $qsize$0$i$i >>> $875;
          $877 = $876 & 1;
          $878 = $877 | $874;
          $I7$0$i$i = $878;
         }
        } while(0);
        $879 = (429364 + ($I7$0$i$i<<2)|0);
        $$sum12$i$i = (($$sum$i19$i) + 28)|0;
        $880 = (($tbase$255$i) + ($$sum12$i$i)|0);
        HEAP32[$880>>2] = $I7$0$i$i;
        $$sum13$i$i = (($$sum$i19$i) + 16)|0;
        $881 = (($tbase$255$i) + ($$sum13$i$i)|0);
        $$sum14$i$i = (($$sum$i19$i) + 20)|0;
        $882 = (($tbase$255$i) + ($$sum14$i$i)|0);
        HEAP32[$882>>2] = 0;
        HEAP32[$881>>2] = 0;
        $883 = HEAP32[(429064)>>2]|0;
        $884 = 1 << $I7$0$i$i;
        $885 = $883 & $884;
        $886 = ($885|0)==(0);
        if ($886) {
         $887 = $883 | $884;
         HEAP32[(429064)>>2] = $887;
         HEAP32[$879>>2] = $724;
         $$sum15$i$i = (($$sum$i19$i) + 24)|0;
         $888 = (($tbase$255$i) + ($$sum15$i$i)|0);
         HEAP32[$888>>2] = $879;
         $$sum16$i$i = (($$sum$i19$i) + 12)|0;
         $889 = (($tbase$255$i) + ($$sum16$i$i)|0);
         HEAP32[$889>>2] = $724;
         $$sum17$i$i = (($$sum$i19$i) + 8)|0;
         $890 = (($tbase$255$i) + ($$sum17$i$i)|0);
         HEAP32[$890>>2] = $724;
         break;
        }
        $891 = HEAP32[$879>>2]|0;
        $892 = ((($891)) + 4|0);
        $893 = HEAP32[$892>>2]|0;
        $894 = $893 & -8;
        $895 = ($894|0)==($qsize$0$i$i|0);
        L418: do {
         if ($895) {
          $T$0$lcssa$i25$i = $891;
         } else {
          $896 = ($I7$0$i$i|0)==(31);
          $897 = $I7$0$i$i >>> 1;
          $898 = (25 - ($897))|0;
          $899 = $896 ? 0 : $898;
          $900 = $qsize$0$i$i << $899;
          $K8$051$i$i = $900;$T$050$i$i = $891;
          while(1) {
           $907 = $K8$051$i$i >>> 31;
           $908 = (((($T$050$i$i)) + 16|0) + ($907<<2)|0);
           $903 = HEAP32[$908>>2]|0;
           $909 = ($903|0)==(0|0);
           if ($909) {
            $$lcssa = $908;$T$050$i$i$lcssa = $T$050$i$i;
            break;
           }
           $901 = $K8$051$i$i << 1;
           $902 = ((($903)) + 4|0);
           $904 = HEAP32[$902>>2]|0;
           $905 = $904 & -8;
           $906 = ($905|0)==($qsize$0$i$i|0);
           if ($906) {
            $T$0$lcssa$i25$i = $903;
            break L418;
           } else {
            $K8$051$i$i = $901;$T$050$i$i = $903;
           }
          }
          $910 = HEAP32[(429076)>>2]|0;
          $911 = ($$lcssa>>>0)<($910>>>0);
          if ($911) {
           _abort();
           // unreachable;
          } else {
           HEAP32[$$lcssa>>2] = $724;
           $$sum23$i$i = (($$sum$i19$i) + 24)|0;
           $912 = (($tbase$255$i) + ($$sum23$i$i)|0);
           HEAP32[$912>>2] = $T$050$i$i$lcssa;
           $$sum24$i$i = (($$sum$i19$i) + 12)|0;
           $913 = (($tbase$255$i) + ($$sum24$i$i)|0);
           HEAP32[$913>>2] = $724;
           $$sum25$i$i = (($$sum$i19$i) + 8)|0;
           $914 = (($tbase$255$i) + ($$sum25$i$i)|0);
           HEAP32[$914>>2] = $724;
           break L324;
          }
         }
        } while(0);
        $915 = ((($T$0$lcssa$i25$i)) + 8|0);
        $916 = HEAP32[$915>>2]|0;
        $917 = HEAP32[(429076)>>2]|0;
        $918 = ($916>>>0)>=($917>>>0);
        $not$$i26$i = ($T$0$lcssa$i25$i>>>0)>=($917>>>0);
        $919 = $918 & $not$$i26$i;
        if ($919) {
         $920 = ((($916)) + 12|0);
         HEAP32[$920>>2] = $724;
         HEAP32[$915>>2] = $724;
         $$sum20$i$i = (($$sum$i19$i) + 8)|0;
         $921 = (($tbase$255$i) + ($$sum20$i$i)|0);
         HEAP32[$921>>2] = $916;
         $$sum21$i$i = (($$sum$i19$i) + 12)|0;
         $922 = (($tbase$255$i) + ($$sum21$i$i)|0);
         HEAP32[$922>>2] = $T$0$lcssa$i25$i;
         $$sum22$i$i = (($$sum$i19$i) + 24)|0;
         $923 = (($tbase$255$i) + ($$sum22$i$i)|0);
         HEAP32[$923>>2] = 0;
         break;
        } else {
         _abort();
         // unreachable;
        }
       }
      } while(0);
      $$sum1819$i$i = $711 | 8;
      $924 = (($tbase$255$i) + ($$sum1819$i$i)|0);
      $mem$0 = $924;
      return ($mem$0|0);
     } else {
      $sp$0$i$i$i = (429508);
     }
    }
    while(1) {
     $925 = HEAP32[$sp$0$i$i$i>>2]|0;
     $926 = ($925>>>0)>($635>>>0);
     if (!($926)) {
      $927 = ((($sp$0$i$i$i)) + 4|0);
      $928 = HEAP32[$927>>2]|0;
      $929 = (($925) + ($928)|0);
      $930 = ($929>>>0)>($635>>>0);
      if ($930) {
       $$lcssa215 = $925;$$lcssa216 = $928;$$lcssa217 = $929;
       break;
      }
     }
     $931 = ((($sp$0$i$i$i)) + 8|0);
     $932 = HEAP32[$931>>2]|0;
     $sp$0$i$i$i = $932;
    }
    $$sum$i14$i = (($$lcssa216) + -47)|0;
    $$sum1$i15$i = (($$lcssa216) + -39)|0;
    $933 = (($$lcssa215) + ($$sum1$i15$i)|0);
    $934 = $933;
    $935 = $934 & 7;
    $936 = ($935|0)==(0);
    $937 = (0 - ($934))|0;
    $938 = $937 & 7;
    $939 = $936 ? 0 : $938;
    $$sum2$i16$i = (($$sum$i14$i) + ($939))|0;
    $940 = (($$lcssa215) + ($$sum2$i16$i)|0);
    $941 = ((($635)) + 16|0);
    $942 = ($940>>>0)<($941>>>0);
    $943 = $942 ? $635 : $940;
    $944 = ((($943)) + 8|0);
    $945 = (($tsize$254$i) + -40)|0;
    $946 = ((($tbase$255$i)) + 8|0);
    $947 = $946;
    $948 = $947 & 7;
    $949 = ($948|0)==(0);
    $950 = (0 - ($947))|0;
    $951 = $950 & 7;
    $952 = $949 ? 0 : $951;
    $953 = (($tbase$255$i) + ($952)|0);
    $954 = (($945) - ($952))|0;
    HEAP32[(429084)>>2] = $953;
    HEAP32[(429072)>>2] = $954;
    $955 = $954 | 1;
    $$sum$i$i$i = (($952) + 4)|0;
    $956 = (($tbase$255$i) + ($$sum$i$i$i)|0);
    HEAP32[$956>>2] = $955;
    $$sum2$i$i$i = (($tsize$254$i) + -36)|0;
    $957 = (($tbase$255$i) + ($$sum2$i$i$i)|0);
    HEAP32[$957>>2] = 40;
    $958 = HEAP32[(429548)>>2]|0;
    HEAP32[(429088)>>2] = $958;
    $959 = ((($943)) + 4|0);
    HEAP32[$959>>2] = 27;
    ;HEAP32[$944>>2]=HEAP32[(429508)>>2]|0;HEAP32[$944+4>>2]=HEAP32[(429508)+4>>2]|0;HEAP32[$944+8>>2]=HEAP32[(429508)+8>>2]|0;HEAP32[$944+12>>2]=HEAP32[(429508)+12>>2]|0;
    HEAP32[(429508)>>2] = $tbase$255$i;
    HEAP32[(429512)>>2] = $tsize$254$i;
    HEAP32[(429520)>>2] = 0;
    HEAP32[(429516)>>2] = $944;
    $960 = ((($943)) + 28|0);
    HEAP32[$960>>2] = 7;
    $961 = ((($943)) + 32|0);
    $962 = ($961>>>0)<($$lcssa217>>>0);
    if ($962) {
     $964 = $960;
     while(1) {
      $963 = ((($964)) + 4|0);
      HEAP32[$963>>2] = 7;
      $965 = ((($964)) + 8|0);
      $966 = ($965>>>0)<($$lcssa217>>>0);
      if ($966) {
       $964 = $963;
      } else {
       break;
      }
     }
    }
    $967 = ($943|0)==($635|0);
    if (!($967)) {
     $968 = $943;
     $969 = $635;
     $970 = (($968) - ($969))|0;
     $971 = HEAP32[$959>>2]|0;
     $972 = $971 & -2;
     HEAP32[$959>>2] = $972;
     $973 = $970 | 1;
     $974 = ((($635)) + 4|0);
     HEAP32[$974>>2] = $973;
     HEAP32[$943>>2] = $970;
     $975 = $970 >>> 3;
     $976 = ($970>>>0)<(256);
     if ($976) {
      $977 = $975 << 1;
      $978 = (429100 + ($977<<2)|0);
      $979 = HEAP32[429060>>2]|0;
      $980 = 1 << $975;
      $981 = $979 & $980;
      $982 = ($981|0)==(0);
      if ($982) {
       $983 = $979 | $980;
       HEAP32[429060>>2] = $983;
       $$pre$i$i = (($977) + 2)|0;
       $$pre14$i$i = (429100 + ($$pre$i$i<<2)|0);
       $$pre$phi$i$iZ2D = $$pre14$i$i;$F$0$i$i = $978;
      } else {
       $$sum4$i$i = (($977) + 2)|0;
       $984 = (429100 + ($$sum4$i$i<<2)|0);
       $985 = HEAP32[$984>>2]|0;
       $986 = HEAP32[(429076)>>2]|0;
       $987 = ($985>>>0)<($986>>>0);
       if ($987) {
        _abort();
        // unreachable;
       } else {
        $$pre$phi$i$iZ2D = $984;$F$0$i$i = $985;
       }
      }
      HEAP32[$$pre$phi$i$iZ2D>>2] = $635;
      $988 = ((($F$0$i$i)) + 12|0);
      HEAP32[$988>>2] = $635;
      $989 = ((($635)) + 8|0);
      HEAP32[$989>>2] = $F$0$i$i;
      $990 = ((($635)) + 12|0);
      HEAP32[$990>>2] = $978;
      break;
     }
     $991 = $970 >>> 8;
     $992 = ($991|0)==(0);
     if ($992) {
      $I1$0$i$i = 0;
     } else {
      $993 = ($970>>>0)>(16777215);
      if ($993) {
       $I1$0$i$i = 31;
      } else {
       $994 = (($991) + 1048320)|0;
       $995 = $994 >>> 16;
       $996 = $995 & 8;
       $997 = $991 << $996;
       $998 = (($997) + 520192)|0;
       $999 = $998 >>> 16;
       $1000 = $999 & 4;
       $1001 = $1000 | $996;
       $1002 = $997 << $1000;
       $1003 = (($1002) + 245760)|0;
       $1004 = $1003 >>> 16;
       $1005 = $1004 & 2;
       $1006 = $1001 | $1005;
       $1007 = (14 - ($1006))|0;
       $1008 = $1002 << $1005;
       $1009 = $1008 >>> 15;
       $1010 = (($1007) + ($1009))|0;
       $1011 = $1010 << 1;
       $1012 = (($1010) + 7)|0;
       $1013 = $970 >>> $1012;
       $1014 = $1013 & 1;
       $1015 = $1014 | $1011;
       $I1$0$i$i = $1015;
      }
     }
     $1016 = (429364 + ($I1$0$i$i<<2)|0);
     $1017 = ((($635)) + 28|0);
     HEAP32[$1017>>2] = $I1$0$i$i;
     $1018 = ((($635)) + 20|0);
     HEAP32[$1018>>2] = 0;
     HEAP32[$941>>2] = 0;
     $1019 = HEAP32[(429064)>>2]|0;
     $1020 = 1 << $I1$0$i$i;
     $1021 = $1019 & $1020;
     $1022 = ($1021|0)==(0);
     if ($1022) {
      $1023 = $1019 | $1020;
      HEAP32[(429064)>>2] = $1023;
      HEAP32[$1016>>2] = $635;
      $1024 = ((($635)) + 24|0);
      HEAP32[$1024>>2] = $1016;
      $1025 = ((($635)) + 12|0);
      HEAP32[$1025>>2] = $635;
      $1026 = ((($635)) + 8|0);
      HEAP32[$1026>>2] = $635;
      break;
     }
     $1027 = HEAP32[$1016>>2]|0;
     $1028 = ((($1027)) + 4|0);
     $1029 = HEAP32[$1028>>2]|0;
     $1030 = $1029 & -8;
     $1031 = ($1030|0)==($970|0);
     L459: do {
      if ($1031) {
       $T$0$lcssa$i$i = $1027;
      } else {
       $1032 = ($I1$0$i$i|0)==(31);
       $1033 = $I1$0$i$i >>> 1;
       $1034 = (25 - ($1033))|0;
       $1035 = $1032 ? 0 : $1034;
       $1036 = $970 << $1035;
       $K2$07$i$i = $1036;$T$06$i$i = $1027;
       while(1) {
        $1043 = $K2$07$i$i >>> 31;
        $1044 = (((($T$06$i$i)) + 16|0) + ($1043<<2)|0);
        $1039 = HEAP32[$1044>>2]|0;
        $1045 = ($1039|0)==(0|0);
        if ($1045) {
         $$lcssa211 = $1044;$T$06$i$i$lcssa = $T$06$i$i;
         break;
        }
        $1037 = $K2$07$i$i << 1;
        $1038 = ((($1039)) + 4|0);
        $1040 = HEAP32[$1038>>2]|0;
        $1041 = $1040 & -8;
        $1042 = ($1041|0)==($970|0);
        if ($1042) {
         $T$0$lcssa$i$i = $1039;
         break L459;
        } else {
         $K2$07$i$i = $1037;$T$06$i$i = $1039;
        }
       }
       $1046 = HEAP32[(429076)>>2]|0;
       $1047 = ($$lcssa211>>>0)<($1046>>>0);
       if ($1047) {
        _abort();
        // unreachable;
       } else {
        HEAP32[$$lcssa211>>2] = $635;
        $1048 = ((($635)) + 24|0);
        HEAP32[$1048>>2] = $T$06$i$i$lcssa;
        $1049 = ((($635)) + 12|0);
        HEAP32[$1049>>2] = $635;
        $1050 = ((($635)) + 8|0);
        HEAP32[$1050>>2] = $635;
        break L299;
       }
      }
     } while(0);
     $1051 = ((($T$0$lcssa$i$i)) + 8|0);
     $1052 = HEAP32[$1051>>2]|0;
     $1053 = HEAP32[(429076)>>2]|0;
     $1054 = ($1052>>>0)>=($1053>>>0);
     $not$$i$i = ($T$0$lcssa$i$i>>>0)>=($1053>>>0);
     $1055 = $1054 & $not$$i$i;
     if ($1055) {
      $1056 = ((($1052)) + 12|0);
      HEAP32[$1056>>2] = $635;
      HEAP32[$1051>>2] = $635;
      $1057 = ((($635)) + 8|0);
      HEAP32[$1057>>2] = $1052;
      $1058 = ((($635)) + 12|0);
      HEAP32[$1058>>2] = $T$0$lcssa$i$i;
      $1059 = ((($635)) + 24|0);
      HEAP32[$1059>>2] = 0;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   }
  } while(0);
  $1060 = HEAP32[(429072)>>2]|0;
  $1061 = ($1060>>>0)>($nb$0>>>0);
  if ($1061) {
   $1062 = (($1060) - ($nb$0))|0;
   HEAP32[(429072)>>2] = $1062;
   $1063 = HEAP32[(429084)>>2]|0;
   $1064 = (($1063) + ($nb$0)|0);
   HEAP32[(429084)>>2] = $1064;
   $1065 = $1062 | 1;
   $$sum$i32 = (($nb$0) + 4)|0;
   $1066 = (($1063) + ($$sum$i32)|0);
   HEAP32[$1066>>2] = $1065;
   $1067 = $nb$0 | 3;
   $1068 = ((($1063)) + 4|0);
   HEAP32[$1068>>2] = $1067;
   $1069 = ((($1063)) + 8|0);
   $mem$0 = $1069;
   return ($mem$0|0);
  }
 }
 $1070 = (___errno_location()|0);
 HEAP32[$1070>>2] = 12;
 $mem$0 = 0;
 return ($mem$0|0);
}
function _free($mem) {
 $mem = $mem|0;
 var $$lcssa = 0, $$pre = 0, $$pre$phi59Z2D = 0, $$pre$phi61Z2D = 0, $$pre$phiZ2D = 0, $$pre57 = 0, $$pre58 = 0, $$pre60 = 0, $$sum = 0, $$sum11 = 0, $$sum12 = 0, $$sum13 = 0, $$sum14 = 0, $$sum1718 = 0, $$sum19 = 0, $$sum2 = 0, $$sum20 = 0, $$sum22 = 0, $$sum23 = 0, $$sum24 = 0;
 var $$sum25 = 0, $$sum26 = 0, $$sum27 = 0, $$sum28 = 0, $$sum29 = 0, $$sum3 = 0, $$sum30 = 0, $$sum31 = 0, $$sum5 = 0, $$sum67 = 0, $$sum8 = 0, $$sum9 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0;
 var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0;
 var $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0;
 var $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0;
 var $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0;
 var $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0;
 var $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0;
 var $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0;
 var $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0;
 var $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0;
 var $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0;
 var $321 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $F16$0 = 0, $I18$0 = 0, $K19$052 = 0, $R$0 = 0, $R$0$lcssa = 0, $R$1 = 0;
 var $R7$0 = 0, $R7$0$lcssa = 0, $R7$1 = 0, $RP$0 = 0, $RP$0$lcssa = 0, $RP9$0 = 0, $RP9$0$lcssa = 0, $T$0$lcssa = 0, $T$051 = 0, $T$051$lcssa = 0, $cond = 0, $cond47 = 0, $not$ = 0, $p$0 = 0, $psize$0 = 0, $psize$1 = 0, $sp$0$i = 0, $sp$0$in$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($mem|0)==(0|0);
 if ($0) {
  return;
 }
 $1 = ((($mem)) + -8|0);
 $2 = HEAP32[(429076)>>2]|0;
 $3 = ($1>>>0)<($2>>>0);
 if ($3) {
  _abort();
  // unreachable;
 }
 $4 = ((($mem)) + -4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 & 3;
 $7 = ($6|0)==(1);
 if ($7) {
  _abort();
  // unreachable;
 }
 $8 = $5 & -8;
 $$sum = (($8) + -8)|0;
 $9 = (($mem) + ($$sum)|0);
 $10 = $5 & 1;
 $11 = ($10|0)==(0);
 do {
  if ($11) {
   $12 = HEAP32[$1>>2]|0;
   $13 = ($6|0)==(0);
   if ($13) {
    return;
   }
   $$sum2 = (-8 - ($12))|0;
   $14 = (($mem) + ($$sum2)|0);
   $15 = (($12) + ($8))|0;
   $16 = ($14>>>0)<($2>>>0);
   if ($16) {
    _abort();
    // unreachable;
   }
   $17 = HEAP32[(429080)>>2]|0;
   $18 = ($14|0)==($17|0);
   if ($18) {
    $$sum3 = (($8) + -4)|0;
    $103 = (($mem) + ($$sum3)|0);
    $104 = HEAP32[$103>>2]|0;
    $105 = $104 & 3;
    $106 = ($105|0)==(3);
    if (!($106)) {
     $p$0 = $14;$psize$0 = $15;
     break;
    }
    HEAP32[(429068)>>2] = $15;
    $107 = $104 & -2;
    HEAP32[$103>>2] = $107;
    $108 = $15 | 1;
    $$sum20 = (($$sum2) + 4)|0;
    $109 = (($mem) + ($$sum20)|0);
    HEAP32[$109>>2] = $108;
    HEAP32[$9>>2] = $15;
    return;
   }
   $19 = $12 >>> 3;
   $20 = ($12>>>0)<(256);
   if ($20) {
    $$sum30 = (($$sum2) + 8)|0;
    $21 = (($mem) + ($$sum30)|0);
    $22 = HEAP32[$21>>2]|0;
    $$sum31 = (($$sum2) + 12)|0;
    $23 = (($mem) + ($$sum31)|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = $19 << 1;
    $26 = (429100 + ($25<<2)|0);
    $27 = ($22|0)==($26|0);
    if (!($27)) {
     $28 = ($22>>>0)<($2>>>0);
     if ($28) {
      _abort();
      // unreachable;
     }
     $29 = ((($22)) + 12|0);
     $30 = HEAP32[$29>>2]|0;
     $31 = ($30|0)==($14|0);
     if (!($31)) {
      _abort();
      // unreachable;
     }
    }
    $32 = ($24|0)==($22|0);
    if ($32) {
     $33 = 1 << $19;
     $34 = $33 ^ -1;
     $35 = HEAP32[429060>>2]|0;
     $36 = $35 & $34;
     HEAP32[429060>>2] = $36;
     $p$0 = $14;$psize$0 = $15;
     break;
    }
    $37 = ($24|0)==($26|0);
    if ($37) {
     $$pre60 = ((($24)) + 8|0);
     $$pre$phi61Z2D = $$pre60;
    } else {
     $38 = ($24>>>0)<($2>>>0);
     if ($38) {
      _abort();
      // unreachable;
     }
     $39 = ((($24)) + 8|0);
     $40 = HEAP32[$39>>2]|0;
     $41 = ($40|0)==($14|0);
     if ($41) {
      $$pre$phi61Z2D = $39;
     } else {
      _abort();
      // unreachable;
     }
    }
    $42 = ((($22)) + 12|0);
    HEAP32[$42>>2] = $24;
    HEAP32[$$pre$phi61Z2D>>2] = $22;
    $p$0 = $14;$psize$0 = $15;
    break;
   }
   $$sum22 = (($$sum2) + 24)|0;
   $43 = (($mem) + ($$sum22)|0);
   $44 = HEAP32[$43>>2]|0;
   $$sum23 = (($$sum2) + 12)|0;
   $45 = (($mem) + ($$sum23)|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = ($46|0)==($14|0);
   do {
    if ($47) {
     $$sum25 = (($$sum2) + 20)|0;
     $57 = (($mem) + ($$sum25)|0);
     $58 = HEAP32[$57>>2]|0;
     $59 = ($58|0)==(0|0);
     if ($59) {
      $$sum24 = (($$sum2) + 16)|0;
      $60 = (($mem) + ($$sum24)|0);
      $61 = HEAP32[$60>>2]|0;
      $62 = ($61|0)==(0|0);
      if ($62) {
       $R$1 = 0;
       break;
      } else {
       $R$0 = $61;$RP$0 = $60;
      }
     } else {
      $R$0 = $58;$RP$0 = $57;
     }
     while(1) {
      $63 = ((($R$0)) + 20|0);
      $64 = HEAP32[$63>>2]|0;
      $65 = ($64|0)==(0|0);
      if (!($65)) {
       $R$0 = $64;$RP$0 = $63;
       continue;
      }
      $66 = ((($R$0)) + 16|0);
      $67 = HEAP32[$66>>2]|0;
      $68 = ($67|0)==(0|0);
      if ($68) {
       $R$0$lcssa = $R$0;$RP$0$lcssa = $RP$0;
       break;
      } else {
       $R$0 = $67;$RP$0 = $66;
      }
     }
     $69 = ($RP$0$lcssa>>>0)<($2>>>0);
     if ($69) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$0$lcssa>>2] = 0;
      $R$1 = $R$0$lcssa;
      break;
     }
    } else {
     $$sum29 = (($$sum2) + 8)|0;
     $48 = (($mem) + ($$sum29)|0);
     $49 = HEAP32[$48>>2]|0;
     $50 = ($49>>>0)<($2>>>0);
     if ($50) {
      _abort();
      // unreachable;
     }
     $51 = ((($49)) + 12|0);
     $52 = HEAP32[$51>>2]|0;
     $53 = ($52|0)==($14|0);
     if (!($53)) {
      _abort();
      // unreachable;
     }
     $54 = ((($46)) + 8|0);
     $55 = HEAP32[$54>>2]|0;
     $56 = ($55|0)==($14|0);
     if ($56) {
      HEAP32[$51>>2] = $46;
      HEAP32[$54>>2] = $49;
      $R$1 = $46;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $70 = ($44|0)==(0|0);
   if ($70) {
    $p$0 = $14;$psize$0 = $15;
   } else {
    $$sum26 = (($$sum2) + 28)|0;
    $71 = (($mem) + ($$sum26)|0);
    $72 = HEAP32[$71>>2]|0;
    $73 = (429364 + ($72<<2)|0);
    $74 = HEAP32[$73>>2]|0;
    $75 = ($14|0)==($74|0);
    if ($75) {
     HEAP32[$73>>2] = $R$1;
     $cond = ($R$1|0)==(0|0);
     if ($cond) {
      $76 = 1 << $72;
      $77 = $76 ^ -1;
      $78 = HEAP32[(429064)>>2]|0;
      $79 = $78 & $77;
      HEAP32[(429064)>>2] = $79;
      $p$0 = $14;$psize$0 = $15;
      break;
     }
    } else {
     $80 = HEAP32[(429076)>>2]|0;
     $81 = ($44>>>0)<($80>>>0);
     if ($81) {
      _abort();
      // unreachable;
     }
     $82 = ((($44)) + 16|0);
     $83 = HEAP32[$82>>2]|0;
     $84 = ($83|0)==($14|0);
     if ($84) {
      HEAP32[$82>>2] = $R$1;
     } else {
      $85 = ((($44)) + 20|0);
      HEAP32[$85>>2] = $R$1;
     }
     $86 = ($R$1|0)==(0|0);
     if ($86) {
      $p$0 = $14;$psize$0 = $15;
      break;
     }
    }
    $87 = HEAP32[(429076)>>2]|0;
    $88 = ($R$1>>>0)<($87>>>0);
    if ($88) {
     _abort();
     // unreachable;
    }
    $89 = ((($R$1)) + 24|0);
    HEAP32[$89>>2] = $44;
    $$sum27 = (($$sum2) + 16)|0;
    $90 = (($mem) + ($$sum27)|0);
    $91 = HEAP32[$90>>2]|0;
    $92 = ($91|0)==(0|0);
    do {
     if (!($92)) {
      $93 = ($91>>>0)<($87>>>0);
      if ($93) {
       _abort();
       // unreachable;
      } else {
       $94 = ((($R$1)) + 16|0);
       HEAP32[$94>>2] = $91;
       $95 = ((($91)) + 24|0);
       HEAP32[$95>>2] = $R$1;
       break;
      }
     }
    } while(0);
    $$sum28 = (($$sum2) + 20)|0;
    $96 = (($mem) + ($$sum28)|0);
    $97 = HEAP32[$96>>2]|0;
    $98 = ($97|0)==(0|0);
    if ($98) {
     $p$0 = $14;$psize$0 = $15;
    } else {
     $99 = HEAP32[(429076)>>2]|0;
     $100 = ($97>>>0)<($99>>>0);
     if ($100) {
      _abort();
      // unreachable;
     } else {
      $101 = ((($R$1)) + 20|0);
      HEAP32[$101>>2] = $97;
      $102 = ((($97)) + 24|0);
      HEAP32[$102>>2] = $R$1;
      $p$0 = $14;$psize$0 = $15;
      break;
     }
    }
   }
  } else {
   $p$0 = $1;$psize$0 = $8;
  }
 } while(0);
 $110 = ($p$0>>>0)<($9>>>0);
 if (!($110)) {
  _abort();
  // unreachable;
 }
 $$sum19 = (($8) + -4)|0;
 $111 = (($mem) + ($$sum19)|0);
 $112 = HEAP32[$111>>2]|0;
 $113 = $112 & 1;
 $114 = ($113|0)==(0);
 if ($114) {
  _abort();
  // unreachable;
 }
 $115 = $112 & 2;
 $116 = ($115|0)==(0);
 if ($116) {
  $117 = HEAP32[(429084)>>2]|0;
  $118 = ($9|0)==($117|0);
  if ($118) {
   $119 = HEAP32[(429072)>>2]|0;
   $120 = (($119) + ($psize$0))|0;
   HEAP32[(429072)>>2] = $120;
   HEAP32[(429084)>>2] = $p$0;
   $121 = $120 | 1;
   $122 = ((($p$0)) + 4|0);
   HEAP32[$122>>2] = $121;
   $123 = HEAP32[(429080)>>2]|0;
   $124 = ($p$0|0)==($123|0);
   if (!($124)) {
    return;
   }
   HEAP32[(429080)>>2] = 0;
   HEAP32[(429068)>>2] = 0;
   return;
  }
  $125 = HEAP32[(429080)>>2]|0;
  $126 = ($9|0)==($125|0);
  if ($126) {
   $127 = HEAP32[(429068)>>2]|0;
   $128 = (($127) + ($psize$0))|0;
   HEAP32[(429068)>>2] = $128;
   HEAP32[(429080)>>2] = $p$0;
   $129 = $128 | 1;
   $130 = ((($p$0)) + 4|0);
   HEAP32[$130>>2] = $129;
   $131 = (($p$0) + ($128)|0);
   HEAP32[$131>>2] = $128;
   return;
  }
  $132 = $112 & -8;
  $133 = (($132) + ($psize$0))|0;
  $134 = $112 >>> 3;
  $135 = ($112>>>0)<(256);
  do {
   if ($135) {
    $136 = (($mem) + ($8)|0);
    $137 = HEAP32[$136>>2]|0;
    $$sum1718 = $8 | 4;
    $138 = (($mem) + ($$sum1718)|0);
    $139 = HEAP32[$138>>2]|0;
    $140 = $134 << 1;
    $141 = (429100 + ($140<<2)|0);
    $142 = ($137|0)==($141|0);
    if (!($142)) {
     $143 = HEAP32[(429076)>>2]|0;
     $144 = ($137>>>0)<($143>>>0);
     if ($144) {
      _abort();
      // unreachable;
     }
     $145 = ((($137)) + 12|0);
     $146 = HEAP32[$145>>2]|0;
     $147 = ($146|0)==($9|0);
     if (!($147)) {
      _abort();
      // unreachable;
     }
    }
    $148 = ($139|0)==($137|0);
    if ($148) {
     $149 = 1 << $134;
     $150 = $149 ^ -1;
     $151 = HEAP32[429060>>2]|0;
     $152 = $151 & $150;
     HEAP32[429060>>2] = $152;
     break;
    }
    $153 = ($139|0)==($141|0);
    if ($153) {
     $$pre58 = ((($139)) + 8|0);
     $$pre$phi59Z2D = $$pre58;
    } else {
     $154 = HEAP32[(429076)>>2]|0;
     $155 = ($139>>>0)<($154>>>0);
     if ($155) {
      _abort();
      // unreachable;
     }
     $156 = ((($139)) + 8|0);
     $157 = HEAP32[$156>>2]|0;
     $158 = ($157|0)==($9|0);
     if ($158) {
      $$pre$phi59Z2D = $156;
     } else {
      _abort();
      // unreachable;
     }
    }
    $159 = ((($137)) + 12|0);
    HEAP32[$159>>2] = $139;
    HEAP32[$$pre$phi59Z2D>>2] = $137;
   } else {
    $$sum5 = (($8) + 16)|0;
    $160 = (($mem) + ($$sum5)|0);
    $161 = HEAP32[$160>>2]|0;
    $$sum67 = $8 | 4;
    $162 = (($mem) + ($$sum67)|0);
    $163 = HEAP32[$162>>2]|0;
    $164 = ($163|0)==($9|0);
    do {
     if ($164) {
      $$sum9 = (($8) + 12)|0;
      $175 = (($mem) + ($$sum9)|0);
      $176 = HEAP32[$175>>2]|0;
      $177 = ($176|0)==(0|0);
      if ($177) {
       $$sum8 = (($8) + 8)|0;
       $178 = (($mem) + ($$sum8)|0);
       $179 = HEAP32[$178>>2]|0;
       $180 = ($179|0)==(0|0);
       if ($180) {
        $R7$1 = 0;
        break;
       } else {
        $R7$0 = $179;$RP9$0 = $178;
       }
      } else {
       $R7$0 = $176;$RP9$0 = $175;
      }
      while(1) {
       $181 = ((($R7$0)) + 20|0);
       $182 = HEAP32[$181>>2]|0;
       $183 = ($182|0)==(0|0);
       if (!($183)) {
        $R7$0 = $182;$RP9$0 = $181;
        continue;
       }
       $184 = ((($R7$0)) + 16|0);
       $185 = HEAP32[$184>>2]|0;
       $186 = ($185|0)==(0|0);
       if ($186) {
        $R7$0$lcssa = $R7$0;$RP9$0$lcssa = $RP9$0;
        break;
       } else {
        $R7$0 = $185;$RP9$0 = $184;
       }
      }
      $187 = HEAP32[(429076)>>2]|0;
      $188 = ($RP9$0$lcssa>>>0)<($187>>>0);
      if ($188) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$RP9$0$lcssa>>2] = 0;
       $R7$1 = $R7$0$lcssa;
       break;
      }
     } else {
      $165 = (($mem) + ($8)|0);
      $166 = HEAP32[$165>>2]|0;
      $167 = HEAP32[(429076)>>2]|0;
      $168 = ($166>>>0)<($167>>>0);
      if ($168) {
       _abort();
       // unreachable;
      }
      $169 = ((($166)) + 12|0);
      $170 = HEAP32[$169>>2]|0;
      $171 = ($170|0)==($9|0);
      if (!($171)) {
       _abort();
       // unreachable;
      }
      $172 = ((($163)) + 8|0);
      $173 = HEAP32[$172>>2]|0;
      $174 = ($173|0)==($9|0);
      if ($174) {
       HEAP32[$169>>2] = $163;
       HEAP32[$172>>2] = $166;
       $R7$1 = $163;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $189 = ($161|0)==(0|0);
    if (!($189)) {
     $$sum12 = (($8) + 20)|0;
     $190 = (($mem) + ($$sum12)|0);
     $191 = HEAP32[$190>>2]|0;
     $192 = (429364 + ($191<<2)|0);
     $193 = HEAP32[$192>>2]|0;
     $194 = ($9|0)==($193|0);
     if ($194) {
      HEAP32[$192>>2] = $R7$1;
      $cond47 = ($R7$1|0)==(0|0);
      if ($cond47) {
       $195 = 1 << $191;
       $196 = $195 ^ -1;
       $197 = HEAP32[(429064)>>2]|0;
       $198 = $197 & $196;
       HEAP32[(429064)>>2] = $198;
       break;
      }
     } else {
      $199 = HEAP32[(429076)>>2]|0;
      $200 = ($161>>>0)<($199>>>0);
      if ($200) {
       _abort();
       // unreachable;
      }
      $201 = ((($161)) + 16|0);
      $202 = HEAP32[$201>>2]|0;
      $203 = ($202|0)==($9|0);
      if ($203) {
       HEAP32[$201>>2] = $R7$1;
      } else {
       $204 = ((($161)) + 20|0);
       HEAP32[$204>>2] = $R7$1;
      }
      $205 = ($R7$1|0)==(0|0);
      if ($205) {
       break;
      }
     }
     $206 = HEAP32[(429076)>>2]|0;
     $207 = ($R7$1>>>0)<($206>>>0);
     if ($207) {
      _abort();
      // unreachable;
     }
     $208 = ((($R7$1)) + 24|0);
     HEAP32[$208>>2] = $161;
     $$sum13 = (($8) + 8)|0;
     $209 = (($mem) + ($$sum13)|0);
     $210 = HEAP32[$209>>2]|0;
     $211 = ($210|0)==(0|0);
     do {
      if (!($211)) {
       $212 = ($210>>>0)<($206>>>0);
       if ($212) {
        _abort();
        // unreachable;
       } else {
        $213 = ((($R7$1)) + 16|0);
        HEAP32[$213>>2] = $210;
        $214 = ((($210)) + 24|0);
        HEAP32[$214>>2] = $R7$1;
        break;
       }
      }
     } while(0);
     $$sum14 = (($8) + 12)|0;
     $215 = (($mem) + ($$sum14)|0);
     $216 = HEAP32[$215>>2]|0;
     $217 = ($216|0)==(0|0);
     if (!($217)) {
      $218 = HEAP32[(429076)>>2]|0;
      $219 = ($216>>>0)<($218>>>0);
      if ($219) {
       _abort();
       // unreachable;
      } else {
       $220 = ((($R7$1)) + 20|0);
       HEAP32[$220>>2] = $216;
       $221 = ((($216)) + 24|0);
       HEAP32[$221>>2] = $R7$1;
       break;
      }
     }
    }
   }
  } while(0);
  $222 = $133 | 1;
  $223 = ((($p$0)) + 4|0);
  HEAP32[$223>>2] = $222;
  $224 = (($p$0) + ($133)|0);
  HEAP32[$224>>2] = $133;
  $225 = HEAP32[(429080)>>2]|0;
  $226 = ($p$0|0)==($225|0);
  if ($226) {
   HEAP32[(429068)>>2] = $133;
   return;
  } else {
   $psize$1 = $133;
  }
 } else {
  $227 = $112 & -2;
  HEAP32[$111>>2] = $227;
  $228 = $psize$0 | 1;
  $229 = ((($p$0)) + 4|0);
  HEAP32[$229>>2] = $228;
  $230 = (($p$0) + ($psize$0)|0);
  HEAP32[$230>>2] = $psize$0;
  $psize$1 = $psize$0;
 }
 $231 = $psize$1 >>> 3;
 $232 = ($psize$1>>>0)<(256);
 if ($232) {
  $233 = $231 << 1;
  $234 = (429100 + ($233<<2)|0);
  $235 = HEAP32[429060>>2]|0;
  $236 = 1 << $231;
  $237 = $235 & $236;
  $238 = ($237|0)==(0);
  if ($238) {
   $239 = $235 | $236;
   HEAP32[429060>>2] = $239;
   $$pre = (($233) + 2)|0;
   $$pre57 = (429100 + ($$pre<<2)|0);
   $$pre$phiZ2D = $$pre57;$F16$0 = $234;
  } else {
   $$sum11 = (($233) + 2)|0;
   $240 = (429100 + ($$sum11<<2)|0);
   $241 = HEAP32[$240>>2]|0;
   $242 = HEAP32[(429076)>>2]|0;
   $243 = ($241>>>0)<($242>>>0);
   if ($243) {
    _abort();
    // unreachable;
   } else {
    $$pre$phiZ2D = $240;$F16$0 = $241;
   }
  }
  HEAP32[$$pre$phiZ2D>>2] = $p$0;
  $244 = ((($F16$0)) + 12|0);
  HEAP32[$244>>2] = $p$0;
  $245 = ((($p$0)) + 8|0);
  HEAP32[$245>>2] = $F16$0;
  $246 = ((($p$0)) + 12|0);
  HEAP32[$246>>2] = $234;
  return;
 }
 $247 = $psize$1 >>> 8;
 $248 = ($247|0)==(0);
 if ($248) {
  $I18$0 = 0;
 } else {
  $249 = ($psize$1>>>0)>(16777215);
  if ($249) {
   $I18$0 = 31;
  } else {
   $250 = (($247) + 1048320)|0;
   $251 = $250 >>> 16;
   $252 = $251 & 8;
   $253 = $247 << $252;
   $254 = (($253) + 520192)|0;
   $255 = $254 >>> 16;
   $256 = $255 & 4;
   $257 = $256 | $252;
   $258 = $253 << $256;
   $259 = (($258) + 245760)|0;
   $260 = $259 >>> 16;
   $261 = $260 & 2;
   $262 = $257 | $261;
   $263 = (14 - ($262))|0;
   $264 = $258 << $261;
   $265 = $264 >>> 15;
   $266 = (($263) + ($265))|0;
   $267 = $266 << 1;
   $268 = (($266) + 7)|0;
   $269 = $psize$1 >>> $268;
   $270 = $269 & 1;
   $271 = $270 | $267;
   $I18$0 = $271;
  }
 }
 $272 = (429364 + ($I18$0<<2)|0);
 $273 = ((($p$0)) + 28|0);
 HEAP32[$273>>2] = $I18$0;
 $274 = ((($p$0)) + 16|0);
 $275 = ((($p$0)) + 20|0);
 HEAP32[$275>>2] = 0;
 HEAP32[$274>>2] = 0;
 $276 = HEAP32[(429064)>>2]|0;
 $277 = 1 << $I18$0;
 $278 = $276 & $277;
 $279 = ($278|0)==(0);
 L199: do {
  if ($279) {
   $280 = $276 | $277;
   HEAP32[(429064)>>2] = $280;
   HEAP32[$272>>2] = $p$0;
   $281 = ((($p$0)) + 24|0);
   HEAP32[$281>>2] = $272;
   $282 = ((($p$0)) + 12|0);
   HEAP32[$282>>2] = $p$0;
   $283 = ((($p$0)) + 8|0);
   HEAP32[$283>>2] = $p$0;
  } else {
   $284 = HEAP32[$272>>2]|0;
   $285 = ((($284)) + 4|0);
   $286 = HEAP32[$285>>2]|0;
   $287 = $286 & -8;
   $288 = ($287|0)==($psize$1|0);
   L202: do {
    if ($288) {
     $T$0$lcssa = $284;
    } else {
     $289 = ($I18$0|0)==(31);
     $290 = $I18$0 >>> 1;
     $291 = (25 - ($290))|0;
     $292 = $289 ? 0 : $291;
     $293 = $psize$1 << $292;
     $K19$052 = $293;$T$051 = $284;
     while(1) {
      $300 = $K19$052 >>> 31;
      $301 = (((($T$051)) + 16|0) + ($300<<2)|0);
      $296 = HEAP32[$301>>2]|0;
      $302 = ($296|0)==(0|0);
      if ($302) {
       $$lcssa = $301;$T$051$lcssa = $T$051;
       break;
      }
      $294 = $K19$052 << 1;
      $295 = ((($296)) + 4|0);
      $297 = HEAP32[$295>>2]|0;
      $298 = $297 & -8;
      $299 = ($298|0)==($psize$1|0);
      if ($299) {
       $T$0$lcssa = $296;
       break L202;
      } else {
       $K19$052 = $294;$T$051 = $296;
      }
     }
     $303 = HEAP32[(429076)>>2]|0;
     $304 = ($$lcssa>>>0)<($303>>>0);
     if ($304) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$$lcssa>>2] = $p$0;
      $305 = ((($p$0)) + 24|0);
      HEAP32[$305>>2] = $T$051$lcssa;
      $306 = ((($p$0)) + 12|0);
      HEAP32[$306>>2] = $p$0;
      $307 = ((($p$0)) + 8|0);
      HEAP32[$307>>2] = $p$0;
      break L199;
     }
    }
   } while(0);
   $308 = ((($T$0$lcssa)) + 8|0);
   $309 = HEAP32[$308>>2]|0;
   $310 = HEAP32[(429076)>>2]|0;
   $311 = ($309>>>0)>=($310>>>0);
   $not$ = ($T$0$lcssa>>>0)>=($310>>>0);
   $312 = $311 & $not$;
   if ($312) {
    $313 = ((($309)) + 12|0);
    HEAP32[$313>>2] = $p$0;
    HEAP32[$308>>2] = $p$0;
    $314 = ((($p$0)) + 8|0);
    HEAP32[$314>>2] = $309;
    $315 = ((($p$0)) + 12|0);
    HEAP32[$315>>2] = $T$0$lcssa;
    $316 = ((($p$0)) + 24|0);
    HEAP32[$316>>2] = 0;
    break;
   } else {
    _abort();
    // unreachable;
   }
  }
 } while(0);
 $317 = HEAP32[(429092)>>2]|0;
 $318 = (($317) + -1)|0;
 HEAP32[(429092)>>2] = $318;
 $319 = ($318|0)==(0);
 if ($319) {
  $sp$0$in$i = (429516);
 } else {
  return;
 }
 while(1) {
  $sp$0$i = HEAP32[$sp$0$in$i>>2]|0;
  $320 = ($sp$0$i|0)==(0|0);
  $321 = ((($sp$0$i)) + 8|0);
  if ($320) {
   break;
  } else {
   $sp$0$in$i = $321;
  }
 }
 HEAP32[(429092)>>2] = -1;
 return;
}
function runPostSets() {
}
function _i64Subtract(a, b, c, d) {
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a - c)>>>0;
    h = (b - d)>>>0;
    h = (b - d - (((c>>>0) > (a>>>0))|0))>>>0; // Borrow one from high word to low word on underflow.
    return ((tempRet0 = h,l|0)|0);
}
function _memset(ptr, value, num) {
    ptr = ptr|0; value = value|0; num = num|0;
    var stop = 0, value4 = 0, stop4 = 0, unaligned = 0;
    stop = (ptr + num)|0;
    if ((num|0) >= 20) {
      // This is unaligned, but quite large, so work hard to get to aligned settings
      value = value & 0xff;
      unaligned = ptr & 3;
      value4 = value | (value << 8) | (value << 16) | (value << 24);
      stop4 = stop & ~3;
      if (unaligned) {
        unaligned = (ptr + 4 - unaligned)|0;
        while ((ptr|0) < (unaligned|0)) { // no need to check for stop, since we have large num
          HEAP8[((ptr)>>0)]=value;
          ptr = (ptr+1)|0;
        }
      }
      while ((ptr|0) < (stop4|0)) {
        HEAP32[((ptr)>>2)]=value4;
        ptr = (ptr+4)|0;
      }
    }
    while ((ptr|0) < (stop|0)) {
      HEAP8[((ptr)>>0)]=value;
      ptr = (ptr+1)|0;
    }
    return (ptr-num)|0;
}
function _i64Add(a, b, c, d) {
    /*
      x = a + b*2^32
      y = c + d*2^32
      result = l + h*2^32
    */
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a + c)>>>0;
    h = (b + d + (((l>>>0) < (a>>>0))|0))>>>0; // Add carry from low word to high word on overflow.
    return ((tempRet0 = h,l|0)|0);
}
function _bitshift64Lshr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >>> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = 0;
    return (high >>> (bits - 32))|0;
}
function _memcpy(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    if ((num|0) >= 4096) return _emscripten_memcpy_big(dest|0, src|0, num|0)|0;
    ret = dest|0;
    if ((dest&3) == (src&3)) {
      while (dest & 3) {
        if ((num|0) == 0) return ret|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
        dest = (dest+1)|0;
        src = (src+1)|0;
        num = (num-1)|0;
      }
      while ((num|0) >= 4) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
        num = (num-4)|0;
      }
    }
    while ((num|0) > 0) {
      HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      dest = (dest+1)|0;
      src = (src+1)|0;
      num = (num-1)|0;
    }
    return ret|0;
}
function _bitshift64Shl(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = (high << bits) | ((low&(ander << (32 - bits))) >>> (32 - bits));
      return low << bits;
    }
    tempRet0 = low << (bits - 32);
    return 0;
}
function _bitshift64Ashr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = (high|0) < 0 ? -1 : 0;
    return (high >> (bits - 32))|0;
  }
function _llvm_cttz_i32(x) {
    x = x|0;
    var ret = 0;
    ret = ((HEAP8[(((cttz_i8)+(x & 0xff))>>0)])|0);
    if ((ret|0) < 8) return ret|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 8)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 8)|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 16)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 16)|0;
    return (((HEAP8[(((cttz_i8)+(x >>> 24))>>0)])|0) + 24)|0;
  }

// ======== compiled code from system/lib/compiler-rt , see readme therein
function ___muldsi3($a, $b) {
  $a = $a | 0;
  $b = $b | 0;
  var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
  $1 = $a & 65535;
  $2 = $b & 65535;
  $3 = Math_imul($2, $1) | 0;
  $6 = $a >>> 16;
  $8 = ($3 >>> 16) + (Math_imul($2, $6) | 0) | 0;
  $11 = $b >>> 16;
  $12 = Math_imul($11, $1) | 0;
  return (tempRet0 = (($8 >>> 16) + (Math_imul($11, $6) | 0) | 0) + ((($8 & 65535) + $12 | 0) >>> 16) | 0, 0 | ($8 + $12 << 16 | $3 & 65535)) | 0;
}
function ___divdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $7$0 = 0, $7$1 = 0, $8$0 = 0, $10$0 = 0;
  $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0;
  $4$1 = tempRet0;
  $6$0 = _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0;
  $7$0 = $2$0 ^ $1$0;
  $7$1 = $2$1 ^ $1$1;
  $8$0 = ___udivmoddi4($4$0, $4$1, $6$0, tempRet0, 0) | 0;
  $10$0 = _i64Subtract($8$0 ^ $7$0, tempRet0 ^ $7$1, $7$0, $7$1) | 0;
  return $10$0 | 0;
}
function ___remdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $rem = 0, $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $10$0 = 0, $10$1 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  $rem = __stackBase__ | 0;
  $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0;
  $4$1 = tempRet0;
  $6$0 = _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0;
  ___udivmoddi4($4$0, $4$1, $6$0, tempRet0, $rem) | 0;
  $10$0 = _i64Subtract(HEAP32[$rem >> 2] ^ $1$0, HEAP32[$rem + 4 >> 2] ^ $1$1, $1$0, $1$1) | 0;
  $10$1 = tempRet0;
  STACKTOP = __stackBase__;
  return (tempRet0 = $10$1, $10$0) | 0;
}
function ___muldi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0, $2 = 0;
  $x_sroa_0_0_extract_trunc = $a$0;
  $y_sroa_0_0_extract_trunc = $b$0;
  $1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0;
  $1$1 = tempRet0;
  $2 = Math_imul($a$1, $y_sroa_0_0_extract_trunc) | 0;
  return (tempRet0 = ((Math_imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $2 | 0) + $1$1 | $1$1 & 0, 0 | $1$0 & -1) | 0;
}
function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $1$0 = 0;
  $1$0 = ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0;
  return $1$0 | 0;
}
function ___uremdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $rem = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  $rem = __stackBase__ | 0;
  ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) | 0;
  STACKTOP = __stackBase__;
  return (tempRet0 = HEAP32[$rem + 4 >> 2] | 0, HEAP32[$rem >> 2] | 0) | 0;
}
function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  $rem = $rem | 0;
  var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $49 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $86 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $117 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $147 = 0, $149 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $152 = 0, $154$0 = 0, $r_sroa_0_0_extract_trunc = 0, $r_sroa_1_4_extract_trunc = 0, $155 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $q_sroa_0_0_insert_insert77$1 = 0, $_0$0 = 0, $_0$1 = 0;
  $n_sroa_0_0_extract_trunc = $a$0;
  $n_sroa_1_4_extract_shift$0 = $a$1;
  $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0;
  $d_sroa_0_0_extract_trunc = $b$0;
  $d_sroa_1_4_extract_shift$0 = $b$1;
  $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0;
  if (($n_sroa_1_4_extract_trunc | 0) == 0) {
    $4 = ($rem | 0) != 0;
    if (($d_sroa_1_4_extract_trunc | 0) == 0) {
      if ($4) {
        HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
        HEAP32[$rem + 4 >> 2] = 0;
      }
      $_0$1 = 0;
      $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    } else {
      if (!$4) {
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      HEAP32[$rem >> 2] = $a$0 & -1;
      HEAP32[$rem + 4 >> 2] = $a$1 & 0;
      $_0$1 = 0;
      $_0$0 = 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    }
  }
  $17 = ($d_sroa_1_4_extract_trunc | 0) == 0;
  do {
    if (($d_sroa_0_0_extract_trunc | 0) == 0) {
      if ($17) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
          HEAP32[$rem + 4 >> 2] = 0;
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      if (($n_sroa_0_0_extract_trunc | 0) == 0) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = 0;
          HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0);
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $37 = $d_sroa_1_4_extract_trunc - 1 | 0;
      if (($37 & $d_sroa_1_4_extract_trunc | 0) == 0) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = 0 | $a$0 & -1;
          HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0;
        }
        $_0$1 = 0;
        $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0);
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $49 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
      $51 = $49 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
      if ($51 >>> 0 <= 30) {
        $57 = $51 + 1 | 0;
        $58 = 31 - $51 | 0;
        $sr_1_ph = $57;
        $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0);
        $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0);
        $q_sroa_0_1_ph = 0;
        $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58;
        break;
      }
      if (($rem | 0) == 0) {
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      HEAP32[$rem >> 2] = 0 | $a$0 & -1;
      HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
      $_0$1 = 0;
      $_0$0 = 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    } else {
      if (!$17) {
        $117 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
        $119 = $117 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        if ($119 >>> 0 <= 31) {
          $125 = $119 + 1 | 0;
          $126 = 31 - $119 | 0;
          $130 = $119 - 31 >> 31;
          $sr_1_ph = $125;
          $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126;
          $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130;
          $q_sroa_0_1_ph = 0;
          $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126;
          break;
        }
        if (($rem | 0) == 0) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = 0 | $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $66 = $d_sroa_0_0_extract_trunc - 1 | 0;
      if (($66 & $d_sroa_0_0_extract_trunc | 0) != 0) {
        $86 = (Math_clz32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 | 0;
        $88 = $86 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        $89 = 64 - $88 | 0;
        $91 = 32 - $88 | 0;
        $92 = $91 >> 31;
        $95 = $88 - 32 | 0;
        $105 = $95 >> 31;
        $sr_1_ph = $88;
        $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105;
        $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0);
        $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92;
        $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31;
        break;
      }
      if (($rem | 0) != 0) {
        HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc;
        HEAP32[$rem + 4 >> 2] = 0;
      }
      if (($d_sroa_0_0_extract_trunc | 0) == 1) {
        $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$0 = 0 | $a$0 & -1;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      } else {
        $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0;
        $_0$1 = 0 | $n_sroa_1_4_extract_trunc >>> ($78 >>> 0);
        $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
    }
  } while (0);
  if (($sr_1_ph | 0) == 0) {
    $q_sroa_1_1_lcssa = $q_sroa_1_1_ph;
    $q_sroa_0_1_lcssa = $q_sroa_0_1_ph;
    $r_sroa_1_1_lcssa = $r_sroa_1_1_ph;
    $r_sroa_0_1_lcssa = $r_sroa_0_1_ph;
    $carry_0_lcssa$1 = 0;
    $carry_0_lcssa$0 = 0;
  } else {
    $d_sroa_0_0_insert_insert99$0 = 0 | $b$0 & -1;
    $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0;
    $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0 | 0, $d_sroa_0_0_insert_insert99$1 | 0, -1, -1) | 0;
    $137$1 = tempRet0;
    $q_sroa_1_1198 = $q_sroa_1_1_ph;
    $q_sroa_0_1199 = $q_sroa_0_1_ph;
    $r_sroa_1_1200 = $r_sroa_1_1_ph;
    $r_sroa_0_1201 = $r_sroa_0_1_ph;
    $sr_1202 = $sr_1_ph;
    $carry_0203 = 0;
    while (1) {
      $147 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1;
      $149 = $carry_0203 | $q_sroa_0_1199 << 1;
      $r_sroa_0_0_insert_insert42$0 = 0 | ($r_sroa_0_1201 << 1 | $q_sroa_1_1198 >>> 31);
      $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0;
      _i64Subtract($137$0, $137$1, $r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1) | 0;
      $150$1 = tempRet0;
      $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1;
      $152 = $151$0 & 1;
      $154$0 = _i64Subtract($r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1, $151$0 & $d_sroa_0_0_insert_insert99$0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1) | 0;
      $r_sroa_0_0_extract_trunc = $154$0;
      $r_sroa_1_4_extract_trunc = tempRet0;
      $155 = $sr_1202 - 1 | 0;
      if (($155 | 0) == 0) {
        break;
      } else {
        $q_sroa_1_1198 = $147;
        $q_sroa_0_1199 = $149;
        $r_sroa_1_1200 = $r_sroa_1_4_extract_trunc;
        $r_sroa_0_1201 = $r_sroa_0_0_extract_trunc;
        $sr_1202 = $155;
        $carry_0203 = $152;
      }
    }
    $q_sroa_1_1_lcssa = $147;
    $q_sroa_0_1_lcssa = $149;
    $r_sroa_1_1_lcssa = $r_sroa_1_4_extract_trunc;
    $r_sroa_0_1_lcssa = $r_sroa_0_0_extract_trunc;
    $carry_0_lcssa$1 = 0;
    $carry_0_lcssa$0 = $152;
  }
  $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa;
  $q_sroa_0_0_insert_ext75$1 = 0;
  $q_sroa_0_0_insert_insert77$1 = $q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1;
  if (($rem | 0) != 0) {
    HEAP32[$rem >> 2] = 0 | $r_sroa_0_1_lcssa;
    HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa | 0;
  }
  $_0$1 = (0 | $q_sroa_0_0_insert_ext75$0) >>> 31 | $q_sroa_0_0_insert_insert77$1 << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1;
  $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0;
  return (tempRet0 = $_0$1, $_0$0) | 0;
}
// =======================================================================



  
function dynCall_iiii(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0;
  return FUNCTION_TABLE_iiii[index&511](a1|0,a2|0,a3|0)|0;
}


function dynCall_viiiii(index,a1,a2,a3,a4,a5) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
  FUNCTION_TABLE_viiiii[index&511](a1|0,a2|0,a3|0,a4|0,a5|0);
}


function dynCall_i(index) {
  index = index|0;
  
  return FUNCTION_TABLE_i[index&511]()|0;
}


function dynCall_vi(index,a1) {
  index = index|0;
  a1=a1|0;
  FUNCTION_TABLE_vi[index&511](a1|0);
}


function dynCall_vii(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=a2|0;
  FUNCTION_TABLE_vii[index&511](a1|0,a2|0);
}


function dynCall_ii(index,a1) {
  index = index|0;
  a1=a1|0;
  return FUNCTION_TABLE_ii[index&511](a1|0)|0;
}


function dynCall_viii(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0;
  FUNCTION_TABLE_viii[index&511](a1|0,a2|0,a3|0);
}


function dynCall_v(index) {
  index = index|0;
  
  FUNCTION_TABLE_v[index&511]();
}


function dynCall_viiiiii(index,a1,a2,a3,a4,a5,a6) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
  FUNCTION_TABLE_viiiiii[index&511](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0);
}


function dynCall_viiii(index,a1,a2,a3,a4) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  FUNCTION_TABLE_viiii[index&511](a1|0,a2|0,a3|0,a4|0);
}

function b0(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(0);return 0;
}
function b1(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(1);
}
function b2() {
 ; nullFunc_i(2);return 0;
}
function b3(p0) {
 p0 = p0|0; nullFunc_vi(3);
}
function b4(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(4);
}
function b5(p0) {
 p0 = p0|0; nullFunc_ii(5);return 0;
}
function b6(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(6);
}
function b7() {
 ; nullFunc_v(7);
}
function _SDL_Quit__wrapper() {
 ; _SDL_Quit();
}
function b8(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(8);
}
function b9(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(9);
}

// EMSCRIPTEN_END_FUNCS
var FUNCTION_TABLE_iiii = [b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv,b0,b0,b0,b0,b0,b0,b0,b0,___stdout_write,___stdio_seek,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,___stdio_read,___stdio_write,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0];
var FUNCTION_TABLE_viiiii = [b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,__ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,b1,b1,b1,__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1];
var FUNCTION_TABLE_i = [b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,__ZL12PerfGetTicksv,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2];
var FUNCTION_TABLE_vi = [b3,__ZL20_AddressLineUpdatingt,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZNSt9bad_allocD2Ev,__ZNSt9bad_allocD0Ev,b3,__ZN10__cxxabiv116__shim_type_infoD2Ev,__ZN10__cxxabiv117__class_type_infoD0Ev,__ZNK10__cxxabiv116__shim_type_info5noop1Ev,__ZNK10__cxxabiv116__shim_type_info5noop2Ev,b3,b3,b3,b3,__ZN10__cxxabiv120__si_class_type_infoD0Ev,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZN11Sound_QueueC2Ev,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZL18Chrlatch_Mapper009t,b3,b3,__ZL18Chrlatch_Mapper010t
,b3,b3,__ZL23PPU_AddressLineUpdatingt,b3,b3,b3,_cleanup521,_cleanup526,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3];
var FUNCTION_TABLE_vii = [b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZL14Poke_Mapper001th,b4,__ZL14Poke_Mapper002th,b4,__ZL14Poke_Mapper003th,b4,b4,__ZL14Poke_Mapper004th,b4,b4,__ZL14Poke_Mapper009th,b4,b4,__ZL14Poke_Mapper010th,b4
,b4,__ZL14Poke_Mapper246th,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4];
var FUNCTION_TABLE_ii = [b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,__ZNKSt9bad_alloc4whatEv,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,___stdio_close,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,__ZL14Peek_Mapper004t,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5];
var FUNCTION_TABLE_viii = [b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,__ZN11Sound_Queue12fill_buffer_EPvPhi,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6];
var FUNCTION_TABLE_v = [b7,b7,__Z10_execute_0v,__Z10_execute_1v,__Z10_execute_2v,__Z10_execute_3v,__Z10_execute_4v,__Z10_execute_5v,__Z10_execute_6v,__Z10_execute_7v,__Z10_execute_8v,__Z10_execute_9v,__Z11_execute_10v,__Z11_execute_11v,__Z11_execute_12v,__Z11_execute_13v,__Z11_execute_14v,__Z11_execute_15v,__Z11_execute_16v,__Z11_execute_17v,__Z11_execute_18v,__Z11_execute_19v,__Z11_execute_20v,__Z11_execute_21v,__Z11_execute_22v,__Z11_execute_23v,__Z11_execute_24v,__Z11_execute_25v,__Z11_execute_26v
,__Z11_execute_27v,__Z11_execute_28v,__Z11_execute_29v,__Z11_execute_30v,__Z11_execute_31v,__Z11_execute_32v,__Z11_execute_33v,__Z11_execute_34v,__Z11_execute_35v,__Z11_execute_36v,__Z11_execute_37v,__Z11_execute_38v,__Z11_execute_39v,__Z11_execute_40v,__Z11_execute_41v,__Z11_execute_42v,__Z11_execute_43v,__Z11_execute_44v,__Z11_execute_45v,__Z11_execute_46v,__Z11_execute_47v,__Z11_execute_48v,__Z11_execute_49v,__Z11_execute_50v,__Z11_execute_51v,__Z11_execute_52v,__Z11_execute_53v,__Z11_execute_54v,__Z11_execute_55v,__Z11_execute_56v
,__Z11_execute_57v,__Z11_execute_58v,__Z11_execute_59v,__Z11_execute_60v,__Z11_execute_61v,__Z11_execute_62v,__Z11_execute_63v,__Z11_execute_64v,__Z11_execute_65v,__Z11_execute_66v,__Z11_execute_67v,__Z11_execute_68v,__Z11_execute_69v,__Z11_execute_70v,__Z11_execute_71v,__Z11_execute_72v,__Z11_execute_73v,__Z11_execute_74v,__Z11_execute_75v,__Z11_execute_76v,__Z11_execute_77v,__Z11_execute_78v,__Z11_execute_79v,__Z11_execute_80v,__Z11_execute_81v,__Z11_execute_82v,__Z11_execute_83v,__Z11_execute_84v,__Z11_execute_85v,__Z11_execute_86v
,__Z11_execute_87v,__Z11_execute_88v,__Z11_execute_89v,__Z11_execute_90v,__Z11_execute_91v,__Z11_execute_92v,__Z11_execute_93v,__Z11_execute_94v,__Z11_execute_95v,__Z11_execute_96v,__Z11_execute_97v,__Z11_execute_98v,__Z11_execute_99v,__Z12_execute_100v,__Z12_execute_101v,__Z12_execute_102v,__Z12_execute_103v,__Z12_execute_104v,__Z12_execute_105v,__Z12_execute_106v,__Z12_execute_107v,__Z12_execute_108v,__Z12_execute_109v,__Z12_execute_110v,__Z12_execute_111v,__Z12_execute_112v,__Z12_execute_113v,__Z12_execute_114v,__Z12_execute_115v,__Z12_execute_116v
,__Z12_execute_117v,__Z12_execute_118v,__Z12_execute_119v,__Z12_execute_120v,__Z12_execute_121v,__Z12_execute_122v,__Z12_execute_123v,__Z12_execute_124v,__Z12_execute_125v,__Z12_execute_126v,__Z12_execute_127v,__Z12_execute_128v,__Z12_execute_129v,__Z12_execute_130v,__Z12_execute_131v,__Z12_execute_132v,__Z12_execute_133v,__Z12_execute_134v,__Z12_execute_135v,__Z12_execute_136v,__Z12_execute_137v,__Z12_execute_138v,__Z12_execute_139v,__Z12_execute_140v,__Z12_execute_141v,__Z12_execute_142v,__Z12_execute_143v,__Z12_execute_144v,__Z12_execute_145v,__Z12_execute_146v
,__Z12_execute_147v,__Z12_execute_148v,__Z12_execute_149v,__Z12_execute_150v,__Z12_execute_151v,__Z12_execute_152v,__Z12_execute_153v,__Z12_execute_154v,__Z12_execute_155v,__Z12_execute_156v,__Z12_execute_157v,__Z12_execute_158v,__Z12_execute_159v,__Z12_execute_160v,__Z12_execute_161v,__Z12_execute_162v,__Z12_execute_163v,__Z12_execute_164v,__Z12_execute_165v,__Z12_execute_166v,__Z12_execute_167v,__Z12_execute_168v,__Z12_execute_169v,__Z12_execute_170v,__Z12_execute_171v,__Z12_execute_172v,__Z12_execute_173v,__Z12_execute_174v,__Z12_execute_175v,__Z12_execute_176v
,__Z12_execute_177v,__Z12_execute_178v,__Z12_execute_179v,__Z12_execute_180v,__Z12_execute_181v,__Z12_execute_182v,__Z12_execute_183v,__Z12_execute_184v,__Z12_execute_185v,__Z12_execute_186v,__Z12_execute_187v,__Z12_execute_188v,__Z12_execute_189v,__Z12_execute_190v,__Z12_execute_191v,__Z12_execute_192v,__Z12_execute_193v,__Z12_execute_194v,__Z12_execute_195v,__Z12_execute_196v,__Z12_execute_197v,__Z12_execute_198v,__Z12_execute_199v,__Z12_execute_200v,__Z12_execute_201v,__Z12_execute_202v,__Z12_execute_203v,__Z12_execute_204v,__Z12_execute_205v,__Z12_execute_206v
,__Z12_execute_207v,__Z12_execute_208v,__Z12_execute_209v,__Z12_execute_210v,__Z12_execute_211v,__Z12_execute_212v,__Z12_execute_213v,__Z12_execute_214v,__Z12_execute_215v,__Z12_execute_216v,__Z12_execute_217v,__Z12_execute_218v,__Z12_execute_219v,__Z12_execute_220v,__Z12_execute_221v,__Z12_execute_222v,__Z12_execute_223v,__Z12_execute_224v,__Z12_execute_225v,__Z12_execute_226v,__Z12_execute_227v,__Z12_execute_228v,__Z12_execute_229v,__Z12_execute_230v,__Z12_execute_231v,__Z12_execute_232v,__Z12_execute_233v,__Z12_execute_234v,__Z12_execute_235v,__Z12_execute_236v
,__Z12_execute_237v,__Z12_execute_238v,__Z12_execute_239v,__Z12_execute_240v,__Z12_execute_241v,__Z12_execute_242v,__Z12_execute_243v,__Z12_execute_244v,__Z12_execute_245v,__Z12_execute_246v,__Z12_execute_247v,__Z12_execute_248v,__Z12_execute_249v,__Z12_execute_250v,__Z12_execute_251v,__Z12_execute_252v,__Z12_execute_253v,__Z12_execute_254v,__Z12_execute_255v,__Z12_execute_256v,__Z12_execute_257v,__Z12_execute_258v,__Z12_execute_259v,__Z12_execute_260v,__Z12_execute_261v,__Z12_execute_262v,__Z12_execute_263v,__Z12_execute_264v,__Z12_execute_265v,__Z12_execute_266v
,__Z12_execute_267v,__Z12_execute_268v,__Z12_execute_269v,__Z12_execute_270v,__Z12_execute_271v,__Z12_execute_272v,__Z12_execute_273v,__Z12_execute_274v,__Z12_execute_275v,__Z12_execute_276v,__Z12_execute_277v,__Z12_execute_278v,__Z12_execute_279v,__Z12_execute_280v,__Z12_execute_281v,__Z12_execute_282v,__Z12_execute_283v,__Z12_execute_284v,__Z12_execute_285v,__Z12_execute_286v,__Z12_execute_287v,__Z12_execute_288v,__Z12_execute_289v,__Z12_execute_290v,__Z12_execute_291v,__Z12_execute_292v,__Z12_execute_293v,__Z12_execute_294v,__Z12_execute_295v,__Z12_execute_296v
,__Z12_execute_297v,__Z12_execute_298v,__Z12_execute_299v,__Z12_execute_300v,__Z12_execute_301v,__Z12_execute_302v,__Z12_execute_303v,__Z12_execute_304v,__Z12_execute_305v,__Z12_execute_306v,__Z12_execute_307v,__Z12_execute_308v,__Z12_execute_309v,__Z12_execute_310v,__Z12_execute_311v,__Z12_execute_312v,__Z12_execute_313v,__Z12_execute_314v,__Z12_execute_315v,__Z12_execute_316v,__Z12_execute_317v,__Z12_execute_318v,__Z12_execute_319v,__Z12_execute_320v,__Z12_execute_321v,__Z12_execute_322v,__Z12_execute_323v,__Z12_execute_324v,__Z12_execute_325v,__Z12_execute_326v
,__Z12_execute_327v,__Z12_execute_328v,__Z12_execute_329v,__Z12_execute_330v,__Z12_execute_331v,__Z12_execute_332v,__Z12_execute_333v,__Z12_execute_334v,__Z12_execute_335v,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,__ZL13EvaluateFetchv,__ZL14EvaluatePhase1v,__ZL13EvaluateResetv
,__ZL14EvaluatePhase0v,__ZL14EvaluatePhase9v,__ZL14EvaluatePhase2v,__ZL14EvaluatePhase3v,__ZL14EvaluatePhase4v,__ZL14EvaluatePhase5v,__ZL14EvaluatePhase6v,__ZL14EvaluatePhase7v,__ZL14EvaluatePhase8v,b7,_main_loop,_SDL_Quit__wrapper,b7,__ZL15Reset_Mapper000v,__ZL15Reset_Mapper001v,b7,__ZL15Reset_Mapper002v,b7,__ZL15Reset_Mapper003v,b7,__ZL15Reset_Mapper004v,b7,b7,__ZL17TickPPUCylceTimerv,__ZL15Reset_Mapper009v,b7,b7,__ZL15Reset_Mapper010v,b7,b7
,__ZL15Reset_Mapper246v,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7];
var FUNCTION_TABLE_viiiiii = [b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,__ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,b8,b8,b8,__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8];
var FUNCTION_TABLE_viiii = [b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,__ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,b9,b9,b9,__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9];

  return { ___cxa_can_catch: ___cxa_can_catch, _fflush: _fflush, _main: _main, ___cxa_is_pointer_type: ___cxa_is_pointer_type, _i64Add: _i64Add, _i64Subtract: _i64Subtract, _memset: _memset, _malloc: _malloc, _memcpy: _memcpy, _bitshift64Lshr: _bitshift64Lshr, _free: _free, ___errno_location: ___errno_location, _bitshift64Shl: _bitshift64Shl, __GLOBAL__sub_I_apu_cpp: __GLOBAL__sub_I_apu_cpp, runPostSets: runPostSets, stackAlloc: stackAlloc, stackSave: stackSave, stackRestore: stackRestore, establishStackSpace: establishStackSpace, setThrew: setThrew, setTempRet0: setTempRet0, getTempRet0: getTempRet0, dynCall_iiii: dynCall_iiii, dynCall_viiiii: dynCall_viiiii, dynCall_i: dynCall_i, dynCall_vi: dynCall_vi, dynCall_vii: dynCall_vii, dynCall_ii: dynCall_ii, dynCall_viii: dynCall_viii, dynCall_v: dynCall_v, dynCall_viiiiii: dynCall_viiiiii, dynCall_viiii: dynCall_viiii };
})
// EMSCRIPTEN_END_ASM
(Module.asmGlobalArg, Module.asmLibraryArg, buffer);
var real____cxa_can_catch = asm["___cxa_can_catch"]; asm["___cxa_can_catch"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____cxa_can_catch.apply(null, arguments);
};

var real__fflush = asm["_fflush"]; asm["_fflush"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__fflush.apply(null, arguments);
};

var real__main = asm["_main"]; asm["_main"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__main.apply(null, arguments);
};

var real____cxa_is_pointer_type = asm["___cxa_is_pointer_type"]; asm["___cxa_is_pointer_type"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____cxa_is_pointer_type.apply(null, arguments);
};

var real__i64Add = asm["_i64Add"]; asm["_i64Add"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__i64Add.apply(null, arguments);
};

var real__i64Subtract = asm["_i64Subtract"]; asm["_i64Subtract"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__i64Subtract.apply(null, arguments);
};

var real__malloc = asm["_malloc"]; asm["_malloc"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__malloc.apply(null, arguments);
};

var real__bitshift64Lshr = asm["_bitshift64Lshr"]; asm["_bitshift64Lshr"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__bitshift64Lshr.apply(null, arguments);
};

var real__free = asm["_free"]; asm["_free"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__free.apply(null, arguments);
};

var real___GLOBAL__sub_I_apu_cpp = asm["__GLOBAL__sub_I_apu_cpp"]; asm["__GLOBAL__sub_I_apu_cpp"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real___GLOBAL__sub_I_apu_cpp.apply(null, arguments);
};

var real____errno_location = asm["___errno_location"]; asm["___errno_location"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____errno_location.apply(null, arguments);
};

var real__bitshift64Shl = asm["_bitshift64Shl"]; asm["_bitshift64Shl"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__bitshift64Shl.apply(null, arguments);
};
var ___cxa_can_catch = Module["___cxa_can_catch"] = asm["___cxa_can_catch"];
var _fflush = Module["_fflush"] = asm["_fflush"];
var _main = Module["_main"] = asm["_main"];
var ___cxa_is_pointer_type = Module["___cxa_is_pointer_type"] = asm["___cxa_is_pointer_type"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var runPostSets = Module["runPostSets"] = asm["runPostSets"];
var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
var _memset = Module["_memset"] = asm["_memset"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
var _free = Module["_free"] = asm["_free"];
var __GLOBAL__sub_I_apu_cpp = Module["__GLOBAL__sub_I_apu_cpp"] = asm["__GLOBAL__sub_I_apu_cpp"];
var ___errno_location = Module["___errno_location"] = asm["___errno_location"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_viiiii = Module["dynCall_viiiii"] = asm["dynCall_viiiii"];
var dynCall_i = Module["dynCall_i"] = asm["dynCall_i"];
var dynCall_vi = Module["dynCall_vi"] = asm["dynCall_vi"];
var dynCall_vii = Module["dynCall_vii"] = asm["dynCall_vii"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_viii = Module["dynCall_viii"] = asm["dynCall_viii"];
var dynCall_v = Module["dynCall_v"] = asm["dynCall_v"];
var dynCall_viiiiii = Module["dynCall_viiiiii"] = asm["dynCall_viiiiii"];
var dynCall_viiii = Module["dynCall_viiii"] = asm["dynCall_viiii"];
;

Runtime.stackAlloc = asm['stackAlloc'];
Runtime.stackSave = asm['stackSave'];
Runtime.stackRestore = asm['stackRestore'];
Runtime.establishStackSpace = asm['establishStackSpace'];

Runtime.setTempRet0 = asm['setTempRet0'];
Runtime.getTempRet0 = asm['getTempRet0'];



// === Auto-generated postamble setup entry stuff ===


function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var preloadStartTime = null;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun']) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}

Module['callMain'] = Module.callMain = function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');

  args = args || [];

  ensureInitRuntime();

  var argc = args.length+1;
  function pad() {
    for (var i = 0; i < 4-1; i++) {
      argv.push(0);
    }
  }
  var argv = [allocate(intArrayFromString(Module['thisProgram']), 'i8', ALLOC_NORMAL) ];
  pad();
  for (var i = 0; i < argc-1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_NORMAL));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, 'i32', ALLOC_NORMAL);


  try {

    var ret = Module['_main'](argc, argv, 0);


    // if we're not running an evented main loop, it's time to exit
    exit(ret, /* implicit = */ true);
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      return;
    } else {
      if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
      throw e;
    }
  } finally {
    calledMain = true;
  }
}




function run(args) {
  args = args || Module['arguments'];

  if (preloadStartTime === null) preloadStartTime = Date.now();

  if (runDependencies > 0) {
    Module.printErr('run() called, but dependencies remain, so not running');
    return;
  }

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    if (ABORT) return; 

    ensureInitRuntime();

    preMain();

    if (ENVIRONMENT_IS_WEB && preloadStartTime !== null) {
      Module.printErr('pre-main prep time: ' + (Date.now() - preloadStartTime) + ' ms');
    }

    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    if (Module['_main'] && shouldRunNow) Module['callMain'](args);

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else {
    doRun();
  }
}
Module['run'] = Module.run = run;

function exit(status, implicit) {
  if (implicit && Module['noExitRuntime']) {
    Module.printErr('exit(' + status + ') implicitly called by end of main(), but noExitRuntime, so not exiting the runtime (you can use emscripten_force_exit, if you want to force a true shutdown)');
    return;
  }

  if (Module['noExitRuntime']) {
    Module.printErr('exit(' + status + ') called, but noExitRuntime, so halting execution but not exiting the runtime or preventing further async execution (you can use emscripten_force_exit, if you want to force a true shutdown)');
  } else {

    ABORT = true;
    EXITSTATUS = status;
    STACKTOP = initialStackTop;

    exitRuntime();

    if (Module['onExit']) Module['onExit'](status);
  }

  if (ENVIRONMENT_IS_NODE) {
    // Work around a node.js bug where stdout buffer is not flushed at process exit:
    // Instead of process.exit() directly, wait for stdout flush event.
    // See https://github.com/joyent/node/issues/1669 and https://github.com/kripken/emscripten/issues/2582
    // Workaround is based on https://github.com/RReverser/acorn/commit/50ab143cecc9ed71a2d66f78b4aec3bb2e9844f6
    process['stdout']['once']('drain', function () {
      process['exit'](status);
    });
    console.log(' '); // Make sure to print something to force the drain event to occur, in case the stdout buffer was empty.
    // Work around another node bug where sometimes 'drain' is never fired - make another effort
    // to emit the exit status, after a significant delay (if node hasn't fired drain by then, give up)
    setTimeout(function() {
      process['exit'](status);
    }, 500);
  } else
  if (ENVIRONMENT_IS_SHELL && typeof quit === 'function') {
    quit(status);
  }
  // if we reach here, we must throw an exception to halt the current execution
  throw new ExitStatus(status);
}
Module['exit'] = Module.exit = exit;

var abortDecorators = [];

function abort(what) {
  if (what !== undefined) {
    Module.print(what);
    Module.printErr(what);
    what = JSON.stringify(what)
  } else {
    what = '';
  }

  ABORT = true;
  EXITSTATUS = 1;

  var extra = '';

  var output = 'abort(' + what + ') at ' + stackTrace() + extra;
  if (abortDecorators) {
    abortDecorators.forEach(function(decorator) {
      output = decorator(output, what);
    });
  }
  throw output;
}
Module['abort'] = Module.abort = abort;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}


run();

// {{POST_RUN_ADDITIONS}}






// {{MODULE_ADDITIONS}}



